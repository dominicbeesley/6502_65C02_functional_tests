AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6188 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 21-oct-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0000 =                  ROM_vectors = 0
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0050 =                  zero_page = $50
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
3200 =                  data_segment = $3200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
3400 =                  code_segment = $3400
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0050 =                          org zero_page
                        ;break test interrupt save
0050 =                  irq_a   ds  1               ;a register
0051 =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0052 =                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0052 =                  adfc    ds  1               ;carry flag before op
0053 =                  ad1     ds  1               ;operand 1 - accumulator
0054 =                  ad2     ds  1               ;operand 2 - memory / immediate
0055 =                  adrl    ds  1               ;expected result bits 0-7
0056 =                  adrh    ds  1               ;expected result bit 8 (carry)
0057 =                  adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0058 =                  sb2     ds  1               ;operand 2 complemented for subtract
0059 =                  zp_bss
0059 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
005d =                  zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
005e =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0062 =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0066 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
006a =                  ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
006c =                          dw  abs1+1
006e =                          dw  abs1+2
0070 =                          dw  abs1+3
0072 =                          dw  abs7f
0074 =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0076 =                  indt    dw  abst            ;indirect pointer to store area in absolute memory
0078 =                          dw  abst+1
007a =                          dw  abst+2
007c =                          dw  abst+3
007e =                  inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0080 =                  indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0082 =                          dw  absAN+1
0084 =                          dw  absAN+2
0086 =                          dw  absAN+3
0088 =                  indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
008a =                          dw  absEO+1
008c =                          dw  absEO+2
008e =                          dw  absEO+3
0090 =                  indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0092 =                          dw  absOR+1
0094 =                          dw  absOR+2
0096 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0098 =                  adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
009a =                  sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
009c =                  adiy2   dw  ada2-$ff        ;with offset for indirect indexed
009e =                  sbiy2   dw  sba2-$ff
00a0 =                  zp_bss_end
                           
3200 =                          org data_segment
3200 =                  test_case   ds  1           ;current test number
3201 =                  ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
3203 =                  abst                        ;5 bytes store/modify test area
3203 =                  ada2    ds  1               ;operand 2
3204 =                  sba2    ds  1               ;operand 2 complemented for subtract
3205 =                          ds  3               ;fill remaining bytes
3208 =                  data_bss
                            if load_data_direct = 1
                        ex_andi and #0              ;execute immediate opcodes
                                rts
                        ex_eori eor #0              ;execute immediate opcodes
                                rts
                        ex_orai ora #0              ;execute immediate opcodes
                                rts
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
3208 =                  ex_andi ds  3
320b =                  ex_eori ds  3
320e =                  ex_orai ds  3
3211 =                  ex_adci ds  3
3214 =                  ex_sbci ds  3
                            endif
3217 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
321b =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
321c =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
3220 =                  rASL                        ;expected result ASL & ROL -carry  
3220 =                  rROL    db  $86,$04,$82,0   ; "
3224 =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
3228 =                  rLSR                        ;expected result LSR & ROR -carry
3228 =                  rROR    db  $61,$41,$20,0   ; "
322c =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
3230 =                  fASL                        ;expected flags for shifts
3230 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
3234 =                  fROLc   db  fnc,fc,fn,0     ;carry in
3238 =                  fLSR
3238 =                  fROR    db  fc,0,fc,fz      ;no carry in
323c =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
3240 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
3245 =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
324a =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
324e =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
3252 =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
3256 =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
325a =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
325e =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
3262 =                  absrlo  db  0,$ff,$7f,$80
3266 =                  absflo  db  fz,fn,0,fn
326a =                  data_bss_end
                        
                        
                                code
3400 =                          org code_segment
3400 : d8               start   cld
3401 : a2ff                     ldx #$ff
3403 : 9a                       txs
3404 : a900                     lda #0          ;*** test 0 = initialize
3406 : 8d0032                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
3409 : 20d073                   jsr report_init
                            endif
                            
                        ;pretest small branch offset
340c : a205                     ldx #5
340e : 4c3634                   jmp psb_test
3411 :                  psb_bwok
3411 : a005                     ldy #5
3413 : d008                     bne psb_forw
                                trap        ;branch should be taken
3415 : 20df73          >        jsr report_error
                        
3418 : 88                       dey         ;forward landing zone
3419 : 88                       dey
341a : 88                       dey
341b : 88                       dey
341c : 88                       dey
341d :                  psb_forw
341d : 88                       dey
341e : 88                       dey
341f : 88                       dey
3420 : 88                       dey
3421 : 88                       dey
3422 : f017                     beq psb_fwok
                                trap        ;forward offset
3424 : 20df73          >        jsr report_error
                        
                        
3427 : ca                       dex         ;backward landing zone
3428 : ca                       dex
3429 : ca                       dex
342a : ca                       dex
342b : ca                       dex
342c :                  psb_back
342c : ca                       dex
342d : ca                       dex
342e : ca                       dex
342f : ca                       dex
3430 : ca                       dex
3431 : f0de                     beq psb_bwok
                                trap        ;backward offset
3433 : 20df73          >        jsr report_error
                        
3436 :                  psb_test
3436 : d0f4                     bne psb_back
                                trap        ;branch should be taken
3438 : 20df73          >        jsr report_error
                        
343b :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
343b : a246                     ldx #zp_end-zp_init-1
343d : bd1775           ld_zp   lda zp_init,x
3440 : 9559                     sta zp_bss,x
3442 : ca                       dex
3443 : 10f8                     bpl ld_zp
3445 : a261                     ldx #data_end-data_init-1
3447 : bd5e75           ld_data lda data_init,x
344a : 9d0832                   sta data_bss,x
344d : ca                       dex
344e : 10f7                     bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
3450 : ad0032          >            lda test_case   ;previous test
3453 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3455 : f003            >        beq skip0006
                       >        trap            ;failed not equal (non zero)
3457 : 20df73          >        jsr report_error
                       >
345a :                 >skip0006
                       >
0001 =                 >test_num = test_num + 1
345a : a901            >            lda #test_num   ;*** next tests' number
345c : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
345f : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
3461 :                  range_loop
3461 : 88                       dey             ;next relative address
3462 : 98                       tya
3463 : aa                       tax             ;precharge count to end of loop
3464 : 1008                     bpl range_fw    ;calculate relative address
3466 : 18                       clc             ;avoid branch self or to relative address of branch
3467 : 6902                     adc #2
3469 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
346a : ea                       nop
346b : ea                       nop
346c : ea                       nop
346d : ea                       nop
346e :                  range_fw
346e : ea                       nop
346f : ea                       nop
3470 : ea                       nop
3471 : ea                       nop
3472 : ea                       nop
3473 : 497f                     eor #$7f        ;complement except sign
3475 : 8d0135                   sta range_adr   ;load into test target
3478 : a900                     lda #0          ;should set zero flag in status register
347a : 4c0035                   jmp range_op
                                
347d : ca                       dex             ; offset landing zone - backward branch too far
347e : ca                       dex
347f : ca                       dex
3480 : ca                       dex
3481 : ca                       dex
                                ;relative address target field with branch under test in the middle
3482 : ca                       dex             ;-128 - max backward
3483 : ca                       dex
3484 : ca                       dex
3485 : ca                       dex
3486 : ca                       dex
3487 : ca                       dex
3488 : ca                       dex
3489 : ca                       dex
348a : ca                       dex             ;-120
348b : ca                       dex
348c : ca                       dex
348d : ca                       dex
348e : ca                       dex
348f : ca                       dex
3490 : ca                       dex
3491 : ca                       dex
3492 : ca                       dex
3493 : ca                       dex
3494 : ca                       dex             ;-110
3495 : ca                       dex
3496 : ca                       dex
3497 : ca                       dex
3498 : ca                       dex
3499 : ca                       dex
349a : ca                       dex
349b : ca                       dex
349c : ca                       dex
349d : ca                       dex
349e : ca                       dex             ;-100
349f : ca                       dex
34a0 : ca                       dex
34a1 : ca                       dex
34a2 : ca                       dex
34a3 : ca                       dex
34a4 : ca                       dex
34a5 : ca                       dex
34a6 : ca                       dex
34a7 : ca                       dex
34a8 : ca                       dex             ;-90
34a9 : ca                       dex
34aa : ca                       dex
34ab : ca                       dex
34ac : ca                       dex
34ad : ca                       dex
34ae : ca                       dex
34af : ca                       dex
34b0 : ca                       dex
34b1 : ca                       dex
34b2 : ca                       dex             ;-80
34b3 : ca                       dex
34b4 : ca                       dex
34b5 : ca                       dex
34b6 : ca                       dex
34b7 : ca                       dex
34b8 : ca                       dex
34b9 : ca                       dex
34ba : ca                       dex
34bb : ca                       dex
34bc : ca                       dex             ;-70
34bd : ca                       dex
34be : ca                       dex
34bf : ca                       dex
34c0 : ca                       dex
34c1 : ca                       dex
34c2 : ca                       dex
34c3 : ca                       dex
34c4 : ca                       dex
34c5 : ca                       dex
34c6 : ca                       dex             ;-60
34c7 : ca                       dex
34c8 : ca                       dex
34c9 : ca                       dex
34ca : ca                       dex
34cb : ca                       dex
34cc : ca                       dex
34cd : ca                       dex
34ce : ca                       dex
34cf : ca                       dex
34d0 : ca                       dex             ;-50
34d1 : ca                       dex
34d2 : ca                       dex
34d3 : ca                       dex
34d4 : ca                       dex
34d5 : ca                       dex
34d6 : ca                       dex
34d7 : ca                       dex
34d8 : ca                       dex
34d9 : ca                       dex
34da : ca                       dex             ;-40
34db : ca                       dex
34dc : ca                       dex
34dd : ca                       dex
34de : ca                       dex
34df : ca                       dex
34e0 : ca                       dex
34e1 : ca                       dex
34e2 : ca                       dex
34e3 : ca                       dex
34e4 : ca                       dex             ;-30
34e5 : ca                       dex
34e6 : ca                       dex
34e7 : ca                       dex
34e8 : ca                       dex
34e9 : ca                       dex
34ea : ca                       dex
34eb : ca                       dex
34ec : ca                       dex
34ed : ca                       dex
34ee : ca                       dex             ;-20
34ef : ca                       dex
34f0 : ca                       dex
34f1 : ca                       dex
34f2 : ca                       dex
34f3 : ca                       dex
34f4 : ca                       dex
34f5 : ca                       dex
34f6 : ca                       dex
34f7 : ca                       dex
34f8 : ca                       dex             ;-10
34f9 : ca                       dex
34fa : ca                       dex
34fb : ca                       dex
34fc : ca                       dex
34fd : ca                       dex
34fe : ca                       dex
34ff : ca                       dex             ;-3
3500 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
3501 =                  range_adr   = *+1       ;modifiable relative address
3500 : f03e                     beq *+64        ;+64 if called without modification
3502 : ca                       dex             ;+0
3503 : ca                       dex
3504 : ca                       dex
3505 : ca                       dex
3506 : ca                       dex
3507 : ca                       dex
3508 : ca                       dex
3509 : ca                       dex
350a : ca                       dex
350b : ca                       dex
350c : ca                       dex             ;+10
350d : ca                       dex
350e : ca                       dex
350f : ca                       dex
3510 : ca                       dex
3511 : ca                       dex
3512 : ca                       dex
3513 : ca                       dex
3514 : ca                       dex
3515 : ca                       dex
3516 : ca                       dex             ;+20
3517 : ca                       dex
3518 : ca                       dex
3519 : ca                       dex
351a : ca                       dex
351b : ca                       dex
351c : ca                       dex
351d : ca                       dex
351e : ca                       dex
351f : ca                       dex
3520 : ca                       dex             ;+30
3521 : ca                       dex
3522 : ca                       dex
3523 : ca                       dex
3524 : ca                       dex
3525 : ca                       dex
3526 : ca                       dex
3527 : ca                       dex
3528 : ca                       dex
3529 : ca                       dex
352a : ca                       dex             ;+40
352b : ca                       dex
352c : ca                       dex
352d : ca                       dex
352e : ca                       dex
352f : ca                       dex
3530 : ca                       dex
3531 : ca                       dex
3532 : ca                       dex
3533 : ca                       dex
3534 : ca                       dex             ;+50
3535 : ca                       dex
3536 : ca                       dex
3537 : ca                       dex
3538 : ca                       dex
3539 : ca                       dex
353a : ca                       dex
353b : ca                       dex
353c : ca                       dex
353d : ca                       dex
353e : ca                       dex             ;+60
353f : ca                       dex
3540 : ca                       dex
3541 : ca                       dex
3542 : ca                       dex
3543 : ca                       dex
3544 : ca                       dex
3545 : ca                       dex
3546 : ca                       dex
3547 : ca                       dex
3548 : ca                       dex             ;+70
3549 : ca                       dex
354a : ca                       dex
354b : ca                       dex
354c : ca                       dex
354d : ca                       dex
354e : ca                       dex
354f : ca                       dex
3550 : ca                       dex
3551 : ca                       dex
3552 : ca                       dex             ;+80
3553 : ca                       dex
3554 : ca                       dex
3555 : ca                       dex
3556 : ca                       dex
3557 : ca                       dex
3558 : ca                       dex
3559 : ca                       dex
355a : ca                       dex
355b : ca                       dex
355c : ca                       dex             ;+90
355d : ca                       dex
355e : ca                       dex
355f : ca                       dex
3560 : ca                       dex
3561 : ca                       dex
3562 : ca                       dex
3563 : ca                       dex
3564 : ca                       dex
3565 : ca                       dex
3566 : ca                       dex             ;+100
3567 : ca                       dex
3568 : ca                       dex
3569 : ca                       dex
356a : ca                       dex
356b : ca                       dex
356c : ca                       dex
356d : ca                       dex
356e : ca                       dex
356f : ca                       dex
3570 : ca                       dex             ;+110
3571 : ca                       dex
3572 : ca                       dex
3573 : ca                       dex
3574 : ca                       dex
3575 : ca                       dex
3576 : ca                       dex
3577 : ca                       dex
3578 : ca                       dex
3579 : ca                       dex
357a : ca                       dex             ;+120
357b : ca                       dex
357c : ca                       dex
357d : ca                       dex
357e : ca                       dex
357f : ca                       dex
3580 : ca                       dex
3581 : ea                       nop             ;offset landing zone - forward branch too far
3582 : ea                       nop
3583 : ea                       nop
3584 : ea                       nop
3585 : ea                       nop
3586 : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
3588 : 20df73          >        jsr report_error
                        
358b : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
358c : ea                       nop
358d : ea                       nop
358e : ea                       nop
358f : ea                       nop
3590 :                  range_ok
3590 : ea                       nop
3591 : ea                       nop
3592 : ea                       nop
3593 : ea                       nop
3594 : ea                       nop
3595 : c000                     cpy #0
3597 : f003                     beq range_end   
3599 : 4c6134                   jmp range_loop
359c :                  range_end               ;range test successful
                            endif
                                next_test
359c : ad0032          >            lda test_case   ;previous test
359f : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
35a1 : f003            >        beq skip0010
                       >        trap            ;failed not equal (non zero)
35a3 : 20df73          >        jsr report_error
                       >
35a6 :                 >skip0010
                       >
0002 =                 >test_num = test_num + 1
35a6 : a902            >            lda #test_num   ;*** next tests' number
35a8 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
35ab : c001                     cpy #1          ;testing BNE true
35ad : d003                     bne test_bne
                                trap 
35af : 20df73          >        jsr report_error
                        
35b2 :                  test_bne
35b2 : a900                     lda #0 
35b4 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
35b6 : f003            >        beq skip0013
                       >        trap            ;failed not equal (non zero)
35b8 : 20df73          >        jsr report_error
                       >
35bb :                 >skip0013
                        
                                trap_cc
35bb : b003            >        bcs skip0015
                       >        trap            ;failed carry clear
35bd : 20df73          >        jsr report_error
                       >
35c0 :                 >skip0015
                        
                                trap_mi
35c0 : 1003            >        bpl skip0017
                       >        trap            ;failed minus (bit 7 set)
35c2 : 20df73          >        jsr report_error
                       >
35c5 :                 >skip0017
                        
35c5 : c901                     cmp #1
                                trap_eq 
35c7 : d003            >        bne skip0019
                       >        trap           ;failed equal (zero)
35c9 : 20df73          >        jsr report_error
                       >
35cc :                 >skip0019
                        
                                trap_cs
35cc : 9003            >        bcc skip0021
                       >        trap            ;failed carry set
35ce : 20df73          >        jsr report_error
                       >
35d1 :                 >skip0021
                        
                                trap_pl
35d1 : 3003            >        bmi skip0023
                       >        trap            ;failed plus (bit 7 clear)
35d3 : 20df73          >        jsr report_error
                       >
35d6 :                 >skip0023
                        
35d6 : aa                       tax 
35d7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
35d9 : f003            >        beq skip0025
                       >        trap            ;failed not equal (non zero)
35db : 20df73          >        jsr report_error
                       >
35de :                 >skip0025
                        
                                trap_cc
35de : b003            >        bcs skip0027
                       >        trap            ;failed carry clear
35e0 : 20df73          >        jsr report_error
                       >
35e3 :                 >skip0027
                        
                                trap_mi
35e3 : 1003            >        bpl skip0029
                       >        trap            ;failed minus (bit 7 set)
35e5 : 20df73          >        jsr report_error
                       >
35e8 :                 >skip0029
                        
35e8 : e001                     cpx #1
                                trap_eq 
35ea : d003            >        bne skip0031
                       >        trap           ;failed equal (zero)
35ec : 20df73          >        jsr report_error
                       >
35ef :                 >skip0031
                        
                                trap_cs
35ef : 9003            >        bcc skip0033
                       >        trap            ;failed carry set
35f1 : 20df73          >        jsr report_error
                       >
35f4 :                 >skip0033
                        
                                trap_pl
35f4 : 3003            >        bmi skip0035
                       >        trap            ;failed plus (bit 7 clear)
35f6 : 20df73          >        jsr report_error
                       >
35f9 :                 >skip0035
                        
35f9 : a8                       tay 
35fa : c000                     cpy #0          ;test compare y immediate
                                trap_ne
35fc : f003            >        beq skip0037
                       >        trap            ;failed not equal (non zero)
35fe : 20df73          >        jsr report_error
                       >
3601 :                 >skip0037
                        
                                trap_cc
3601 : b003            >        bcs skip0039
                       >        trap            ;failed carry clear
3603 : 20df73          >        jsr report_error
                       >
3606 :                 >skip0039
                        
                                trap_mi
3606 : 1003            >        bpl skip0041
                       >        trap            ;failed minus (bit 7 set)
3608 : 20df73          >        jsr report_error
                       >
360b :                 >skip0041
                        
360b : c001                     cpy #1
                                trap_eq 
360d : d003            >        bne skip0043
                       >        trap           ;failed equal (zero)
360f : 20df73          >        jsr report_error
                       >
3612 :                 >skip0043
                        
                                trap_cs
3612 : 9003            >        bcc skip0045
                       >        trap            ;failed carry set
3614 : 20df73          >        jsr report_error
                       >
3617 :                 >skip0045
                        
                                trap_pl
3617 : 3003            >        bmi skip0047
                       >        trap            ;failed plus (bit 7 clear)
3619 : 20df73          >        jsr report_error
                       >
361c :                 >skip0047
                        
                                next_test
361c : ad0032          >            lda test_case   ;previous test
361f : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3621 : f003            >        beq skip0050
                       >        trap            ;failed not equal (non zero)
3623 : 20df73          >        jsr report_error
                       >
3626 :                 >skip0050
                       >
0003 =                 >test_num = test_num + 1
3626 : a903            >            lda #test_num   ;*** next tests' number
3628 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
362b : a2ff                     ldx #$ff        ;initialize stack
362d : 9a                       txs
362e : a955                     lda #$55
3630 : 48                       pha
3631 : a9aa                     lda #$aa
3633 : 48                       pha
3634 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
3637 : f003            >        beq skip0052
                       >        trap            ;failed not equal (non zero)
3639 : 20df73          >        jsr report_error
                       >
363c :                 >skip0052
                        
363c : ba                       tsx
363d : 8a                       txa             ;overwrite accu
363e : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
3640 : f003            >        beq skip0054
                       >        trap            ;failed not equal (non zero)
3642 : 20df73          >        jsr report_error
                       >
3645 :                 >skip0054
                        
3645 : 68                       pla
3646 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
3648 : f003            >        beq skip0056
                       >        trap            ;failed not equal (non zero)
364a : 20df73          >        jsr report_error
                       >
364d :                 >skip0056
                        
364d : 68                       pla
364e : c955                     cmp #$55
                                trap_ne
3650 : f003            >        beq skip0058
                       >        trap            ;failed not equal (non zero)
3652 : 20df73          >        jsr report_error
                       >
3655 :                 >skip0058
                        
3655 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
3658 : f003            >        beq skip0060
                       >        trap            ;failed not equal (non zero)
365a : 20df73          >        jsr report_error
                       >
365d :                 >skip0060
                        
365d : ba                       tsx
365e : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
3660 : f003            >        beq skip0062
                       >        trap            ;failed not equal (non zero)
3662 : 20df73          >        jsr report_error
                       >
3665 :                 >skip0062
                        
                                next_test
3665 : ad0032          >            lda test_case   ;previous test
3668 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
366a : f003            >        beq skip0065
                       >        trap            ;failed not equal (non zero)
366c : 20df73          >        jsr report_error
                       >
366f :                 >skip0065
                       >
0004 =                 >test_num = test_num + 1
366f : a904            >            lda #test_num   ;*** next tests' number
3671 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
3674 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
3676 : 48              >            pha         ;use stack to load status
3677 : 28              >            plp
                        
3678 : 101a                     bpl nbr1        ;branches should not be taken
367a : 501b                     bvc nbr2
367c : 901c                     bcc nbr3
367e : d01d                     bne nbr4
3680 : 3003                     bmi br1         ;branches should be taken
                                trap 
3682 : 20df73          >        jsr report_error
                        
3685 : 7003             br1     bvs br2
                                trap 
3687 : 20df73          >        jsr report_error
                        
368a : b003             br2     bcs br3
                                trap 
368c : 20df73          >        jsr report_error
                        
368f : f00f             br3     beq br4
                                trap 
3691 : 20df73          >        jsr report_error
                        
3694 :                  nbr1
                                trap            ;previous bpl taken 
3694 : 20df73          >        jsr report_error
                        
3697 :                  nbr2
                                trap            ;previous bvc taken
3697 : 20df73          >        jsr report_error
                        
369a :                  nbr3
                                trap            ;previous bcc taken
369a : 20df73          >        jsr report_error
                        
369d :                  nbr4
                                trap            ;previous bne taken
369d : 20df73          >        jsr report_error
                        
36a0 : 08               br4     php
36a1 : ba                       tsx
36a2 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
36a4 : f003            >        beq skip0077
                       >        trap            ;failed not equal (non zero)
36a6 : 20df73          >        jsr report_error
                       >
36a9 :                 >skip0077
                        
36a9 : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
36aa : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
36ac : f003            >        beq skip0080
                       >        trap            ;failed not equal (non zero)
36ae : 20df73          >        jsr report_error
                       >
36b1 :                 >skip0080
                        
36b1 : ba                       tsx
36b2 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
36b4 : f003            >        beq skip0082
                       >        trap            ;failed not equal (non zero)
36b6 : 20df73          >        jsr report_error
                       >
36b9 :                 >skip0082
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
36b9 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
36bb : 48              >            pha         ;use stack to load status
36bc : 28              >            plp
                        
36bd : 301a                     bmi nbr11       ;branches should not be taken
36bf : 701b                     bvs nbr12
36c1 : b01c                     bcs nbr13
36c3 : f01d                     beq nbr14
36c5 : 1003                     bpl br11        ;branches should be taken
                                trap 
36c7 : 20df73          >        jsr report_error
                        
36ca : 5003             br11    bvc br12
                                trap 
36cc : 20df73          >        jsr report_error
                        
36cf : 9003             br12    bcc br13
                                trap 
36d1 : 20df73          >        jsr report_error
                        
36d4 : d00f             br13    bne br14
                                trap 
36d6 : 20df73          >        jsr report_error
                        
36d9 :                  nbr11
                                trap            ;previous bmi taken 
36d9 : 20df73          >        jsr report_error
                        
36dc :                  nbr12
                                trap            ;previous bvs taken 
36dc : 20df73          >        jsr report_error
                        
36df :                  nbr13
                                trap            ;previous bcs taken 
36df : 20df73          >        jsr report_error
                        
36e2 :                  nbr14
                                trap            ;previous beq taken 
36e2 : 20df73          >        jsr report_error
                        
36e5 : 08               br14    php
36e6 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
36e7 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
36e9 : f003            >        beq skip0095
                       >        trap            ;failed not equal (non zero)
36eb : 20df73          >        jsr report_error
                       >
36ee :                 >skip0095
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
36ee : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
36f0 : 48              >            pha         ;use stack to load status
36f1 : 28              >            plp
                        
36f2 : d002                     bne brzs1
36f4 : f003                     beq brzs2
36f6 :                  brzs1
                                trap            ;branch zero/non zero
36f6 : 20df73          >        jsr report_error
                        
36f9 : b002             brzs2   bcs brzs3
36fb : 9003                     bcc brzs4
36fd :                  brzs3
                                trap            ;branch carry/no carry
36fd : 20df73          >        jsr report_error
                        
3700 : 3002             brzs4   bmi brzs5
3702 : 1003                     bpl brzs6
3704 :                  brzs5
                                trap            ;branch minus/plus
3704 : 20df73          >        jsr report_error
                        
3707 : 7002             brzs6   bvs brzs7
3709 : 5003                     bvc brzs8
370b :                  brzs7
                                trap            ;branch overflow/no overflow
370b : 20df73          >        jsr report_error
                        
370e :                  brzs8
                                set_stat carry
                       >            load_flag carry
370e : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
3710 : 48              >            pha         ;use stack to load status
3711 : 28              >            plp
                        
3712 : f002                     beq brcs1
3714 : d003                     bne brcs2
3716 :                  brcs1
                                trap            ;branch zero/non zero
3716 : 20df73          >        jsr report_error
                        
3719 : 9002             brcs2   bcc brcs3
371b : b003                     bcs brcs4
371d :                  brcs3
                                trap            ;branch carry/no carry
371d : 20df73          >        jsr report_error
                        
3720 : 3002             brcs4   bmi brcs5
3722 : 1003                     bpl brcs6
3724 :                  brcs5
                                trap            ;branch minus/plus
3724 : 20df73          >        jsr report_error
                        
3727 : 7002             brcs6   bvs brcs7
3729 : 5003                     bvc brcs8
372b :                  brcs7
                                trap            ;branch overflow/no overflow
372b : 20df73          >        jsr report_error
                        
                        
372e :                  brcs8
                                set_stat minus
                       >            load_flag minus
372e : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
3730 : 48              >            pha         ;use stack to load status
3731 : 28              >            plp
                        
3732 : f002                     beq brmi1
3734 : d003                     bne brmi2
3736 :                  brmi1
                                trap            ;branch zero/non zero
3736 : 20df73          >        jsr report_error
                        
3739 : b002             brmi2   bcs brmi3
373b : 9003                     bcc brmi4
373d :                  brmi3
                                trap            ;branch carry/no carry
373d : 20df73          >        jsr report_error
                        
3740 : 1002             brmi4   bpl brmi5
3742 : 3003                     bmi brmi6
3744 :                  brmi5
                                trap            ;branch minus/plus
3744 : 20df73          >        jsr report_error
                        
3747 : 7002             brmi6   bvs brmi7
3749 : 5003                     bvc brmi8
374b :                  brmi7
                                trap            ;branch overflow/no overflow
374b : 20df73          >        jsr report_error
                        
374e :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
374e : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
3750 : 48              >            pha         ;use stack to load status
3751 : 28              >            plp
                        
3752 : f002                     beq brvs1
3754 : d003                     bne brvs2
3756 :                  brvs1
                                trap            ;branch zero/non zero
3756 : 20df73          >        jsr report_error
                        
3759 : b002             brvs2   bcs brvs3
375b : 9003                     bcc brvs4
375d :                  brvs3
                                trap            ;branch carry/no carry
375d : 20df73          >        jsr report_error
                        
3760 : 3002             brvs4   bmi brvs5
3762 : 1003                     bpl brvs6
3764 :                  brvs5
                                trap            ;branch minus/plus
3764 : 20df73          >        jsr report_error
                        
3767 : 5002             brvs6   bvc brvs7
3769 : 7003                     bvs brvs8
376b :                  brvs7
                                trap            ;branch overflow/no overflow
376b : 20df73          >        jsr report_error
                        
376e :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
376e : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
3770 : 48              >            pha         ;use stack to load status
3771 : 28              >            plp
                        
3772 : f002                     beq brzc1
3774 : d003                     bne brzc2
3776 :                  brzc1
                                trap            ;branch zero/non zero
3776 : 20df73          >        jsr report_error
                        
3779 : 9002             brzc2   bcc brzc3
377b : b003                     bcs brzc4
377d :                  brzc3
                                trap            ;branch carry/no carry
377d : 20df73          >        jsr report_error
                        
3780 : 1002             brzc4   bpl brzc5
3782 : 3003                     bmi brzc6
3784 :                  brzc5
                                trap            ;branch minus/plus
3784 : 20df73          >        jsr report_error
                        
3787 : 5002             brzc6   bvc brzc7
3789 : 7003                     bvs brzc8
378b :                  brzc7
                                trap            ;branch overflow/no overflow
378b : 20df73          >        jsr report_error
                        
378e :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
378e : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
3790 : 48              >            pha         ;use stack to load status
3791 : 28              >            plp
                        
3792 : d002                     bne brcc1
3794 : f003                     beq brcc2
3796 :                  brcc1
                                trap            ;branch zero/non zero
3796 : 20df73          >        jsr report_error
                        
3799 : b002             brcc2   bcs brcc3
379b : 9003                     bcc brcc4
379d :                  brcc3
                                trap            ;branch carry/no carry
379d : 20df73          >        jsr report_error
                        
37a0 : 1002             brcc4   bpl brcc5
37a2 : 3003                     bmi brcc6
37a4 :                  brcc5
                                trap            ;branch minus/plus
37a4 : 20df73          >        jsr report_error
                        
37a7 : 5002             brcc6   bvc brcc7
37a9 : 7003                     bvs brcc8
37ab :                  brcc7
                                trap            ;branch overflow/no overflow
37ab : 20df73          >        jsr report_error
                        
37ae :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
37ae : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
37b0 : 48              >            pha         ;use stack to load status
37b1 : 28              >            plp
                        
37b2 : d002                     bne brpl1
37b4 : f003                     beq brpl2
37b6 :                  brpl1
                                trap            ;branch zero/non zero
37b6 : 20df73          >        jsr report_error
                        
37b9 : 9002             brpl2   bcc brpl3
37bb : b003                     bcs brpl4
37bd :                  brpl3
                                trap            ;branch carry/no carry
37bd : 20df73          >        jsr report_error
                        
37c0 : 3002             brpl4   bmi brpl5
37c2 : 1003                     bpl brpl6
37c4 :                  brpl5
                                trap            ;branch minus/plus
37c4 : 20df73          >        jsr report_error
                        
37c7 : 5002             brpl6   bvc brpl7
37c9 : 7003                     bvs brpl8
37cb :                  brpl7
                                trap            ;branch overflow/no overflow
37cb : 20df73          >        jsr report_error
                        
37ce :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
37ce : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
37d0 : 48              >            pha         ;use stack to load status
37d1 : 28              >            plp
                        
37d2 : d002                     bne brvc1
37d4 : f003                     beq brvc2
37d6 :                  brvc1
                                trap            ;branch zero/non zero
37d6 : 20df73          >        jsr report_error
                        
37d9 : 9002             brvc2   bcc brvc3
37db : b003                     bcs brvc4
37dd :                  brvc3
                                trap            ;branch carry/no carry
37dd : 20df73          >        jsr report_error
                        
37e0 : 1002             brvc4   bpl brvc5
37e2 : 3003                     bmi brvc6
37e4 :                  brvc5
                                trap            ;branch minus/plus
37e4 : 20df73          >        jsr report_error
                        
37e7 : 7002             brvc6   bvs brvc7
37e9 : 5003                     bvc brvc8
37eb :                  brvc7
                                trap            ;branch overflow/no overflow
37eb : 20df73          >        jsr report_error
                        
37ee :                  brvc8
                                next_test
37ee : ad0032          >            lda test_case   ;previous test
37f1 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
37f3 : f003            >        beq skip0146
                       >        trap            ;failed not equal (non zero)
37f5 : 20df73          >        jsr report_error
                       >
37f8 :                 >skip0146
                       >
0005 =                 >test_num = test_num + 1
37f8 : a905            >            lda #test_num   ;*** next tests' number
37fa : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
37fd : a255                     ldx #$55        ;x & y protected
37ff : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
3801 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
3803 : 48              >            pha         ;use stack to load status
3804 : a901            >            lda #1     ;precharge accu
3806 : 28              >            plp
                        
3807 : 48                       pha
                                tst_a 1,$ff
3808 : 08              >            php         ;save flags
3809 : c901            >            cmp #1     ;test result
                       >            trap_ne
380b : f003            >        beq skip0151
                       >        trap            ;failed not equal (non zero)
380d : 20df73          >        jsr report_error
                       >
3810 :                 >skip0151
                       >
3810 : 68              >            pla         ;load status
3811 : 48              >            pha
                       >            cmp_flag $ff
3812 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3814 : f003            >        beq skip0154
                       >        trap            ;failed not equal (non zero)
3816 : 20df73          >        jsr report_error
                       >
3819 :                 >skip0154
                       >
3819 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
381a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
381c : 48              >            pha         ;use stack to load status
381d : a900            >            lda #0     ;precharge accu
381f : 28              >            plp
                        
3820 : 48                       pha
                                tst_a 0,0
3821 : 08              >            php         ;save flags
3822 : c900            >            cmp #0     ;test result
                       >            trap_ne
3824 : f003            >        beq skip0159
                       >        trap            ;failed not equal (non zero)
3826 : 20df73          >        jsr report_error
                       >
3829 :                 >skip0159
                       >
3829 : 68              >            pla         ;load status
382a : 48              >            pha
                       >            cmp_flag 0
382b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
382d : f003            >        beq skip0162
                       >        trap            ;failed not equal (non zero)
382f : 20df73          >        jsr report_error
                       >
3832 :                 >skip0162
                       >
3832 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
3833 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3835 : 48              >            pha         ;use stack to load status
3836 : a9ff            >            lda #$ff     ;precharge accu
3838 : 28              >            plp
                        
3839 : 48                       pha
                                tst_a $ff,$ff
383a : 08              >            php         ;save flags
383b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
383d : f003            >        beq skip0167
                       >        trap            ;failed not equal (non zero)
383f : 20df73          >        jsr report_error
                       >
3842 :                 >skip0167
                       >
3842 : 68              >            pla         ;load status
3843 : 48              >            pha
                       >            cmp_flag $ff
3844 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3846 : f003            >        beq skip0170
                       >        trap            ;failed not equal (non zero)
3848 : 20df73          >        jsr report_error
                       >
384b :                 >skip0170
                       >
384b : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
384c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
384e : 48              >            pha         ;use stack to load status
384f : a901            >            lda #1     ;precharge accu
3851 : 28              >            plp
                        
3852 : 48                       pha
                                tst_a 1,0
3853 : 08              >            php         ;save flags
3854 : c901            >            cmp #1     ;test result
                       >            trap_ne
3856 : f003            >        beq skip0175
                       >        trap            ;failed not equal (non zero)
3858 : 20df73          >        jsr report_error
                       >
385b :                 >skip0175
                       >
385b : 68              >            pla         ;load status
385c : 48              >            pha
                       >            cmp_flag 0
385d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
385f : f003            >        beq skip0178
                       >        trap            ;failed not equal (non zero)
3861 : 20df73          >        jsr report_error
                       >
3864 :                 >skip0178
                       >
3864 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
3865 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3867 : 48              >            pha         ;use stack to load status
3868 : a900            >            lda #0     ;precharge accu
386a : 28              >            plp
                        
386b : 48                       pha
                                tst_a 0,$ff
386c : 08              >            php         ;save flags
386d : c900            >            cmp #0     ;test result
                       >            trap_ne
386f : f003            >        beq skip0183
                       >        trap            ;failed not equal (non zero)
3871 : 20df73          >        jsr report_error
                       >
3874 :                 >skip0183
                       >
3874 : 68              >            pla         ;load status
3875 : 48              >            pha
                       >            cmp_flag $ff
3876 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3878 : f003            >        beq skip0186
                       >        trap            ;failed not equal (non zero)
387a : 20df73          >        jsr report_error
                       >
387d :                 >skip0186
                       >
387d : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
387e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3880 : 48              >            pha         ;use stack to load status
3881 : a9ff            >            lda #$ff     ;precharge accu
3883 : 28              >            plp
                        
3884 : 48                       pha
                                tst_a $ff,0
3885 : 08              >            php         ;save flags
3886 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3888 : f003            >        beq skip0191
                       >        trap            ;failed not equal (non zero)
388a : 20df73          >        jsr report_error
                       >
388d :                 >skip0191
                       >
388d : 68              >            pla         ;load status
388e : 48              >            pha
                       >            cmp_flag 0
388f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3891 : f003            >        beq skip0194
                       >        trap            ;failed not equal (non zero)
3893 : 20df73          >        jsr report_error
                       >
3896 :                 >skip0194
                       >
3896 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
3897 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
3899 : 48              >            pha         ;use stack to load status
389a : a900            >            lda #0     ;precharge accu
389c : 28              >            plp
                        
389d : 68                       pla
                                tst_a $ff,$ff-zero
389e : 08              >            php         ;save flags
389f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
38a1 : f003            >        beq skip0199
                       >        trap            ;failed not equal (non zero)
38a3 : 20df73          >        jsr report_error
                       >
38a6 :                 >skip0199
                       >
38a6 : 68              >            pla         ;load status
38a7 : 48              >            pha
                       >            cmp_flag $ff-zero
38a8 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
38aa : f003            >        beq skip0202
                       >        trap            ;failed not equal (non zero)
38ac : 20df73          >        jsr report_error
                       >
38af :                 >skip0202
                       >
38af : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
38b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38b2 : 48              >            pha         ;use stack to load status
38b3 : a9ff            >            lda #$ff     ;precharge accu
38b5 : 28              >            plp
                        
38b6 : 68                       pla
                                tst_a 0,zero
38b7 : 08              >            php         ;save flags
38b8 : c900            >            cmp #0     ;test result
                       >            trap_ne
38ba : f003            >        beq skip0207
                       >        trap            ;failed not equal (non zero)
38bc : 20df73          >        jsr report_error
                       >
38bf :                 >skip0207
                       >
38bf : 68              >            pla         ;load status
38c0 : 48              >            pha
                       >            cmp_flag zero
38c1 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
38c3 : f003            >        beq skip0210
                       >        trap            ;failed not equal (non zero)
38c5 : 20df73          >        jsr report_error
                       >
38c8 :                 >skip0210
                       >
38c8 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
38c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38cb : 48              >            pha         ;use stack to load status
38cc : a9fe            >            lda #$fe     ;precharge accu
38ce : 28              >            plp
                        
38cf : 68                       pla
                                tst_a 1,$ff-zero-minus
38d0 : 08              >            php         ;save flags
38d1 : c901            >            cmp #1     ;test result
                       >            trap_ne
38d3 : f003            >        beq skip0215
                       >        trap            ;failed not equal (non zero)
38d5 : 20df73          >        jsr report_error
                       >
38d8 :                 >skip0215
                       >
38d8 : 68              >            pla         ;load status
38d9 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
38da : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
38dc : f003            >        beq skip0218
                       >        trap            ;failed not equal (non zero)
38de : 20df73          >        jsr report_error
                       >
38e1 :                 >skip0218
                       >
38e1 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
38e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38e4 : 48              >            pha         ;use stack to load status
38e5 : a900            >            lda #0     ;precharge accu
38e7 : 28              >            plp
                        
38e8 : 68                       pla
                                tst_a $ff,minus
38e9 : 08              >            php         ;save flags
38ea : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
38ec : f003            >        beq skip0223
                       >        trap            ;failed not equal (non zero)
38ee : 20df73          >        jsr report_error
                       >
38f1 :                 >skip0223
                       >
38f1 : 68              >            pla         ;load status
38f2 : 48              >            pha
                       >            cmp_flag minus
38f3 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
38f5 : f003            >        beq skip0226
                       >        trap            ;failed not equal (non zero)
38f7 : 20df73          >        jsr report_error
                       >
38fa :                 >skip0226
                       >
38fa : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
38fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38fd : 48              >            pha         ;use stack to load status
38fe : a9ff            >            lda #$ff     ;precharge accu
3900 : 28              >            plp
                        
3901 : 68                       pla
                                tst_a 0,$ff-minus
3902 : 08              >            php         ;save flags
3903 : c900            >            cmp #0     ;test result
                       >            trap_ne
3905 : f003            >        beq skip0231
                       >        trap            ;failed not equal (non zero)
3907 : 20df73          >        jsr report_error
                       >
390a :                 >skip0231
                       >
390a : 68              >            pla         ;load status
390b : 48              >            pha
                       >            cmp_flag $ff-minus
390c : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
390e : f003            >        beq skip0234
                       >        trap            ;failed not equal (non zero)
3910 : 20df73          >        jsr report_error
                       >
3913 :                 >skip0234
                       >
3913 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
3914 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3916 : 48              >            pha         ;use stack to load status
3917 : a9fe            >            lda #$fe     ;precharge accu
3919 : 28              >            plp
                        
391a : 68                       pla
                                tst_a 1,0
391b : 08              >            php         ;save flags
391c : c901            >            cmp #1     ;test result
                       >            trap_ne
391e : f003            >        beq skip0239
                       >        trap            ;failed not equal (non zero)
3920 : 20df73          >        jsr report_error
                       >
3923 :                 >skip0239
                       >
3923 : 68              >            pla         ;load status
3924 : 48              >            pha
                       >            cmp_flag 0
3925 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3927 : f003            >        beq skip0242
                       >        trap            ;failed not equal (non zero)
3929 : 20df73          >        jsr report_error
                       >
392c :                 >skip0242
                       >
392c : 28              >            plp         ;restore status
                        
392d : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
392f : f003            >        beq skip0244
                       >        trap            ;failed not equal (non zero)
3931 : 20df73          >        jsr report_error
                       >
3934 :                 >skip0244
                        
3934 : c0aa                     cpy #$aa
                                trap_ne
3936 : f003            >        beq skip0246
                       >        trap            ;failed not equal (non zero)
3938 : 20df73          >        jsr report_error
                       >
393b :                 >skip0246
                        
                                next_test
393b : ad0032          >            lda test_case   ;previous test
393e : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3940 : f003            >        beq skip0249
                       >        trap            ;failed not equal (non zero)
3942 : 20df73          >        jsr report_error
                       >
3945 :                 >skip0249
                       >
0006 =                 >test_num = test_num + 1
3945 : a906            >            lda #test_num   ;*** next tests' number
3947 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
394a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
394c : 48              >            pha         ;use stack to load status
394d : a93c            >            lda #$3c     ;precharge accu
394f : 28              >            plp
                        
3950 : 49c3                     eor #$c3
                                tst_a $ff,fn
3952 : 08              >            php         ;save flags
3953 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3955 : f003            >        beq skip0254
                       >        trap            ;failed not equal (non zero)
3957 : 20df73          >        jsr report_error
                       >
395a :                 >skip0254
                       >
395a : 68              >            pla         ;load status
395b : 48              >            pha
                       >            cmp_flag fn
395c : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
395e : f003            >        beq skip0257
                       >        trap            ;failed not equal (non zero)
3960 : 20df73          >        jsr report_error
                       >
3963 :                 >skip0257
                       >
3963 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
3964 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3966 : 48              >            pha         ;use stack to load status
3967 : a9c3            >            lda #$c3     ;precharge accu
3969 : 28              >            plp
                        
396a : 49c3                     eor #$c3
                                tst_a 0,fz
396c : 08              >            php         ;save flags
396d : c900            >            cmp #0     ;test result
                       >            trap_ne
396f : f003            >        beq skip0262
                       >        trap            ;failed not equal (non zero)
3971 : 20df73          >        jsr report_error
                       >
3974 :                 >skip0262
                       >
3974 : 68              >            pla         ;load status
3975 : 48              >            pha
                       >            cmp_flag fz
3976 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3978 : f003            >        beq skip0265
                       >        trap            ;failed not equal (non zero)
397a : 20df73          >        jsr report_error
                       >
397d :                 >skip0265
                       >
397d : 28              >            plp         ;restore status
                        
                                next_test
397e : ad0032          >            lda test_case   ;previous test
3981 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3983 : f003            >        beq skip0268
                       >        trap            ;failed not equal (non zero)
3985 : 20df73          >        jsr report_error
                       >
3988 :                 >skip0268
                       >
0007 =                 >test_num = test_num + 1
3988 : a907            >            lda #test_num   ;*** next tests' number
398a : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
398d : a224                     ldx #$24
398f : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
3991 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3993 : 48              >            pha         ;use stack to load status
3994 : a918            >            lda #$18     ;precharge accu
3996 : 28              >            plp
                        
3997 : ea                       nop
                                tst_a $18,0
3998 : 08              >            php         ;save flags
3999 : c918            >            cmp #$18     ;test result
                       >            trap_ne
399b : f003            >        beq skip0273
                       >        trap            ;failed not equal (non zero)
399d : 20df73          >        jsr report_error
                       >
39a0 :                 >skip0273
                       >
39a0 : 68              >            pla         ;load status
39a1 : 48              >            pha
                       >            cmp_flag 0
39a2 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
39a4 : f003            >        beq skip0276
                       >        trap            ;failed not equal (non zero)
39a6 : 20df73          >        jsr report_error
                       >
39a9 :                 >skip0276
                       >
39a9 : 28              >            plp         ;restore status
                        
39aa : e024                     cpx #$24
                                trap_ne
39ac : f003            >        beq skip0278
                       >        trap            ;failed not equal (non zero)
39ae : 20df73          >        jsr report_error
                       >
39b1 :                 >skip0278
                        
39b1 : c042                     cpy #$42
                                trap_ne
39b3 : f003            >        beq skip0280
                       >        trap            ;failed not equal (non zero)
39b5 : 20df73          >        jsr report_error
                       >
39b8 :                 >skip0280
                        
39b8 : a2db                     ldx #$db
39ba : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
39bc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39be : 48              >            pha         ;use stack to load status
39bf : a9e7            >            lda #$e7     ;precharge accu
39c1 : 28              >            plp
                        
39c2 : ea                       nop
                                tst_a $e7,$ff
39c3 : 08              >            php         ;save flags
39c4 : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
39c6 : f003            >        beq skip0285
                       >        trap            ;failed not equal (non zero)
39c8 : 20df73          >        jsr report_error
                       >
39cb :                 >skip0285
                       >
39cb : 68              >            pla         ;load status
39cc : 48              >            pha
                       >            cmp_flag $ff
39cd : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
39cf : f003            >        beq skip0288
                       >        trap            ;failed not equal (non zero)
39d1 : 20df73          >        jsr report_error
                       >
39d4 :                 >skip0288
                       >
39d4 : 28              >            plp         ;restore status
                        
39d5 : e0db                     cpx #$db
                                trap_ne
39d7 : f003            >        beq skip0290
                       >        trap            ;failed not equal (non zero)
39d9 : 20df73          >        jsr report_error
                       >
39dc :                 >skip0290
                        
39dc : c0bd                     cpy #$bd
                                trap_ne
39de : f003            >        beq skip0292
                       >        trap            ;failed not equal (non zero)
39e0 : 20df73          >        jsr report_error
                       >
39e3 :                 >skip0292
                        
                                next_test
39e3 : ad0032          >            lda test_case   ;previous test
39e6 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
39e8 : f003            >        beq skip0295
                       >        trap            ;failed not equal (non zero)
39ea : 20df73          >        jsr report_error
                       >
39ed :                 >skip0295
                       >
0008 =                 >test_num = test_num + 1
39ed : a908            >            lda #test_num   ;*** next tests' number
39ef : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
39f2 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
39f4 : 48              >            pha         ;use stack to load status
39f5 : 28              >            plp
                        
39f6 : a946                     lda #'F'
39f8 : a241                     ldx #'A'
39fa : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
39fc : 4c7772                   jmp test_far
39ff : ea                       nop
3a00 : ea                       nop
                                trap_ne         ;runover protection
3a01 : f003            >        beq skip0299
                       >        trap            ;failed not equal (non zero)
3a03 : 20df73          >        jsr report_error
                       >
3a06 :                 >skip0299
                        
3a06 : e8                       inx
3a07 : e8                       inx
3a08 :                  far_ret 
                                trap_eq         ;returned flags OK?
3a08 : d003            >        bne skip0301
                       >        trap           ;failed equal (zero)
3a0a : 20df73          >        jsr report_error
                       >
3a0d :                 >skip0301
                        
                                trap_pl
3a0d : 3003            >        bmi skip0303
                       >        trap            ;failed plus (bit 7 clear)
3a0f : 20df73          >        jsr report_error
                       >
3a12 :                 >skip0303
                        
                                trap_cc
3a12 : b003            >        bcs skip0305
                       >        trap            ;failed carry clear
3a14 : 20df73          >        jsr report_error
                       >
3a17 :                 >skip0305
                        
                                trap_vc
3a17 : 7003            >        bvs skip0307
                       >        trap            ;failed overflow clear
3a19 : 20df73          >        jsr report_error
                       >
3a1c :                 >skip0307
                        
3a1c : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
3a1e : f003            >        beq skip0309
                       >        trap            ;failed not equal (non zero)
3a20 : 20df73          >        jsr report_error
                       >
3a23 :                 >skip0309
                        
3a23 : e042                     cpx #('A'+1)
                                trap_ne
3a25 : f003            >        beq skip0311
                       >        trap            ;failed not equal (non zero)
3a27 : 20df73          >        jsr report_error
                       >
3a2a :                 >skip0311
                        
3a2a : c04f                     cpy #('R'-3)
                                trap_ne
3a2c : f003            >        beq skip0313
                       >        trap            ;failed not equal (non zero)
3a2e : 20df73          >        jsr report_error
                       >
3a31 :                 >skip0313
                        
3a31 : ca                       dex
3a32 : c8                       iny
3a33 : c8                       iny
3a34 : c8                       iny
3a35 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
3a37 : 4c433a                   jmp test_near
3a3a : ea                       nop
3a3b : ea                       nop
                                trap_ne         ;runover protection
3a3c : f003            >        beq skip0315
                       >        trap            ;failed not equal (non zero)
3a3e : 20df73          >        jsr report_error
                       >
3a41 :                 >skip0315
                        
3a41 : e8                       inx
3a42 : e8                       inx
3a43 :                  test_near
                                trap_eq         ;passed flags OK?
3a43 : d003            >        bne skip0317
                       >        trap           ;failed equal (zero)
3a45 : 20df73          >        jsr report_error
                       >
3a48 :                 >skip0317
                        
                                trap_mi
3a48 : 1003            >        bpl skip0319
                       >        trap            ;failed minus (bit 7 set)
3a4a : 20df73          >        jsr report_error
                       >
3a4d :                 >skip0319
                        
                                trap_cc
3a4d : b003            >        bcs skip0321
                       >        trap            ;failed carry clear
3a4f : 20df73          >        jsr report_error
                       >
3a52 :                 >skip0321
                        
                                trap_vc
3a52 : 7003            >        bvs skip0323
                       >        trap            ;failed overflow clear
3a54 : 20df73          >        jsr report_error
                       >
3a57 :                 >skip0323
                        
3a57 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
3a59 : f003            >        beq skip0325
                       >        trap            ;failed not equal (non zero)
3a5b : 20df73          >        jsr report_error
                       >
3a5e :                 >skip0325
                        
3a5e : e041                     cpx #'A'
                                trap_ne
3a60 : f003            >        beq skip0327
                       >        trap            ;failed not equal (non zero)
3a62 : 20df73          >        jsr report_error
                       >
3a65 :                 >skip0327
                        
3a65 : c052                     cpy #'R'
                                trap_ne
3a67 : f003            >        beq skip0329
                       >        trap            ;failed not equal (non zero)
3a69 : 20df73          >        jsr report_error
                       >
3a6c :                 >skip0329
                        
                                next_test
3a6c : ad0032          >            lda test_case   ;previous test
3a6f : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3a71 : f003            >        beq skip0332
                       >        trap            ;failed not equal (non zero)
3a73 : 20df73          >        jsr report_error
                       >
3a76 :                 >skip0332
                       >
0009 =                 >test_num = test_num + 1
3a76 : a909            >            lda #test_num   ;*** next tests' number
3a78 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
3a7b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a7d : 48              >            pha         ;use stack to load status
3a7e : 28              >            plp
                        
3a7f : a949                     lda #'I'
3a81 : a24e                     ldx #'N'
3a83 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
3a85 : 6cbe72                   jmp (ptr_tst_ind)
3a88 : ea                       nop
                                trap_ne         ;runover protection
3a89 : f003            >        beq skip0336
                       >        trap            ;failed not equal (non zero)
3a8b : 20df73          >        jsr report_error
                       >
3a8e :                 >skip0336
                        
3a8e : 88                       dey
3a8f : 88                       dey
3a90 :                  ind_ret 
3a90 : 08                       php             ;either SP or Y count will fail, if we do not hit
3a91 : 88                       dey
3a92 : 88                       dey
3a93 : 88                       dey
3a94 : 28                       plp
                                trap_eq         ;returned flags OK?
3a95 : d003            >        bne skip0338
                       >        trap           ;failed equal (zero)
3a97 : 20df73          >        jsr report_error
                       >
3a9a :                 >skip0338
                        
                                trap_pl
3a9a : 3003            >        bmi skip0340
                       >        trap            ;failed plus (bit 7 clear)
3a9c : 20df73          >        jsr report_error
                       >
3a9f :                 >skip0340
                        
                                trap_cc
3a9f : b003            >        bcs skip0342
                       >        trap            ;failed carry clear
3aa1 : 20df73          >        jsr report_error
                       >
3aa4 :                 >skip0342
                        
                                trap_vc
3aa4 : 7003            >        bvs skip0344
                       >        trap            ;failed overflow clear
3aa6 : 20df73          >        jsr report_error
                       >
3aa9 :                 >skip0344
                        
3aa9 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
3aab : f003            >        beq skip0346
                       >        trap            ;failed not equal (non zero)
3aad : 20df73          >        jsr report_error
                       >
3ab0 :                 >skip0346
                        
3ab0 : e04f                     cpx #('N'+1)
                                trap_ne
3ab2 : f003            >        beq skip0348
                       >        trap            ;failed not equal (non zero)
3ab4 : 20df73          >        jsr report_error
                       >
3ab7 :                 >skip0348
                        
3ab7 : c03e                     cpy #('D'-6)
                                trap_ne
3ab9 : f003            >        beq skip0350
                       >        trap            ;failed not equal (non zero)
3abb : 20df73          >        jsr report_error
                       >
3abe :                 >skip0350
                        
3abe : ba                       tsx             ;SP check
3abf : e0ff                     cpx #$ff
                                trap_ne
3ac1 : f003            >        beq skip0352
                       >        trap            ;failed not equal (non zero)
3ac3 : 20df73          >        jsr report_error
                       >
3ac6 :                 >skip0352
                        
                                next_test
3ac6 : ad0032          >            lda test_case   ;previous test
3ac9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3acb : f003            >        beq skip0355
                       >        trap            ;failed not equal (non zero)
3acd : 20df73          >        jsr report_error
                       >
3ad0 :                 >skip0355
                       >
000a =                 >test_num = test_num + 1
3ad0 : a90a            >            lda #test_num   ;*** next tests' number
3ad2 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
3ad5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ad7 : 48              >            pha         ;use stack to load status
3ad8 : 28              >            plp
                        
3ad9 : a94a                     lda #'J'
3adb : a253                     ldx #'S'
3add : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
3adf : 201273                   jsr test_jsr
3ae1 =                  jsr_ret = *-1           ;last address of jsr = return address
3ae2 : 08                       php             ;either SP or Y count will fail, if we do not hit
3ae3 : 88                       dey
3ae4 : 88                       dey
3ae5 : 88                       dey
3ae6 : 28                       plp
                                trap_eq         ;returned flags OK?
3ae7 : d003            >        bne skip0359
                       >        trap           ;failed equal (zero)
3ae9 : 20df73          >        jsr report_error
                       >
3aec :                 >skip0359
                        
                                trap_pl
3aec : 3003            >        bmi skip0361
                       >        trap            ;failed plus (bit 7 clear)
3aee : 20df73          >        jsr report_error
                       >
3af1 :                 >skip0361
                        
                                trap_cc
3af1 : b003            >        bcs skip0363
                       >        trap            ;failed carry clear
3af3 : 20df73          >        jsr report_error
                       >
3af6 :                 >skip0363
                        
                                trap_vc
3af6 : 7003            >        bvs skip0365
                       >        trap            ;failed overflow clear
3af8 : 20df73          >        jsr report_error
                       >
3afb :                 >skip0365
                        
3afb : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
3afd : f003            >        beq skip0367
                       >        trap            ;failed not equal (non zero)
3aff : 20df73          >        jsr report_error
                       >
3b02 :                 >skip0367
                        
3b02 : e054                     cpx #('S'+1)
                                trap_ne
3b04 : f003            >        beq skip0369
                       >        trap            ;failed not equal (non zero)
3b06 : 20df73          >        jsr report_error
                       >
3b09 :                 >skip0369
                        
3b09 : c04c                     cpy #('R'-6)
                                trap_ne
3b0b : f003            >        beq skip0371
                       >        trap            ;failed not equal (non zero)
3b0d : 20df73          >        jsr report_error
                       >
3b10 :                 >skip0371
                        
3b10 : ba                       tsx             ;sp?
3b11 : e0ff                     cpx #$ff
                                trap_ne
3b13 : f003            >        beq skip0373
                       >        trap            ;failed not equal (non zero)
3b15 : 20df73          >        jsr report_error
                       >
3b18 :                 >skip0373
                        
                                next_test
3b18 : ad0032          >            lda test_case   ;previous test
3b1b : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3b1d : f003            >        beq skip0376
                       >        trap            ;failed not equal (non zero)
3b1f : 20df73          >        jsr report_error
                       >
3b22 :                 >skip0376
                       >
000b =                 >test_num = test_num + 1
3b22 : a90b            >            lda #test_num   ;*** next tests' number
3b24 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                brk
                            else
3b27 : a93b                     lda #hi brk_ret ;emulated break
3b29 : 48                       pha
3b2a : a93e                     lda #lo brk_ret
3b2c : 48                       pha
3b2d : a930                     lda #fao        ;set break & unused on stack
3b2f : 48                       pha
                                set_stat intdis
                       >            load_flag intdis
3b30 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                       >
3b32 : 48              >            pha         ;use stack to load status
3b33 : 28              >            plp
                        
3b34 : a942                     lda #'B'
3b36 : a252                     ldx #'R'
3b38 : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
3b3a : 4c7573                   jmp irq_trap
                            endif
3b3d : 88                       dey             ;should not be executed
3b3e :                  brk_ret                 ;address of break return
3b3e : 08                       php             ;either SP or Y count will fail, if we do not hit
3b3f : 88                       dey
3b40 : 88                       dey
3b41 : 88                       dey
3b42 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
3b44 : f003            >        beq skip0380
                       >        trap            ;failed not equal (non zero)
3b46 : 20df73          >        jsr report_error
                       >
3b49 :                 >skip0380
                        
3b49 : e053                     cpx #('R'+1)
                                trap_ne
3b4b : f003            >        beq skip0382
                       >        trap            ;failed not equal (non zero)
3b4d : 20df73          >        jsr report_error
                       >
3b50 :                 >skip0382
                        
3b50 : c045                     cpy #('K'-6)
                                trap_ne
3b52 : f003            >        beq skip0384
                       >        trap            ;failed not equal (non zero)
3b54 : 20df73          >        jsr report_error
                       >
3b57 :                 >skip0384
                        
3b57 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
3b58 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
3b5a : f003            >        beq skip0387
                       >        trap            ;failed not equal (non zero)
3b5c : 20df73          >        jsr report_error
                       >
3b5f :                 >skip0387
                        
3b5f : ba                       tsx             ;sp?
3b60 : e0ff                     cpx #$ff
                                trap_ne
3b62 : f003            >        beq skip0389
                       >        trap            ;failed not equal (non zero)
3b64 : 20df73          >        jsr report_error
                       >
3b67 :                 >skip0389
                        
                                next_test
3b67 : ad0032          >            lda test_case   ;previous test
3b6a : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3b6c : f003            >        beq skip0392
                       >        trap            ;failed not equal (non zero)
3b6e : 20df73          >        jsr report_error
                       >
3b71 :                 >skip0392
                       >
000c =                 >test_num = test_num + 1
3b71 : a90c            >            lda #test_num   ;*** next tests' number
3b73 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
3b76 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b78 : 48              >            pha         ;use stack to load status
3b79 : 28              >            plp
                        
3b7a : 18                       clc
                                tst_stat $ff-carry
3b7b : 08              >            php         ;save status
3b7c : 68              >            pla         ;use stack to retrieve status
3b7d : 48              >            pha
                       >            cmp_flag $ff-carry
3b7e : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3b80 : f003            >        beq skip0398
                       >        trap            ;failed not equal (non zero)
3b82 : 20df73          >        jsr report_error
                       >
3b85 :                 >skip0398
                       >
3b85 : 28              >            plp         ;restore status
                        
3b86 : 38                       sec
                                tst_stat $ff
3b87 : 08              >            php         ;save status
3b88 : 68              >            pla         ;use stack to retrieve status
3b89 : 48              >            pha
                       >            cmp_flag $ff
3b8a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3b8c : f003            >        beq skip0402
                       >        trap            ;failed not equal (non zero)
3b8e : 20df73          >        jsr report_error
                       >
3b91 :                 >skip0402
                       >
3b91 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
3b92 : 58                       cli
                                tst_stat $ff-intdis
3b93 : 08              >            php         ;save status
3b94 : 68              >            pla         ;use stack to retrieve status
3b95 : 48              >            pha
                       >            cmp_flag $ff-intdis
3b96 : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3b98 : f003            >        beq skip0406
                       >        trap            ;failed not equal (non zero)
3b9a : 20df73          >        jsr report_error
                       >
3b9d :                 >skip0406
                       >
3b9d : 28              >            plp         ;restore status
                        
3b9e : 78                       sei
                                tst_stat $ff
3b9f : 08              >            php         ;save status
3ba0 : 68              >            pla         ;use stack to retrieve status
3ba1 : 48              >            pha
                       >            cmp_flag $ff
3ba2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ba4 : f003            >        beq skip0410
                       >        trap            ;failed not equal (non zero)
3ba6 : 20df73          >        jsr report_error
                       >
3ba9 :                 >skip0410
                       >
3ba9 : 28              >            plp         ;restore status
                        
                            endif
3baa : d8                       cld
                                tst_stat $ff-decmode
3bab : 08              >            php         ;save status
3bac : 68              >            pla         ;use stack to retrieve status
3bad : 48              >            pha
                       >            cmp_flag $ff-decmode
3bae : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bb0 : f003            >        beq skip0414
                       >        trap            ;failed not equal (non zero)
3bb2 : 20df73          >        jsr report_error
                       >
3bb5 :                 >skip0414
                       >
3bb5 : 28              >            plp         ;restore status
                        
3bb6 : f8                       sed
                                tst_stat $ff
3bb7 : 08              >            php         ;save status
3bb8 : 68              >            pla         ;use stack to retrieve status
3bb9 : 48              >            pha
                       >            cmp_flag $ff
3bba : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bbc : f003            >        beq skip0418
                       >        trap            ;failed not equal (non zero)
3bbe : 20df73          >        jsr report_error
                       >
3bc1 :                 >skip0418
                       >
3bc1 : 28              >            plp         ;restore status
                        
3bc2 : b8                       clv
                                tst_stat $ff-overfl
3bc3 : 08              >            php         ;save status
3bc4 : 68              >            pla         ;use stack to retrieve status
3bc5 : 48              >            pha
                       >            cmp_flag $ff-overfl
3bc6 : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bc8 : f003            >        beq skip0422
                       >        trap            ;failed not equal (non zero)
3bca : 20df73          >        jsr report_error
                       >
3bcd :                 >skip0422
                       >
3bcd : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
3bce : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3bd0 : 48              >            pha         ;use stack to load status
3bd1 : 28              >            plp
                        
                                tst_stat 0
3bd2 : 08              >            php         ;save status
3bd3 : 68              >            pla         ;use stack to retrieve status
3bd4 : 48              >            pha
                       >            cmp_flag 0
3bd5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bd7 : f003            >        beq skip0428
                       >        trap            ;failed not equal (non zero)
3bd9 : 20df73          >        jsr report_error
                       >
3bdc :                 >skip0428
                       >
3bdc : 28              >            plp         ;restore status
                        
3bdd : 38                       sec
                                tst_stat carry
3bde : 08              >            php         ;save status
3bdf : 68              >            pla         ;use stack to retrieve status
3be0 : 48              >            pha
                       >            cmp_flag carry
3be1 : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3be3 : f003            >        beq skip0432
                       >        trap            ;failed not equal (non zero)
3be5 : 20df73          >        jsr report_error
                       >
3be8 :                 >skip0432
                       >
3be8 : 28              >            plp         ;restore status
                        
3be9 : 18                       clc
                                tst_stat 0  
3bea : 08              >            php         ;save status
3beb : 68              >            pla         ;use stack to retrieve status
3bec : 48              >            pha
                       >            cmp_flag 0  
3bed : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bef : f003            >        beq skip0436
                       >        trap            ;failed not equal (non zero)
3bf1 : 20df73          >        jsr report_error
                       >
3bf4 :                 >skip0436
                       >
3bf4 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
3bf5 : 78                       sei
                                tst_stat intdis
3bf6 : 08              >            php         ;save status
3bf7 : 68              >            pla         ;use stack to retrieve status
3bf8 : 48              >            pha
                       >            cmp_flag intdis
3bf9 : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bfb : f003            >        beq skip0440
                       >        trap            ;failed not equal (non zero)
3bfd : 20df73          >        jsr report_error
                       >
3c00 :                 >skip0440
                       >
3c00 : 28              >            plp         ;restore status
                        
3c01 : 58                       cli
                                tst_stat 0
3c02 : 08              >            php         ;save status
3c03 : 68              >            pla         ;use stack to retrieve status
3c04 : 48              >            pha
                       >            cmp_flag 0
3c05 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c07 : f003            >        beq skip0444
                       >        trap            ;failed not equal (non zero)
3c09 : 20df73          >        jsr report_error
                       >
3c0c :                 >skip0444
                       >
3c0c : 28              >            plp         ;restore status
                        
                            endif  
3c0d : f8                       sed
                                tst_stat decmode
3c0e : 08              >            php         ;save status
3c0f : 68              >            pla         ;use stack to retrieve status
3c10 : 48              >            pha
                       >            cmp_flag decmode
3c11 : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c13 : f003            >        beq skip0448
                       >        trap            ;failed not equal (non zero)
3c15 : 20df73          >        jsr report_error
                       >
3c18 :                 >skip0448
                       >
3c18 : 28              >            plp         ;restore status
                        
3c19 : d8                       cld
                                tst_stat 0  
3c1a : 08              >            php         ;save status
3c1b : 68              >            pla         ;use stack to retrieve status
3c1c : 48              >            pha
                       >            cmp_flag 0  
3c1d : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c1f : f003            >        beq skip0452
                       >        trap            ;failed not equal (non zero)
3c21 : 20df73          >        jsr report_error
                       >
3c24 :                 >skip0452
                       >
3c24 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
3c25 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
3c27 : 48              >            pha         ;use stack to load status
3c28 : 28              >            plp
                        
                                tst_stat overfl
3c29 : 08              >            php         ;save status
3c2a : 68              >            pla         ;use stack to retrieve status
3c2b : 48              >            pha
                       >            cmp_flag overfl
3c2c : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c2e : f003            >        beq skip0458
                       >        trap            ;failed not equal (non zero)
3c30 : 20df73          >        jsr report_error
                       >
3c33 :                 >skip0458
                       >
3c33 : 28              >            plp         ;restore status
                        
3c34 : b8                       clv
                                tst_stat 0
3c35 : 08              >            php         ;save status
3c36 : 68              >            pla         ;use stack to retrieve status
3c37 : 48              >            pha
                       >            cmp_flag 0
3c38 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c3a : f003            >        beq skip0462
                       >        trap            ;failed not equal (non zero)
3c3c : 20df73          >        jsr report_error
                       >
3c3f :                 >skip0462
                       >
3c3f : 28              >            plp         ;restore status
                        
                                next_test
3c40 : ad0032          >            lda test_case   ;previous test
3c43 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3c45 : f003            >        beq skip0465
                       >        trap            ;failed not equal (non zero)
3c47 : 20df73          >        jsr report_error
                       >
3c4a :                 >skip0465
                       >
000d =                 >test_num = test_num + 1
3c4a : a90d            >            lda #test_num   ;*** next tests' number
3c4c : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
3c4f : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
3c51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c53 : 48              >            pha         ;use stack to load status
3c54 : 28              >            plp
                        
3c55 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
3c56 : 08              >            php         ;save flags
3c57 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
3c59 : f003            >        beq skip0470
                       >        trap            ;failed not equal (non zero)
3c5b : 20df73          >        jsr report_error
                       >
3c5e :                 >skip0470
                       >
3c5e : 68              >            pla         ;load status
3c5f : 48              >            pha
                       >            cmp_flag $ff-zero
3c60 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c62 : f003            >        beq skip0473
                       >        trap            ;failed not equal (non zero)
3c64 : 20df73          >        jsr report_error
                       >
3c67 :                 >skip0473
                       >
3c67 : 28              >            plp         ;restore status
                        
3c68 : e8                       inx             ;00
                                tst_x 0,$ff-minus
3c69 : 08              >            php         ;save flags
3c6a : e000            >            cpx #0     ;test result
                       >            trap_ne
3c6c : f003            >        beq skip0476
                       >        trap            ;failed not equal (non zero)
3c6e : 20df73          >        jsr report_error
                       >
3c71 :                 >skip0476
                       >
3c71 : 68              >            pla         ;load status
3c72 : 48              >            pha
                       >            cmp_flag $ff-minus
3c73 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c75 : f003            >        beq skip0479
                       >        trap            ;failed not equal (non zero)
3c77 : 20df73          >        jsr report_error
                       >
3c7a :                 >skip0479
                       >
3c7a : 28              >            plp         ;restore status
                        
3c7b : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
3c7c : 08              >            php         ;save flags
3c7d : e001            >            cpx #1     ;test result
                       >            trap_ne
3c7f : f003            >        beq skip0482
                       >        trap            ;failed not equal (non zero)
3c81 : 20df73          >        jsr report_error
                       >
3c84 :                 >skip0482
                       >
3c84 : 68              >            pla         ;load status
3c85 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3c86 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c88 : f003            >        beq skip0485
                       >        trap            ;failed not equal (non zero)
3c8a : 20df73          >        jsr report_error
                       >
3c8d :                 >skip0485
                       >
3c8d : 28              >            plp         ;restore status
                        
3c8e : ca                       dex             ;00
                                tst_x 0,$ff-minus
3c8f : 08              >            php         ;save flags
3c90 : e000            >            cpx #0     ;test result
                       >            trap_ne
3c92 : f003            >        beq skip0488
                       >        trap            ;failed not equal (non zero)
3c94 : 20df73          >        jsr report_error
                       >
3c97 :                 >skip0488
                       >
3c97 : 68              >            pla         ;load status
3c98 : 48              >            pha
                       >            cmp_flag $ff-minus
3c99 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c9b : f003            >        beq skip0491
                       >        trap            ;failed not equal (non zero)
3c9d : 20df73          >        jsr report_error
                       >
3ca0 :                 >skip0491
                       >
3ca0 : 28              >            plp         ;restore status
                        
3ca1 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
3ca2 : 08              >            php         ;save flags
3ca3 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
3ca5 : f003            >        beq skip0494
                       >        trap            ;failed not equal (non zero)
3ca7 : 20df73          >        jsr report_error
                       >
3caa :                 >skip0494
                       >
3caa : 68              >            pla         ;load status
3cab : 48              >            pha
                       >            cmp_flag $ff-zero
3cac : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cae : f003            >        beq skip0497
                       >        trap            ;failed not equal (non zero)
3cb0 : 20df73          >        jsr report_error
                       >
3cb3 :                 >skip0497
                       >
3cb3 : 28              >            plp         ;restore status
                        
3cb4 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
3cb5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3cb7 : 48              >            pha         ;use stack to load status
3cb8 : 28              >            plp
                        
3cb9 : e8                       inx             ;ff
                                tst_x $ff,minus
3cba : 08              >            php         ;save flags
3cbb : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
3cbd : f003            >        beq skip0502
                       >        trap            ;failed not equal (non zero)
3cbf : 20df73          >        jsr report_error
                       >
3cc2 :                 >skip0502
                       >
3cc2 : 68              >            pla         ;load status
3cc3 : 48              >            pha
                       >            cmp_flag minus
3cc4 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cc6 : f003            >        beq skip0505
                       >        trap            ;failed not equal (non zero)
3cc8 : 20df73          >        jsr report_error
                       >
3ccb :                 >skip0505
                       >
3ccb : 28              >            plp         ;restore status
                        
3ccc : e8                       inx             ;00
                                tst_x 0,zero
3ccd : 08              >            php         ;save flags
3cce : e000            >            cpx #0     ;test result
                       >            trap_ne
3cd0 : f003            >        beq skip0508
                       >        trap            ;failed not equal (non zero)
3cd2 : 20df73          >        jsr report_error
                       >
3cd5 :                 >skip0508
                       >
3cd5 : 68              >            pla         ;load status
3cd6 : 48              >            pha
                       >            cmp_flag zero
3cd7 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cd9 : f003            >        beq skip0511
                       >        trap            ;failed not equal (non zero)
3cdb : 20df73          >        jsr report_error
                       >
3cde :                 >skip0511
                       >
3cde : 28              >            plp         ;restore status
                        
3cdf : e8                       inx             ;01
                                tst_x 1,0
3ce0 : 08              >            php         ;save flags
3ce1 : e001            >            cpx #1     ;test result
                       >            trap_ne
3ce3 : f003            >        beq skip0514
                       >        trap            ;failed not equal (non zero)
3ce5 : 20df73          >        jsr report_error
                       >
3ce8 :                 >skip0514
                       >
3ce8 : 68              >            pla         ;load status
3ce9 : 48              >            pha
                       >            cmp_flag 0
3cea : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cec : f003            >        beq skip0517
                       >        trap            ;failed not equal (non zero)
3cee : 20df73          >        jsr report_error
                       >
3cf1 :                 >skip0517
                       >
3cf1 : 28              >            plp         ;restore status
                        
3cf2 : ca                       dex             ;00
                                tst_x 0,zero
3cf3 : 08              >            php         ;save flags
3cf4 : e000            >            cpx #0     ;test result
                       >            trap_ne
3cf6 : f003            >        beq skip0520
                       >        trap            ;failed not equal (non zero)
3cf8 : 20df73          >        jsr report_error
                       >
3cfb :                 >skip0520
                       >
3cfb : 68              >            pla         ;load status
3cfc : 48              >            pha
                       >            cmp_flag zero
3cfd : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cff : f003            >        beq skip0523
                       >        trap            ;failed not equal (non zero)
3d01 : 20df73          >        jsr report_error
                       >
3d04 :                 >skip0523
                       >
3d04 : 28              >            plp         ;restore status
                        
3d05 : ca                       dex             ;ff
                                tst_x $ff,minus
3d06 : 08              >            php         ;save flags
3d07 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
3d09 : f003            >        beq skip0526
                       >        trap            ;failed not equal (non zero)
3d0b : 20df73          >        jsr report_error
                       >
3d0e :                 >skip0526
                       >
3d0e : 68              >            pla         ;load status
3d0f : 48              >            pha
                       >            cmp_flag minus
3d10 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d12 : f003            >        beq skip0529
                       >        trap            ;failed not equal (non zero)
3d14 : 20df73          >        jsr report_error
                       >
3d17 :                 >skip0529
                       >
3d17 : 28              >            plp         ;restore status
                        
                        
3d18 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
3d1a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d1c : 48              >            pha         ;use stack to load status
3d1d : 28              >            plp
                        
3d1e : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
3d1f : 08              >            php         ;save flags
3d20 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3d22 : f003            >        beq skip0534
                       >        trap            ;failed not equal (non zero)
3d24 : 20df73          >        jsr report_error
                       >
3d27 :                 >skip0534
                       >
3d27 : 68              >            pla         ;load status
3d28 : 48              >            pha
                       >            cmp_flag $ff-zero
3d29 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d2b : f003            >        beq skip0537
                       >        trap            ;failed not equal (non zero)
3d2d : 20df73          >        jsr report_error
                       >
3d30 :                 >skip0537
                       >
3d30 : 28              >            plp         ;restore status
                        
3d31 : c8                       iny             ;00
                                tst_y 0,$ff-minus
3d32 : 08              >            php         ;save flags
3d33 : c000            >            cpy #0     ;test result
                       >            trap_ne
3d35 : f003            >        beq skip0540
                       >        trap            ;failed not equal (non zero)
3d37 : 20df73          >        jsr report_error
                       >
3d3a :                 >skip0540
                       >
3d3a : 68              >            pla         ;load status
3d3b : 48              >            pha
                       >            cmp_flag $ff-minus
3d3c : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d3e : f003            >        beq skip0543
                       >        trap            ;failed not equal (non zero)
3d40 : 20df73          >        jsr report_error
                       >
3d43 :                 >skip0543
                       >
3d43 : 28              >            plp         ;restore status
                        
3d44 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
3d45 : 08              >            php         ;save flags
3d46 : c001            >            cpy #1     ;test result
                       >            trap_ne
3d48 : f003            >        beq skip0546
                       >        trap            ;failed not equal (non zero)
3d4a : 20df73          >        jsr report_error
                       >
3d4d :                 >skip0546
                       >
3d4d : 68              >            pla         ;load status
3d4e : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3d4f : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d51 : f003            >        beq skip0549
                       >        trap            ;failed not equal (non zero)
3d53 : 20df73          >        jsr report_error
                       >
3d56 :                 >skip0549
                       >
3d56 : 28              >            plp         ;restore status
                        
3d57 : 88                       dey             ;00
                                tst_y 0,$ff-minus
3d58 : 08              >            php         ;save flags
3d59 : c000            >            cpy #0     ;test result
                       >            trap_ne
3d5b : f003            >        beq skip0552
                       >        trap            ;failed not equal (non zero)
3d5d : 20df73          >        jsr report_error
                       >
3d60 :                 >skip0552
                       >
3d60 : 68              >            pla         ;load status
3d61 : 48              >            pha
                       >            cmp_flag $ff-minus
3d62 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d64 : f003            >        beq skip0555
                       >        trap            ;failed not equal (non zero)
3d66 : 20df73          >        jsr report_error
                       >
3d69 :                 >skip0555
                       >
3d69 : 28              >            plp         ;restore status
                        
3d6a : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
3d6b : 08              >            php         ;save flags
3d6c : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3d6e : f003            >        beq skip0558
                       >        trap            ;failed not equal (non zero)
3d70 : 20df73          >        jsr report_error
                       >
3d73 :                 >skip0558
                       >
3d73 : 68              >            pla         ;load status
3d74 : 48              >            pha
                       >            cmp_flag $ff-zero
3d75 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d77 : f003            >        beq skip0561
                       >        trap            ;failed not equal (non zero)
3d79 : 20df73          >        jsr report_error
                       >
3d7c :                 >skip0561
                       >
3d7c : 28              >            plp         ;restore status
                        
3d7d : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
3d7e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3d80 : 48              >            pha         ;use stack to load status
3d81 : 28              >            plp
                        
3d82 : c8                       iny             ;ff
                                tst_y $ff,0+minus
3d83 : 08              >            php         ;save flags
3d84 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3d86 : f003            >        beq skip0566
                       >        trap            ;failed not equal (non zero)
3d88 : 20df73          >        jsr report_error
                       >
3d8b :                 >skip0566
                       >
3d8b : 68              >            pla         ;load status
3d8c : 48              >            pha
                       >            cmp_flag 0+minus
3d8d : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d8f : f003            >        beq skip0569
                       >        trap            ;failed not equal (non zero)
3d91 : 20df73          >        jsr report_error
                       >
3d94 :                 >skip0569
                       >
3d94 : 28              >            plp         ;restore status
                        
3d95 : c8                       iny             ;00
                                tst_y 0,zero
3d96 : 08              >            php         ;save flags
3d97 : c000            >            cpy #0     ;test result
                       >            trap_ne
3d99 : f003            >        beq skip0572
                       >        trap            ;failed not equal (non zero)
3d9b : 20df73          >        jsr report_error
                       >
3d9e :                 >skip0572
                       >
3d9e : 68              >            pla         ;load status
3d9f : 48              >            pha
                       >            cmp_flag zero
3da0 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3da2 : f003            >        beq skip0575
                       >        trap            ;failed not equal (non zero)
3da4 : 20df73          >        jsr report_error
                       >
3da7 :                 >skip0575
                       >
3da7 : 28              >            plp         ;restore status
                        
3da8 : c8                       iny             ;01
                                tst_y 1,0
3da9 : 08              >            php         ;save flags
3daa : c001            >            cpy #1     ;test result
                       >            trap_ne
3dac : f003            >        beq skip0578
                       >        trap            ;failed not equal (non zero)
3dae : 20df73          >        jsr report_error
                       >
3db1 :                 >skip0578
                       >
3db1 : 68              >            pla         ;load status
3db2 : 48              >            pha
                       >            cmp_flag 0
3db3 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3db5 : f003            >        beq skip0581
                       >        trap            ;failed not equal (non zero)
3db7 : 20df73          >        jsr report_error
                       >
3dba :                 >skip0581
                       >
3dba : 28              >            plp         ;restore status
                        
3dbb : 88                       dey             ;00
                                tst_y 0,zero
3dbc : 08              >            php         ;save flags
3dbd : c000            >            cpy #0     ;test result
                       >            trap_ne
3dbf : f003            >        beq skip0584
                       >        trap            ;failed not equal (non zero)
3dc1 : 20df73          >        jsr report_error
                       >
3dc4 :                 >skip0584
                       >
3dc4 : 68              >            pla         ;load status
3dc5 : 48              >            pha
                       >            cmp_flag zero
3dc6 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3dc8 : f003            >        beq skip0587
                       >        trap            ;failed not equal (non zero)
3dca : 20df73          >        jsr report_error
                       >
3dcd :                 >skip0587
                       >
3dcd : 28              >            plp         ;restore status
                        
3dce : 88                       dey             ;ff
                                tst_y $ff,minus
3dcf : 08              >            php         ;save flags
3dd0 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3dd2 : f003            >        beq skip0590
                       >        trap            ;failed not equal (non zero)
3dd4 : 20df73          >        jsr report_error
                       >
3dd7 :                 >skip0590
                       >
3dd7 : 68              >            pla         ;load status
3dd8 : 48              >            pha
                       >            cmp_flag minus
3dd9 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ddb : f003            >        beq skip0593
                       >        trap            ;failed not equal (non zero)
3ddd : 20df73          >        jsr report_error
                       >
3de0 :                 >skip0593
                       >
3de0 : 28              >            plp         ;restore status
                        
                                        
3de1 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
3de3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3de5 : 48              >            pha         ;use stack to load status
3de6 : 28              >            plp
                        
3de7 : 8a                       txa
                                tst_a $ff,$ff-zero
3de8 : 08              >            php         ;save flags
3de9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3deb : f003            >        beq skip0598
                       >        trap            ;failed not equal (non zero)
3ded : 20df73          >        jsr report_error
                       >
3df0 :                 >skip0598
                       >
3df0 : 68              >            pla         ;load status
3df1 : 48              >            pha
                       >            cmp_flag $ff-zero
3df2 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3df4 : f003            >        beq skip0601
                       >        trap            ;failed not equal (non zero)
3df6 : 20df73          >        jsr report_error
                       >
3df9 :                 >skip0601
                       >
3df9 : 28              >            plp         ;restore status
                        
3dfa : 08                       php
3dfb : e8                       inx             ;00
3dfc : 28                       plp
3dfd : 8a                       txa
                                tst_a 0,$ff-minus
3dfe : 08              >            php         ;save flags
3dff : c900            >            cmp #0     ;test result
                       >            trap_ne
3e01 : f003            >        beq skip0604
                       >        trap            ;failed not equal (non zero)
3e03 : 20df73          >        jsr report_error
                       >
3e06 :                 >skip0604
                       >
3e06 : 68              >            pla         ;load status
3e07 : 48              >            pha
                       >            cmp_flag $ff-minus
3e08 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e0a : f003            >        beq skip0607
                       >        trap            ;failed not equal (non zero)
3e0c : 20df73          >        jsr report_error
                       >
3e0f :                 >skip0607
                       >
3e0f : 28              >            plp         ;restore status
                        
3e10 : 08                       php
3e11 : e8                       inx             ;01
3e12 : 28                       plp
3e13 : 8a                       txa
                                tst_a 1,$ff-minus-zero
3e14 : 08              >            php         ;save flags
3e15 : c901            >            cmp #1     ;test result
                       >            trap_ne
3e17 : f003            >        beq skip0610
                       >        trap            ;failed not equal (non zero)
3e19 : 20df73          >        jsr report_error
                       >
3e1c :                 >skip0610
                       >
3e1c : 68              >            pla         ;load status
3e1d : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3e1e : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e20 : f003            >        beq skip0613
                       >        trap            ;failed not equal (non zero)
3e22 : 20df73          >        jsr report_error
                       >
3e25 :                 >skip0613
                       >
3e25 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
3e26 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3e28 : 48              >            pha         ;use stack to load status
3e29 : 28              >            plp
                        
3e2a : 8a                       txa
                                tst_a 1,0
3e2b : 08              >            php         ;save flags
3e2c : c901            >            cmp #1     ;test result
                       >            trap_ne
3e2e : f003            >        beq skip0618
                       >        trap            ;failed not equal (non zero)
3e30 : 20df73          >        jsr report_error
                       >
3e33 :                 >skip0618
                       >
3e33 : 68              >            pla         ;load status
3e34 : 48              >            pha
                       >            cmp_flag 0
3e35 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e37 : f003            >        beq skip0621
                       >        trap            ;failed not equal (non zero)
3e39 : 20df73          >        jsr report_error
                       >
3e3c :                 >skip0621
                       >
3e3c : 28              >            plp         ;restore status
                        
3e3d : 08                       php
3e3e : ca                       dex             ;00
3e3f : 28                       plp
3e40 : 8a                       txa
                                tst_a 0,zero
3e41 : 08              >            php         ;save flags
3e42 : c900            >            cmp #0     ;test result
                       >            trap_ne
3e44 : f003            >        beq skip0624
                       >        trap            ;failed not equal (non zero)
3e46 : 20df73          >        jsr report_error
                       >
3e49 :                 >skip0624
                       >
3e49 : 68              >            pla         ;load status
3e4a : 48              >            pha
                       >            cmp_flag zero
3e4b : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e4d : f003            >        beq skip0627
                       >        trap            ;failed not equal (non zero)
3e4f : 20df73          >        jsr report_error
                       >
3e52 :                 >skip0627
                       >
3e52 : 28              >            plp         ;restore status
                        
3e53 : 08                       php
3e54 : ca                       dex             ;ff
3e55 : 28                       plp
3e56 : 8a                       txa
                                tst_a $ff,minus
3e57 : 08              >            php         ;save flags
3e58 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3e5a : f003            >        beq skip0630
                       >        trap            ;failed not equal (non zero)
3e5c : 20df73          >        jsr report_error
                       >
3e5f :                 >skip0630
                       >
3e5f : 68              >            pla         ;load status
3e60 : 48              >            pha
                       >            cmp_flag minus
3e61 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e63 : f003            >        beq skip0633
                       >        trap            ;failed not equal (non zero)
3e65 : 20df73          >        jsr report_error
                       >
3e68 :                 >skip0633
                       >
3e68 : 28              >            plp         ;restore status
                        
                                                
3e69 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
3e6b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3e6d : 48              >            pha         ;use stack to load status
3e6e : 28              >            plp
                        
3e6f : 98                       tya
                                tst_a $ff,$ff-zero
3e70 : 08              >            php         ;save flags
3e71 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3e73 : f003            >        beq skip0638
                       >        trap            ;failed not equal (non zero)
3e75 : 20df73          >        jsr report_error
                       >
3e78 :                 >skip0638
                       >
3e78 : 68              >            pla         ;load status
3e79 : 48              >            pha
                       >            cmp_flag $ff-zero
3e7a : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e7c : f003            >        beq skip0641
                       >        trap            ;failed not equal (non zero)
3e7e : 20df73          >        jsr report_error
                       >
3e81 :                 >skip0641
                       >
3e81 : 28              >            plp         ;restore status
                        
3e82 : 08                       php
3e83 : c8                       iny             ;00
3e84 : 28                       plp
3e85 : 98                       tya
                                tst_a 0,$ff-minus
3e86 : 08              >            php         ;save flags
3e87 : c900            >            cmp #0     ;test result
                       >            trap_ne
3e89 : f003            >        beq skip0644
                       >        trap            ;failed not equal (non zero)
3e8b : 20df73          >        jsr report_error
                       >
3e8e :                 >skip0644
                       >
3e8e : 68              >            pla         ;load status
3e8f : 48              >            pha
                       >            cmp_flag $ff-minus
3e90 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e92 : f003            >        beq skip0647
                       >        trap            ;failed not equal (non zero)
3e94 : 20df73          >        jsr report_error
                       >
3e97 :                 >skip0647
                       >
3e97 : 28              >            plp         ;restore status
                        
3e98 : 08                       php
3e99 : c8                       iny             ;01
3e9a : 28                       plp
3e9b : 98                       tya
                                tst_a 1,$ff-minus-zero
3e9c : 08              >            php         ;save flags
3e9d : c901            >            cmp #1     ;test result
                       >            trap_ne
3e9f : f003            >        beq skip0650
                       >        trap            ;failed not equal (non zero)
3ea1 : 20df73          >        jsr report_error
                       >
3ea4 :                 >skip0650
                       >
3ea4 : 68              >            pla         ;load status
3ea5 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3ea6 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ea8 : f003            >        beq skip0653
                       >        trap            ;failed not equal (non zero)
3eaa : 20df73          >        jsr report_error
                       >
3ead :                 >skip0653
                       >
3ead : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
3eae : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3eb0 : 48              >            pha         ;use stack to load status
3eb1 : 28              >            plp
                        
3eb2 : 98                       tya
                                tst_a 1,0
3eb3 : 08              >            php         ;save flags
3eb4 : c901            >            cmp #1     ;test result
                       >            trap_ne
3eb6 : f003            >        beq skip0658
                       >        trap            ;failed not equal (non zero)
3eb8 : 20df73          >        jsr report_error
                       >
3ebb :                 >skip0658
                       >
3ebb : 68              >            pla         ;load status
3ebc : 48              >            pha
                       >            cmp_flag 0
3ebd : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ebf : f003            >        beq skip0661
                       >        trap            ;failed not equal (non zero)
3ec1 : 20df73          >        jsr report_error
                       >
3ec4 :                 >skip0661
                       >
3ec4 : 28              >            plp         ;restore status
                        
3ec5 : 08                       php
3ec6 : 88                       dey             ;00
3ec7 : 28                       plp
3ec8 : 98                       tya
                                tst_a 0,zero
3ec9 : 08              >            php         ;save flags
3eca : c900            >            cmp #0     ;test result
                       >            trap_ne
3ecc : f003            >        beq skip0664
                       >        trap            ;failed not equal (non zero)
3ece : 20df73          >        jsr report_error
                       >
3ed1 :                 >skip0664
                       >
3ed1 : 68              >            pla         ;load status
3ed2 : 48              >            pha
                       >            cmp_flag zero
3ed3 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ed5 : f003            >        beq skip0667
                       >        trap            ;failed not equal (non zero)
3ed7 : 20df73          >        jsr report_error
                       >
3eda :                 >skip0667
                       >
3eda : 28              >            plp         ;restore status
                        
3edb : 08                       php
3edc : 88                       dey             ;ff
3edd : 28                       plp
3ede : 98                       tya
                                tst_a $ff,minus
3edf : 08              >            php         ;save flags
3ee0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3ee2 : f003            >        beq skip0670
                       >        trap            ;failed not equal (non zero)
3ee4 : 20df73          >        jsr report_error
                       >
3ee7 :                 >skip0670
                       >
3ee7 : 68              >            pla         ;load status
3ee8 : 48              >            pha
                       >            cmp_flag minus
3ee9 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3eeb : f003            >        beq skip0673
                       >        trap            ;failed not equal (non zero)
3eed : 20df73          >        jsr report_error
                       >
3ef0 :                 >skip0673
                       >
3ef0 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
3ef1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
3ef3 : 48                       pha
3ef4 : a2ff                     ldx #$ff        ;ff
3ef6 : 8a                       txa
3ef7 : 28                       plp             
3ef8 : a8                       tay
                                tst_y $ff,$ff-zero
3ef9 : 08              >            php         ;save flags
3efa : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3efc : f003            >        beq skip0677
                       >        trap            ;failed not equal (non zero)
3efe : 20df73          >        jsr report_error
                       >
3f01 :                 >skip0677
                       >
3f01 : 68              >            pla         ;load status
3f02 : 48              >            pha
                       >            cmp_flag $ff-zero
3f03 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f05 : f003            >        beq skip0680
                       >        trap            ;failed not equal (non zero)
3f07 : 20df73          >        jsr report_error
                       >
3f0a :                 >skip0680
                       >
3f0a : 28              >            plp         ;restore status
                        
3f0b : 08                       php
3f0c : e8                       inx             ;00
3f0d : 8a                       txa
3f0e : 28                       plp
3f0f : a8                       tay
                                tst_y 0,$ff-minus
3f10 : 08              >            php         ;save flags
3f11 : c000            >            cpy #0     ;test result
                       >            trap_ne
3f13 : f003            >        beq skip0683
                       >        trap            ;failed not equal (non zero)
3f15 : 20df73          >        jsr report_error
                       >
3f18 :                 >skip0683
                       >
3f18 : 68              >            pla         ;load status
3f19 : 48              >            pha
                       >            cmp_flag $ff-minus
3f1a : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f1c : f003            >        beq skip0686
                       >        trap            ;failed not equal (non zero)
3f1e : 20df73          >        jsr report_error
                       >
3f21 :                 >skip0686
                       >
3f21 : 28              >            plp         ;restore status
                        
3f22 : 08                       php
3f23 : e8                       inx             ;01
3f24 : 8a                       txa
3f25 : 28                       plp
3f26 : a8                       tay
                                tst_y 1,$ff-minus-zero
3f27 : 08              >            php         ;save flags
3f28 : c001            >            cpy #1     ;test result
                       >            trap_ne
3f2a : f003            >        beq skip0689
                       >        trap            ;failed not equal (non zero)
3f2c : 20df73          >        jsr report_error
                       >
3f2f :                 >skip0689
                       >
3f2f : 68              >            pla         ;load status
3f30 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3f31 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f33 : f003            >        beq skip0692
                       >        trap            ;failed not equal (non zero)
3f35 : 20df73          >        jsr report_error
                       >
3f38 :                 >skip0692
                       >
3f38 : 28              >            plp         ;restore status
                        
                                load_flag 0
3f39 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
3f3b : 48                       pha
3f3c : a900                     lda #0
3f3e : 8a                       txa
3f3f : 28                       plp
3f40 : a8                       tay
                                tst_y 1,0
3f41 : 08              >            php         ;save flags
3f42 : c001            >            cpy #1     ;test result
                       >            trap_ne
3f44 : f003            >        beq skip0696
                       >        trap            ;failed not equal (non zero)
3f46 : 20df73          >        jsr report_error
                       >
3f49 :                 >skip0696
                       >
3f49 : 68              >            pla         ;load status
3f4a : 48              >            pha
                       >            cmp_flag 0
3f4b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f4d : f003            >        beq skip0699
                       >        trap            ;failed not equal (non zero)
3f4f : 20df73          >        jsr report_error
                       >
3f52 :                 >skip0699
                       >
3f52 : 28              >            plp         ;restore status
                        
3f53 : 08                       php
3f54 : ca                       dex             ;00
3f55 : 8a                       txa
3f56 : 28                       plp
3f57 : a8                       tay
                                tst_y 0,zero
3f58 : 08              >            php         ;save flags
3f59 : c000            >            cpy #0     ;test result
                       >            trap_ne
3f5b : f003            >        beq skip0702
                       >        trap            ;failed not equal (non zero)
3f5d : 20df73          >        jsr report_error
                       >
3f60 :                 >skip0702
                       >
3f60 : 68              >            pla         ;load status
3f61 : 48              >            pha
                       >            cmp_flag zero
3f62 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f64 : f003            >        beq skip0705
                       >        trap            ;failed not equal (non zero)
3f66 : 20df73          >        jsr report_error
                       >
3f69 :                 >skip0705
                       >
3f69 : 28              >            plp         ;restore status
                        
3f6a : 08                       php
3f6b : ca                       dex             ;ff
3f6c : 8a                       txa
3f6d : 28                       plp
3f6e : a8                       tay
                                tst_y $ff,minus
3f6f : 08              >            php         ;save flags
3f70 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
3f72 : f003            >        beq skip0708
                       >        trap            ;failed not equal (non zero)
3f74 : 20df73          >        jsr report_error
                       >
3f77 :                 >skip0708
                       >
3f77 : 68              >            pla         ;load status
3f78 : 48              >            pha
                       >            cmp_flag minus
3f79 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f7b : f003            >        beq skip0711
                       >        trap            ;failed not equal (non zero)
3f7d : 20df73          >        jsr report_error
                       >
3f80 :                 >skip0711
                       >
3f80 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
3f81 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
3f83 : 48                       pha
3f84 : a0ff                     ldy #$ff        ;ff
3f86 : 98                       tya
3f87 : 28                       plp
3f88 : aa                       tax
                                tst_x $ff,$ff-zero
3f89 : 08              >            php         ;save flags
3f8a : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
3f8c : f003            >        beq skip0715
                       >        trap            ;failed not equal (non zero)
3f8e : 20df73          >        jsr report_error
                       >
3f91 :                 >skip0715
                       >
3f91 : 68              >            pla         ;load status
3f92 : 48              >            pha
                       >            cmp_flag $ff-zero
3f93 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f95 : f003            >        beq skip0718
                       >        trap            ;failed not equal (non zero)
3f97 : 20df73          >        jsr report_error
                       >
3f9a :                 >skip0718
                       >
3f9a : 28              >            plp         ;restore status
                        
3f9b : 08                       php
3f9c : c8                       iny             ;00
3f9d : 98                       tya
3f9e : 28                       plp
3f9f : aa                       tax
                                tst_x 0,$ff-minus
3fa0 : 08              >            php         ;save flags
3fa1 : e000            >            cpx #0     ;test result
                       >            trap_ne
3fa3 : f003            >        beq skip0721
                       >        trap            ;failed not equal (non zero)
3fa5 : 20df73          >        jsr report_error
                       >
3fa8 :                 >skip0721
                       >
3fa8 : 68              >            pla         ;load status
3fa9 : 48              >            pha
                       >            cmp_flag $ff-minus
3faa : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fac : f003            >        beq skip0724
                       >        trap            ;failed not equal (non zero)
3fae : 20df73          >        jsr report_error
                       >
3fb1 :                 >skip0724
                       >
3fb1 : 28              >            plp         ;restore status
                        
3fb2 : 08                       php
3fb3 : c8                       iny             ;01
3fb4 : 98                       tya
3fb5 : 28                       plp
3fb6 : aa                       tax
                                tst_x 1,$ff-minus-zero
3fb7 : 08              >            php         ;save flags
3fb8 : e001            >            cpx #1     ;test result
                       >            trap_ne
3fba : f003            >        beq skip0727
                       >        trap            ;failed not equal (non zero)
3fbc : 20df73          >        jsr report_error
                       >
3fbf :                 >skip0727
                       >
3fbf : 68              >            pla         ;load status
3fc0 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
3fc1 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fc3 : f003            >        beq skip0730
                       >        trap            ;failed not equal (non zero)
3fc5 : 20df73          >        jsr report_error
                       >
3fc8 :                 >skip0730
                       >
3fc8 : 28              >            plp         ;restore status
                        
                                load_flag 0
3fc9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
3fcb : 48                       pha
3fcc : a900                     lda #0          ;preset status
3fce : 98                       tya
3fcf : 28                       plp
3fd0 : aa                       tax
                                tst_x 1,0
3fd1 : 08              >            php         ;save flags
3fd2 : e001            >            cpx #1     ;test result
                       >            trap_ne
3fd4 : f003            >        beq skip0734
                       >        trap            ;failed not equal (non zero)
3fd6 : 20df73          >        jsr report_error
                       >
3fd9 :                 >skip0734
                       >
3fd9 : 68              >            pla         ;load status
3fda : 48              >            pha
                       >            cmp_flag 0
3fdb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fdd : f003            >        beq skip0737
                       >        trap            ;failed not equal (non zero)
3fdf : 20df73          >        jsr report_error
                       >
3fe2 :                 >skip0737
                       >
3fe2 : 28              >            plp         ;restore status
                        
3fe3 : 08                       php
3fe4 : 88                       dey             ;00
3fe5 : 98                       tya
3fe6 : 28                       plp
3fe7 : aa                       tax
                                tst_x 0,zero
3fe8 : 08              >            php         ;save flags
3fe9 : e000            >            cpx #0     ;test result
                       >            trap_ne
3feb : f003            >        beq skip0740
                       >        trap            ;failed not equal (non zero)
3fed : 20df73          >        jsr report_error
                       >
3ff0 :                 >skip0740
                       >
3ff0 : 68              >            pla         ;load status
3ff1 : 48              >            pha
                       >            cmp_flag zero
3ff2 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ff4 : f003            >        beq skip0743
                       >        trap            ;failed not equal (non zero)
3ff6 : 20df73          >        jsr report_error
                       >
3ff9 :                 >skip0743
                       >
3ff9 : 28              >            plp         ;restore status
                        
3ffa : 08                       php
3ffb : 88                       dey             ;ff
3ffc : 98                       tya
3ffd : 28                       plp
3ffe : aa                       tax
                                tst_x $ff,minus
3fff : 08              >            php         ;save flags
4000 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
4002 : f003            >        beq skip0746
                       >        trap            ;failed not equal (non zero)
4004 : 20df73          >        jsr report_error
                       >
4007 :                 >skip0746
                       >
4007 : 68              >            pla         ;load status
4008 : 48              >            pha
                       >            cmp_flag minus
4009 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
400b : f003            >        beq skip0749
                       >        trap            ;failed not equal (non zero)
400d : 20df73          >        jsr report_error
                       >
4010 :                 >skip0749
                       >
4010 : 28              >            plp         ;restore status
                        
                                next_test
4011 : ad0032          >            lda test_case   ;previous test
4014 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4016 : f003            >        beq skip0752
                       >        trap            ;failed not equal (non zero)
4018 : 20df73          >        jsr report_error
                       >
401b :                 >skip0752
                       >
000e =                 >test_num = test_num + 1
401b : a90e            >            lda #test_num   ;*** next tests' number
401d : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
4020 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
4022 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4024 : 48              >            pha         ;use stack to load status
4025 : 28              >            plp
                        
4026 : 9a                       txs
4027 : 08                       php
4028 : ad0101                   lda $101
                                cmp_flag $ff
402b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
402d : f003            >        beq skip0757
                       >        trap            ;failed not equal (non zero)
402f : 20df73          >        jsr report_error
                       >
4032 :                 >skip0757
                        
                                set_stat 0
                       >            load_flag 0
4032 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4034 : 48              >            pha         ;use stack to load status
4035 : 28              >            plp
                        
4036 : 9a                       txs
4037 : 08                       php
4038 : ad0101                   lda $101
                                cmp_flag 0
403b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
403d : f003            >        beq skip0762
                       >        trap            ;failed not equal (non zero)
403f : 20df73          >        jsr report_error
                       >
4042 :                 >skip0762
                        
4042 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
4043 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4045 : 48              >            pha         ;use stack to load status
4046 : 28              >            plp
                        
4047 : 9a                       txs
4048 : 08                       php
4049 : ad0001                   lda $100
                                cmp_flag $ff
404c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
404e : f003            >        beq skip0767
                       >        trap            ;failed not equal (non zero)
4050 : 20df73          >        jsr report_error
                       >
4053 :                 >skip0767
                        
                                set_stat 0
                       >            load_flag 0
4053 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4055 : 48              >            pha         ;use stack to load status
4056 : 28              >            plp
                        
4057 : 9a                       txs
4058 : 08                       php
4059 : ad0001                   lda $100
                                cmp_flag 0
405c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
405e : f003            >        beq skip0772
                       >        trap            ;failed not equal (non zero)
4060 : 20df73          >        jsr report_error
                       >
4063 :                 >skip0772
                        
4063 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
4064 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4066 : 48              >            pha         ;use stack to load status
4067 : 28              >            plp
                        
4068 : 9a                       txs
4069 : 08                       php
406a : adff01                   lda $1ff
                                cmp_flag $ff
406d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
406f : f003            >        beq skip0777
                       >        trap            ;failed not equal (non zero)
4071 : 20df73          >        jsr report_error
                       >
4074 :                 >skip0777
                        
                                set_stat 0
                       >            load_flag 0
4074 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4076 : 48              >            pha         ;use stack to load status
4077 : 28              >            plp
                        
4078 : 9a                       txs
4079 : 08                       php
407a : adff01                   lda $1ff
                                cmp_flag 0
407d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                
407f : a201                     ldx #1
4081 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
4082 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4084 : 48              >            pha         ;use stack to load status
4085 : 28              >            plp
                        
4086 : ba                       tsx             ;clears Z, N
4087 : 08                       php             ;sp=00
4088 : e001                     cpx #1
                                trap_ne
408a : f003            >        beq skip0784
                       >        trap            ;failed not equal (non zero)
408c : 20df73          >        jsr report_error
                       >
408f :                 >skip0784
                        
408f : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
4092 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
4094 : f003            >        beq skip0787
                       >        trap            ;failed not equal (non zero)
4096 : 20df73          >        jsr report_error
                       >
4099 :                 >skip0787
                        
                                set_stat $ff
                       >            load_flag $ff
4099 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
409b : 48              >            pha         ;use stack to load status
409c : 28              >            plp
                        
409d : ba                       tsx             ;clears N, sets Z
409e : 08                       php             ;sp=ff
409f : e000                     cpx #0
                                trap_ne
40a1 : f003            >        beq skip0791
                       >        trap            ;failed not equal (non zero)
40a3 : 20df73          >        jsr report_error
                       >
40a6 :                 >skip0791
                        
40a6 : ad0001                   lda $100
                                cmp_flag $ff-minus
40a9 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
40ab : f003            >        beq skip0794
                       >        trap            ;failed not equal (non zero)
40ad : 20df73          >        jsr report_error
                       >
40b0 :                 >skip0794
                        
                                set_stat $ff
                       >            load_flag $ff
40b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
40b2 : 48              >            pha         ;use stack to load status
40b3 : 28              >            plp
                        
40b4 : ba                       tsx             ;clears N, sets Z
40b5 : 08                       php             ;sp=fe
40b6 : e0ff                     cpx #$ff
                                trap_ne
40b8 : f003            >        beq skip0798
                       >        trap            ;failed not equal (non zero)
40ba : 20df73          >        jsr report_error
                       >
40bd :                 >skip0798
                        
40bd : adff01                   lda $1ff
                                cmp_flag $ff-zero
40c0 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
40c2 : f003            >        beq skip0801
                       >        trap            ;failed not equal (non zero)
40c4 : 20df73          >        jsr report_error
                       >
40c7 :                 >skip0801
                        
                                
40c7 : a201                     ldx #1
40c9 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
40ca : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
40cc : 48              >            pha         ;use stack to load status
40cd : 28              >            plp
                        
40ce : ba                       tsx             ;clears Z, N
40cf : 08                       php             ;sp=00
40d0 : e001                     cpx #1
                                trap_ne
40d2 : f003            >        beq skip0805
                       >        trap            ;failed not equal (non zero)
40d4 : 20df73          >        jsr report_error
                       >
40d7 :                 >skip0805
                        
40d7 : ad0101                   lda $101
                                cmp_flag 0
40da : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
40dc : f003            >        beq skip0808
                       >        trap            ;failed not equal (non zero)
40de : 20df73          >        jsr report_error
                       >
40e1 :                 >skip0808
                        
                                set_stat 0
                       >            load_flag 0
40e1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
40e3 : 48              >            pha         ;use stack to load status
40e4 : 28              >            plp
                        
40e5 : ba                       tsx             ;clears N, sets Z
40e6 : 08                       php             ;sp=ff
40e7 : e000                     cpx #0
                                trap_ne
40e9 : f003            >        beq skip0812
                       >        trap            ;failed not equal (non zero)
40eb : 20df73          >        jsr report_error
                       >
40ee :                 >skip0812
                        
40ee : ad0001                   lda $100
                                cmp_flag zero
40f1 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
40f3 : f003            >        beq skip0815
                       >        trap            ;failed not equal (non zero)
40f5 : 20df73          >        jsr report_error
                       >
40f8 :                 >skip0815
                        
                                set_stat 0
                       >            load_flag 0
40f8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
40fa : 48              >            pha         ;use stack to load status
40fb : 28              >            plp
                        
40fc : ba                       tsx             ;clears N, sets Z
40fd : 08                       php             ;sp=fe
40fe : e0ff                     cpx #$ff
                                trap_ne
4100 : f003            >        beq skip0819
                       >        trap            ;failed not equal (non zero)
4102 : 20df73          >        jsr report_error
                       >
4105 :                 >skip0819
                        
4105 : adff01                   lda $1ff
                                cmp_flag minus
4108 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
410a : f003            >        beq skip0822
                       >        trap            ;failed not equal (non zero)
410c : 20df73          >        jsr report_error
                       >
410f :                 >skip0822
                        
410f : 68                       pla             ;sp=ff
                                next_test
4110 : ad0032          >            lda test_case   ;previous test
4113 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4115 : f003            >        beq skip0825
                       >        trap            ;failed not equal (non zero)
4117 : 20df73          >        jsr report_error
                       >
411a :                 >skip0825
                       >
000f =                 >test_num = test_num + 1
411a : a90f            >            lda #test_num   ;*** next tests' number
411c : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
411f : a003                     ldy #3
4121 :                  tldx    
                                set_stat 0
                       >            load_flag 0
4121 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4123 : 48              >            pha         ;use stack to load status
4124 : 28              >            plp
                        
4125 : b659                     ldx zp1,y
4127 : 08                       php         ;test stores do not alter flags
4128 : 8a                       txa
4129 : 49c3                     eor #$c3
412b : 28                       plp
412c : 990332                   sta abst,y
412f : 08                       php         ;flags after load/store sequence
4130 : 49c3                     eor #$c3
4132 : d91732                   cmp abs1,y  ;test result
                                trap_ne
4135 : f003            >        beq skip0829
                       >        trap            ;failed not equal (non zero)
4137 : 20df73          >        jsr report_error
                       >
413a :                 >skip0829
                        
413a : 68                       pla         ;load status
                                eor_flag 0
413b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
413d : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4140 : f003            >        beq skip0832
                       >        trap            ;failed not equal (non zero)
4142 : 20df73          >        jsr report_error
                       >
4145 :                 >skip0832
                        
4145 : 88                       dey
4146 : 10d9                     bpl tldx                  
                        
4148 : a003                     ldy #3
414a :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
414a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
414c : 48              >            pha         ;use stack to load status
414d : 28              >            plp
                        
414e : b659                     ldx zp1,y
4150 : 08                       php         ;test stores do not alter flags
4151 : 8a                       txa
4152 : 49c3                     eor #$c3
4154 : 28                       plp
4155 : 990332                   sta abst,y
4158 : 08                       php         ;flags after load/store sequence
4159 : 49c3                     eor #$c3
415b : d91732                   cmp abs1,y  ;test result
                                trap_ne
415e : f003            >        beq skip0836
                       >        trap            ;failed not equal (non zero)
4160 : 20df73          >        jsr report_error
                       >
4163 :                 >skip0836
                        
4163 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4164 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4166 : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4169 : f003            >        beq skip0839
                       >        trap            ;failed not equal (non zero)
416b : 20df73          >        jsr report_error
                       >
416e :                 >skip0839
                        
416e : 88                       dey
416f : 10d9                     bpl tldx1                  
                        
4171 : a003                     ldy #3
4173 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
4173 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4175 : 48              >            pha         ;use stack to load status
4176 : 28              >            plp
                        
4177 : be1732                   ldx abs1,y
417a : 08                       php         ;test stores do not alter flags
417b : 8a                       txa
417c : 49c3                     eor #$c3
417e : aa                       tax
417f : 28                       plp
4180 : 9652                     stx zpt,y
4182 : 08                       php         ;flags after load/store sequence
4183 : 49c3                     eor #$c3
4185 : d95900                   cmp zp1,y   ;test result
                                trap_ne
4188 : f003            >        beq skip0843
                       >        trap            ;failed not equal (non zero)
418a : 20df73          >        jsr report_error
                       >
418d :                 >skip0843
                        
418d : 68                       pla         ;load status
                                eor_flag 0
418e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4190 : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4193 : f003            >        beq skip0846
                       >        trap            ;failed not equal (non zero)
4195 : 20df73          >        jsr report_error
                       >
4198 :                 >skip0846
                        
4198 : 88                       dey
4199 : 10d8                     bpl tldx2                  
                        
419b : a003                     ldy #3
419d :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
419d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
419f : 48              >            pha         ;use stack to load status
41a0 : 28              >            plp
                        
41a1 : be1732                   ldx abs1,y
41a4 : 08                       php         ;test stores do not alter flags
41a5 : 8a                       txa
41a6 : 49c3                     eor #$c3
41a8 : aa                       tax
41a9 : 28                       plp
41aa : 9652                     stx zpt,y
41ac : 08                       php         ;flags after load/store sequence
41ad : 49c3                     eor #$c3
41af : d95900                   cmp zp1,y   ;test result
                                trap_ne
41b2 : f003            >        beq skip0850
                       >        trap            ;failed not equal (non zero)
41b4 : 20df73          >        jsr report_error
                       >
41b7 :                 >skip0850
                        
41b7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
41b8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
41ba : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
41bd : f003            >        beq skip0853
                       >        trap            ;failed not equal (non zero)
41bf : 20df73          >        jsr report_error
                       >
41c2 :                 >skip0853
                        
41c2 : 88                       dey
41c3 : 10d8                     bpl tldx3
                                
41c5 : a003                     ldy #3      ;testing store result
41c7 : a200                     ldx #0
41c9 : b95200           tstx    lda zpt,y
41cc : 49c3                     eor #$c3
41ce : d95900                   cmp zp1,y
                                trap_ne     ;store to zp data
41d1 : f003            >        beq skip0855
                       >        trap            ;failed not equal (non zero)
41d3 : 20df73          >        jsr report_error
                       >
41d6 :                 >skip0855
                        
41d6 : 9652                     stx zpt,y   ;clear                
41d8 : b90332                   lda abst,y
41db : 49c3                     eor #$c3
41dd : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
41e0 : f003            >        beq skip0857
                       >        trap            ;failed not equal (non zero)
41e2 : 20df73          >        jsr report_error
                       >
41e5 :                 >skip0857
                        
41e5 : 8a                       txa
41e6 : 990332                   sta abst,y  ;clear                
41e9 : 88                       dey
41ea : 10dd                     bpl tstx
                                next_test
41ec : ad0032          >            lda test_case   ;previous test
41ef : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
41f1 : f003            >        beq skip0860
                       >        trap            ;failed not equal (non zero)
41f3 : 20df73          >        jsr report_error
                       >
41f6 :                 >skip0860
                       >
0010 =                 >test_num = test_num + 1
41f6 : a910            >            lda #test_num   ;*** next tests' number
41f8 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
41fb : a0fd                     ldy #3+$fa
41fd : b65f             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
41ff : 8a                       txa
4200 : 990931                   sta abst-$fa,y      ;no STX abs,y!
4203 : 88                       dey
4204 : c0fa                     cpy #$fa
4206 : b0f5                     bcs tldx4                  
4208 : a0fd                     ldy #3+$fa
420a : be1d31           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
420d : 9658                     stx zpt-$fa&$ff,y
420f : 88                       dey
4210 : c0fa                     cpy #$fa
4212 : b0f6                     bcs tldx5                  
4214 : a003                     ldy #3      ;testing wraparound result
4216 : a200                     ldx #0
4218 : b95200           tstx1   lda zpt,y
421b : d95900                   cmp zp1,y
                                trap_ne     ;store to zp data
421e : f003            >        beq skip0862
                       >        trap            ;failed not equal (non zero)
4220 : 20df73          >        jsr report_error
                       >
4223 :                 >skip0862
                        
4223 : 9652                     stx zpt,y   ;clear                
4225 : b90332                   lda abst,y
4228 : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
422b : f003            >        beq skip0864
                       >        trap            ;failed not equal (non zero)
422d : 20df73          >        jsr report_error
                       >
4230 :                 >skip0864
                        
4230 : 8a                       txa
4231 : 990332                   sta abst,y  ;clear                
4234 : 88                       dey
4235 : 10e1                     bpl tstx1
                                next_test
4237 : ad0032          >            lda test_case   ;previous test
423a : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
423c : f003            >        beq skip0867
                       >        trap            ;failed not equal (non zero)
423e : 20df73          >        jsr report_error
                       >
4241 :                 >skip0867
                       >
0011 =                 >test_num = test_num + 1
4241 : a911            >            lda #test_num   ;*** next tests' number
4243 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
4246 : a203                     ldx #3
4248 :                  tldy    
                                set_stat 0
                       >            load_flag 0
4248 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
424a : 48              >            pha         ;use stack to load status
424b : 28              >            plp
                        
424c : b459                     ldy zp1,x
424e : 08                       php         ;test stores do not alter flags
424f : 98                       tya
4250 : 49c3                     eor #$c3
4252 : 28                       plp
4253 : 9d0332                   sta abst,x
4256 : 08                       php         ;flags after load/store sequence
4257 : 49c3                     eor #$c3
4259 : dd1732                   cmp abs1,x  ;test result
                                trap_ne
425c : f003            >        beq skip0871
                       >        trap            ;failed not equal (non zero)
425e : 20df73          >        jsr report_error
                       >
4261 :                 >skip0871
                        
4261 : 68                       pla         ;load status
                                eor_flag 0
4262 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4264 : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4267 : f003            >        beq skip0874
                       >        trap            ;failed not equal (non zero)
4269 : 20df73          >        jsr report_error
                       >
426c :                 >skip0874
                        
426c : ca                       dex
426d : 10d9                     bpl tldy                  
                        
426f : a203                     ldx #3
4271 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
4271 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4273 : 48              >            pha         ;use stack to load status
4274 : 28              >            plp
                        
4275 : b459                     ldy zp1,x
4277 : 08                       php         ;test stores do not alter flags
4278 : 98                       tya
4279 : 49c3                     eor #$c3
427b : 28                       plp
427c : 9d0332                   sta abst,x
427f : 08                       php         ;flags after load/store sequence
4280 : 49c3                     eor #$c3
4282 : dd1732                   cmp abs1,x  ;test result
                                trap_ne
4285 : f003            >        beq skip0878
                       >        trap            ;failed not equal (non zero)
4287 : 20df73          >        jsr report_error
                       >
428a :                 >skip0878
                        
428a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
428b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
428d : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4290 : f003            >        beq skip0881
                       >        trap            ;failed not equal (non zero)
4292 : 20df73          >        jsr report_error
                       >
4295 :                 >skip0881
                        
4295 : ca                       dex
4296 : 10d9                     bpl tldy1                  
                        
4298 : a203                     ldx #3
429a :                  tldy2   
                                set_stat 0
                       >            load_flag 0
429a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
429c : 48              >            pha         ;use stack to load status
429d : 28              >            plp
                        
429e : bc1732                   ldy abs1,x
42a1 : 08                       php         ;test stores do not alter flags
42a2 : 98                       tya
42a3 : 49c3                     eor #$c3
42a5 : a8                       tay
42a6 : 28                       plp
42a7 : 9452                     sty zpt,x
42a9 : 08                       php         ;flags after load/store sequence
42aa : 49c3                     eor #$c3
42ac : d559                     cmp zp1,x   ;test result
                                trap_ne
42ae : f003            >        beq skip0885
                       >        trap            ;failed not equal (non zero)
42b0 : 20df73          >        jsr report_error
                       >
42b3 :                 >skip0885
                        
42b3 : 68                       pla         ;load status
                                eor_flag 0
42b4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
42b6 : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
42b9 : f003            >        beq skip0888
                       >        trap            ;failed not equal (non zero)
42bb : 20df73          >        jsr report_error
                       >
42be :                 >skip0888
                        
42be : ca                       dex
42bf : 10d9                     bpl tldy2                  
                        
42c1 : a203                     ldx #3
42c3 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
42c3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
42c5 : 48              >            pha         ;use stack to load status
42c6 : 28              >            plp
                        
42c7 : bc1732                   ldy abs1,x
42ca : 08                       php         ;test stores do not alter flags
42cb : 98                       tya
42cc : 49c3                     eor #$c3
42ce : a8                       tay
42cf : 28                       plp
42d0 : 9452                     sty zpt,x
42d2 : 08                       php         ;flags after load/store sequence
42d3 : 49c3                     eor #$c3
42d5 : d559                     cmp zp1,x   ;test result
                                trap_ne
42d7 : f003            >        beq skip0892
                       >        trap            ;failed not equal (non zero)
42d9 : 20df73          >        jsr report_error
                       >
42dc :                 >skip0892
                        
42dc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
42dd : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
42df : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
42e2 : f003            >        beq skip0895
                       >        trap            ;failed not equal (non zero)
42e4 : 20df73          >        jsr report_error
                       >
42e7 :                 >skip0895
                        
42e7 : ca                       dex
42e8 : 10d9                     bpl tldy3
                        
42ea : a203                     ldx #3      ;testing store result
42ec : a000                     ldy #0
42ee : b552             tsty    lda zpt,x
42f0 : 49c3                     eor #$c3
42f2 : d559                     cmp zp1,x
                                trap_ne     ;store to zp,x data
42f4 : f003            >        beq skip0897
                       >        trap            ;failed not equal (non zero)
42f6 : 20df73          >        jsr report_error
                       >
42f9 :                 >skip0897
                        
42f9 : 9452                     sty zpt,x   ;clear                
42fb : bd0332                   lda abst,x
42fe : 49c3                     eor #$c3
4300 : dd1732                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4303 : f003            >        beq skip0899
                       >        trap            ;failed not equal (non zero)
4305 : 20df73          >        jsr report_error
                       >
4308 :                 >skip0899
                        
4308 : 8a                       txa
4309 : 9d0332                   sta abst,x  ;clear                
430c : ca                       dex
430d : 10df                     bpl tsty
                                next_test
430f : ad0032          >            lda test_case   ;previous test
4312 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4314 : f003            >        beq skip0902
                       >        trap            ;failed not equal (non zero)
4316 : 20df73          >        jsr report_error
                       >
4319 :                 >skip0902
                       >
0012 =                 >test_num = test_num + 1
4319 : a912            >            lda #test_num   ;*** next tests' number
431b : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
431e : a2fd                     ldx #3+$fa
4320 : b45f             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
4322 : 98                       tya
4323 : 9d0931                   sta abst-$fa,x      ;no STX abs,x!
4326 : ca                       dex
4327 : e0fa                     cpx #$fa
4329 : b0f5                     bcs tldy4                  
432b : a2fd                     ldx #3+$fa
432d : bc1d31           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
4330 : 9458                     sty zpt-$fa&$ff,x
4332 : ca                       dex
4333 : e0fa                     cpx #$fa
4335 : b0f6                     bcs tldy5                  
4337 : a203                     ldx #3      ;testing wraparound result
4339 : a000                     ldy #0
433b : b552             tsty1   lda zpt,x
433d : d559                     cmp zp1,x
                                trap_ne     ;store to zp,x data
433f : f003            >        beq skip0904
                       >        trap            ;failed not equal (non zero)
4341 : 20df73          >        jsr report_error
                       >
4344 :                 >skip0904
                        
4344 : 9452                     sty zpt,x   ;clear                
4346 : bd0332                   lda abst,x
4349 : dd1732                   cmp abs1,x
                                trap_ne     ;store to abs,x data
434c : f003            >        beq skip0906
                       >        trap            ;failed not equal (non zero)
434e : 20df73          >        jsr report_error
                       >
4351 :                 >skip0906
                        
4351 : 8a                       txa
4352 : 9d0332                   sta abst,x  ;clear                
4355 : ca                       dex
4356 : 10e3                     bpl tsty1
                                next_test
4358 : ad0032          >            lda test_case   ;previous test
435b : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
435d : f003            >        beq skip0909
                       >        trap            ;failed not equal (non zero)
435f : 20df73          >        jsr report_error
                       >
4362 :                 >skip0909
                       >
0013 =                 >test_num = test_num + 1
4362 : a913            >            lda #test_num   ;*** next tests' number
4364 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
4367 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
4369 : 48              >            pha         ;use stack to load status
436a : 28              >            plp
                        
436b : a659                     ldx zp1
436d : 08                       php         ;test stores do not alter flags
436e : 8a                       txa
436f : 49c3                     eor #$c3
4371 : aa                       tax
4372 : 28                       plp
4373 : 8e0332                   stx abst
4376 : 08                       php         ;flags after load/store sequence
4377 : 49c3                     eor #$c3
4379 : aa                       tax
437a : e0c3                     cpx #$c3    ;test result
                                trap_ne
437c : f003            >        beq skip0913
                       >        trap            ;failed not equal (non zero)
437e : 20df73          >        jsr report_error
                       >
4381 :                 >skip0913
                        
4381 : 68                       pla         ;load status
                                eor_flag 0
4382 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4384 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4387 : f003            >        beq skip0916
                       >        trap            ;failed not equal (non zero)
4389 : 20df73          >        jsr report_error
                       >
438c :                 >skip0916
                        
                                set_stat 0
                       >            load_flag 0
438c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
438e : 48              >            pha         ;use stack to load status
438f : 28              >            plp
                        
4390 : a65a                     ldx zp1+1
4392 : 08                       php         ;test stores do not alter flags
4393 : 8a                       txa
4394 : 49c3                     eor #$c3
4396 : aa                       tax
4397 : 28                       plp
4398 : 8e0432                   stx abst+1
439b : 08                       php         ;flags after load/store sequence
439c : 49c3                     eor #$c3
439e : aa                       tax
439f : e082                     cpx #$82    ;test result
                                trap_ne
43a1 : f003            >        beq skip0920
                       >        trap            ;failed not equal (non zero)
43a3 : 20df73          >        jsr report_error
                       >
43a6 :                 >skip0920
                        
43a6 : 68                       pla         ;load status
                                eor_flag 0
43a7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
43a9 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
43ac : f003            >        beq skip0923
                       >        trap            ;failed not equal (non zero)
43ae : 20df73          >        jsr report_error
                       >
43b1 :                 >skip0923
                        
                                set_stat 0
                       >            load_flag 0
43b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43b3 : 48              >            pha         ;use stack to load status
43b4 : 28              >            plp
                        
43b5 : a65b                     ldx zp1+2
43b7 : 08                       php         ;test stores do not alter flags
43b8 : 8a                       txa
43b9 : 49c3                     eor #$c3
43bb : aa                       tax
43bc : 28                       plp
43bd : 8e0532                   stx abst+2
43c0 : 08                       php         ;flags after load/store sequence
43c1 : 49c3                     eor #$c3
43c3 : aa                       tax
43c4 : e041                     cpx #$41    ;test result
                                trap_ne
43c6 : f003            >        beq skip0927
                       >        trap            ;failed not equal (non zero)
43c8 : 20df73          >        jsr report_error
                       >
43cb :                 >skip0927
                        
43cb : 68                       pla         ;load status
                                eor_flag 0
43cc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
43ce : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
43d1 : f003            >        beq skip0930
                       >        trap            ;failed not equal (non zero)
43d3 : 20df73          >        jsr report_error
                       >
43d6 :                 >skip0930
                        
                                set_stat 0
                       >            load_flag 0
43d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43d8 : 48              >            pha         ;use stack to load status
43d9 : 28              >            plp
                        
43da : a65c                     ldx zp1+3
43dc : 08                       php         ;test stores do not alter flags
43dd : 8a                       txa
43de : 49c3                     eor #$c3
43e0 : aa                       tax
43e1 : 28                       plp
43e2 : 8e0632                   stx abst+3
43e5 : 08                       php         ;flags after load/store sequence
43e6 : 49c3                     eor #$c3
43e8 : aa                       tax
43e9 : e000                     cpx #0      ;test result
                                trap_ne
43eb : f003            >        beq skip0934
                       >        trap            ;failed not equal (non zero)
43ed : 20df73          >        jsr report_error
                       >
43f0 :                 >skip0934
                        
43f0 : 68                       pla         ;load status
                                eor_flag 0
43f1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
43f3 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
43f6 : f003            >        beq skip0937
                       >        trap            ;failed not equal (non zero)
43f8 : 20df73          >        jsr report_error
                       >
43fb :                 >skip0937
                        
                        
                                set_stat $ff
                       >            load_flag $ff
43fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43fd : 48              >            pha         ;use stack to load status
43fe : 28              >            plp
                        
43ff : a659                     ldx zp1  
4401 : 08                       php         ;test stores do not alter flags
4402 : 8a                       txa
4403 : 49c3                     eor #$c3
4405 : aa                       tax
4406 : 28                       plp
4407 : 8e0332                   stx abst  
440a : 08                       php         ;flags after load/store sequence
440b : 49c3                     eor #$c3
440d : aa                       tax
440e : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
4410 : f003            >        beq skip0941
                       >        trap            ;failed not equal (non zero)
4412 : 20df73          >        jsr report_error
                       >
4415 :                 >skip0941
                        
4415 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4416 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4418 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
441b : f003            >        beq skip0944
                       >        trap            ;failed not equal (non zero)
441d : 20df73          >        jsr report_error
                       >
4420 :                 >skip0944
                        
                                set_stat $ff
                       >            load_flag $ff
4420 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4422 : 48              >            pha         ;use stack to load status
4423 : 28              >            plp
                        
4424 : a65a                     ldx zp1+1
4426 : 08                       php         ;test stores do not alter flags
4427 : 8a                       txa
4428 : 49c3                     eor #$c3
442a : aa                       tax
442b : 28                       plp
442c : 8e0432                   stx abst+1
442f : 08                       php         ;flags after load/store sequence
4430 : 49c3                     eor #$c3
4432 : aa                       tax
4433 : e082                     cpx #$82    ;test result
                                trap_ne
4435 : f003            >        beq skip0948
                       >        trap            ;failed not equal (non zero)
4437 : 20df73          >        jsr report_error
                       >
443a :                 >skip0948
                        
443a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
443b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
443d : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4440 : f003            >        beq skip0951
                       >        trap            ;failed not equal (non zero)
4442 : 20df73          >        jsr report_error
                       >
4445 :                 >skip0951
                        
                                set_stat $ff
                       >            load_flag $ff
4445 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4447 : 48              >            pha         ;use stack to load status
4448 : 28              >            plp
                        
4449 : a65b                     ldx zp1+2
444b : 08                       php         ;test stores do not alter flags
444c : 8a                       txa
444d : 49c3                     eor #$c3
444f : aa                       tax
4450 : 28                       plp
4451 : 8e0532                   stx abst+2
4454 : 08                       php         ;flags after load/store sequence
4455 : 49c3                     eor #$c3
4457 : aa                       tax
4458 : e041                     cpx #$41    ;test result
                                trap_ne     ;
445a : f003            >        beq skip0955
                       >        trap            ;failed not equal (non zero)
445c : 20df73          >        jsr report_error
                       >
445f :                 >skip0955
                        
445f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4460 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4462 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4465 : f003            >        beq skip0958
                       >        trap            ;failed not equal (non zero)
4467 : 20df73          >        jsr report_error
                       >
446a :                 >skip0958
                        
                                set_stat $ff
                       >            load_flag $ff
446a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
446c : 48              >            pha         ;use stack to load status
446d : 28              >            plp
                        
446e : a65c                     ldx zp1+3
4470 : 08                       php         ;test stores do not alter flags
4471 : 8a                       txa
4472 : 49c3                     eor #$c3
4474 : aa                       tax
4475 : 28                       plp
4476 : 8e0632                   stx abst+3
4479 : 08                       php         ;flags after load/store sequence
447a : 49c3                     eor #$c3
447c : aa                       tax
447d : e000                     cpx #0      ;test result
                                trap_ne
447f : f003            >        beq skip0962
                       >        trap            ;failed not equal (non zero)
4481 : 20df73          >        jsr report_error
                       >
4484 :                 >skip0962
                        
4484 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4485 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4487 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
448a : f003            >        beq skip0965
                       >        trap            ;failed not equal (non zero)
448c : 20df73          >        jsr report_error
                       >
448f :                 >skip0965
                        
                        
                                set_stat 0
                       >            load_flag 0
448f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4491 : 48              >            pha         ;use stack to load status
4492 : 28              >            plp
                        
4493 : ae1732                   ldx abs1  
4496 : 08                       php         ;test stores do not alter flags
4497 : 8a                       txa
4498 : 49c3                     eor #$c3
449a : aa                       tax
449b : 28                       plp
449c : 8652                     stx zpt  
449e : 08                       php         ;flags after load/store sequence
449f : 49c3                     eor #$c3
44a1 : c559                     cmp zp1     ;test result
                                trap_ne
44a3 : f003            >        beq skip0969
                       >        trap            ;failed not equal (non zero)
44a5 : 20df73          >        jsr report_error
                       >
44a8 :                 >skip0969
                        
44a8 : 68                       pla         ;load status
                                eor_flag 0
44a9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
44ab : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
44ae : f003            >        beq skip0972
                       >        trap            ;failed not equal (non zero)
44b0 : 20df73          >        jsr report_error
                       >
44b3 :                 >skip0972
                        
                                set_stat 0
                       >            load_flag 0
44b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44b5 : 48              >            pha         ;use stack to load status
44b6 : 28              >            plp
                        
44b7 : ae1832                   ldx abs1+1
44ba : 08                       php         ;test stores do not alter flags
44bb : 8a                       txa
44bc : 49c3                     eor #$c3
44be : aa                       tax
44bf : 28                       plp
44c0 : 8653                     stx zpt+1
44c2 : 08                       php         ;flags after load/store sequence
44c3 : 49c3                     eor #$c3
44c5 : c55a                     cmp zp1+1   ;test result
                                trap_ne
44c7 : f003            >        beq skip0976
                       >        trap            ;failed not equal (non zero)
44c9 : 20df73          >        jsr report_error
                       >
44cc :                 >skip0976
                        
44cc : 68                       pla         ;load status
                                eor_flag 0
44cd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
44cf : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
44d2 : f003            >        beq skip0979
                       >        trap            ;failed not equal (non zero)
44d4 : 20df73          >        jsr report_error
                       >
44d7 :                 >skip0979
                        
                                set_stat 0
                       >            load_flag 0
44d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44d9 : 48              >            pha         ;use stack to load status
44da : 28              >            plp
                        
44db : ae1932                   ldx abs1+2
44de : 08                       php         ;test stores do not alter flags
44df : 8a                       txa
44e0 : 49c3                     eor #$c3
44e2 : aa                       tax
44e3 : 28                       plp
44e4 : 8654                     stx zpt+2
44e6 : 08                       php         ;flags after load/store sequence
44e7 : 49c3                     eor #$c3
44e9 : c55b                     cmp zp1+2   ;test result
                                trap_ne
44eb : f003            >        beq skip0983
                       >        trap            ;failed not equal (non zero)
44ed : 20df73          >        jsr report_error
                       >
44f0 :                 >skip0983
                        
44f0 : 68                       pla         ;load status
                                eor_flag 0
44f1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
44f3 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
44f6 : f003            >        beq skip0986
                       >        trap            ;failed not equal (non zero)
44f8 : 20df73          >        jsr report_error
                       >
44fb :                 >skip0986
                        
                                set_stat 0
                       >            load_flag 0
44fb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44fd : 48              >            pha         ;use stack to load status
44fe : 28              >            plp
                        
44ff : ae1a32                   ldx abs1+3
4502 : 08                       php         ;test stores do not alter flags
4503 : 8a                       txa
4504 : 49c3                     eor #$c3
4506 : aa                       tax
4507 : 28                       plp
4508 : 8655                     stx zpt+3
450a : 08                       php         ;flags after load/store sequence
450b : 49c3                     eor #$c3
450d : c55c                     cmp zp1+3   ;test result
                                trap_ne
450f : f003            >        beq skip0990
                       >        trap            ;failed not equal (non zero)
4511 : 20df73          >        jsr report_error
                       >
4514 :                 >skip0990
                        
4514 : 68                       pla         ;load status
                                eor_flag 0
4515 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4517 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
451a : f003            >        beq skip0993
                       >        trap            ;failed not equal (non zero)
451c : 20df73          >        jsr report_error
                       >
451f :                 >skip0993
                        
                        
                                set_stat $ff
                       >            load_flag $ff
451f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4521 : 48              >            pha         ;use stack to load status
4522 : 28              >            plp
                        
4523 : ae1732                   ldx abs1  
4526 : 08                       php         ;test stores do not alter flags
4527 : 8a                       txa
4528 : 49c3                     eor #$c3
452a : aa                       tax
452b : 28                       plp
452c : 8652                     stx zpt  
452e : 08                       php         ;flags after load/store sequence
452f : 49c3                     eor #$c3
4531 : aa                       tax
4532 : e459                     cpx zp1     ;test result
                                trap_ne
4534 : f003            >        beq skip0997
                       >        trap            ;failed not equal (non zero)
4536 : 20df73          >        jsr report_error
                       >
4539 :                 >skip0997
                        
4539 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
453a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
453c : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
453f : f003            >        beq skip1000
                       >        trap            ;failed not equal (non zero)
4541 : 20df73          >        jsr report_error
                       >
4544 :                 >skip1000
                        
                                set_stat $ff
                       >            load_flag $ff
4544 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4546 : 48              >            pha         ;use stack to load status
4547 : 28              >            plp
                        
4548 : ae1832                   ldx abs1+1
454b : 08                       php         ;test stores do not alter flags
454c : 8a                       txa
454d : 49c3                     eor #$c3
454f : aa                       tax
4550 : 28                       plp
4551 : 8653                     stx zpt+1
4553 : 08                       php         ;flags after load/store sequence
4554 : 49c3                     eor #$c3
4556 : aa                       tax
4557 : e45a                     cpx zp1+1   ;test result
                                trap_ne
4559 : f003            >        beq skip1004
                       >        trap            ;failed not equal (non zero)
455b : 20df73          >        jsr report_error
                       >
455e :                 >skip1004
                        
455e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
455f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4561 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4564 : f003            >        beq skip1007
                       >        trap            ;failed not equal (non zero)
4566 : 20df73          >        jsr report_error
                       >
4569 :                 >skip1007
                        
                                set_stat $ff
                       >            load_flag $ff
4569 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
456b : 48              >            pha         ;use stack to load status
456c : 28              >            plp
                        
456d : ae1932                   ldx abs1+2
4570 : 08                       php         ;test stores do not alter flags
4571 : 8a                       txa
4572 : 49c3                     eor #$c3
4574 : aa                       tax
4575 : 28                       plp
4576 : 8654                     stx zpt+2
4578 : 08                       php         ;flags after load/store sequence
4579 : 49c3                     eor #$c3
457b : aa                       tax
457c : e45b                     cpx zp1+2   ;test result
                                trap_ne
457e : f003            >        beq skip1011
                       >        trap            ;failed not equal (non zero)
4580 : 20df73          >        jsr report_error
                       >
4583 :                 >skip1011
                        
4583 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4584 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4586 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4589 : f003            >        beq skip1014
                       >        trap            ;failed not equal (non zero)
458b : 20df73          >        jsr report_error
                       >
458e :                 >skip1014
                        
                                set_stat $ff
                       >            load_flag $ff
458e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4590 : 48              >            pha         ;use stack to load status
4591 : 28              >            plp
                        
4592 : ae1a32                   ldx abs1+3
4595 : 08                       php         ;test stores do not alter flags
4596 : 8a                       txa
4597 : 49c3                     eor #$c3
4599 : aa                       tax
459a : 28                       plp
459b : 8655                     stx zpt+3
459d : 08                       php         ;flags after load/store sequence
459e : 49c3                     eor #$c3
45a0 : aa                       tax
45a1 : e45c                     cpx zp1+3   ;test result
                                trap_ne
45a3 : f003            >        beq skip1018
                       >        trap            ;failed not equal (non zero)
45a5 : 20df73          >        jsr report_error
                       >
45a8 :                 >skip1018
                        
45a8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
45a9 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
45ab : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
45ae : f003            >        beq skip1021
                       >        trap            ;failed not equal (non zero)
45b0 : 20df73          >        jsr report_error
                       >
45b3 :                 >skip1021
                        
                        
                                set_stat 0  
                       >            load_flag 0  
45b3 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
45b5 : 48              >            pha         ;use stack to load status
45b6 : 28              >            plp
                        
45b7 : a2c3                     ldx #$c3
45b9 : 08                       php
45ba : ec1732                   cpx abs1    ;test result
                                trap_ne
45bd : f003            >        beq skip1025
                       >        trap            ;failed not equal (non zero)
45bf : 20df73          >        jsr report_error
                       >
45c2 :                 >skip1025
                        
45c2 : 68                       pla         ;load status
                                eor_flag 0
45c3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
45c5 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
45c8 : f003            >        beq skip1028
                       >        trap            ;failed not equal (non zero)
45ca : 20df73          >        jsr report_error
                       >
45cd :                 >skip1028
                        
                                set_stat 0
                       >            load_flag 0
45cd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45cf : 48              >            pha         ;use stack to load status
45d0 : 28              >            plp
                        
45d1 : a282                     ldx #$82
45d3 : 08                       php
45d4 : ec1832                   cpx abs1+1  ;test result
                                trap_ne
45d7 : f003            >        beq skip1032
                       >        trap            ;failed not equal (non zero)
45d9 : 20df73          >        jsr report_error
                       >
45dc :                 >skip1032
                        
45dc : 68                       pla         ;load status
                                eor_flag 0
45dd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
45df : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
45e2 : f003            >        beq skip1035
                       >        trap            ;failed not equal (non zero)
45e4 : 20df73          >        jsr report_error
                       >
45e7 :                 >skip1035
                        
                                set_stat 0
                       >            load_flag 0
45e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45e9 : 48              >            pha         ;use stack to load status
45ea : 28              >            plp
                        
45eb : a241                     ldx #$41
45ed : 08                       php
45ee : ec1932                   cpx abs1+2  ;test result
                                trap_ne
45f1 : f003            >        beq skip1039
                       >        trap            ;failed not equal (non zero)
45f3 : 20df73          >        jsr report_error
                       >
45f6 :                 >skip1039
                        
45f6 : 68                       pla         ;load status
                                eor_flag 0
45f7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
45f9 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
45fc : f003            >        beq skip1042
                       >        trap            ;failed not equal (non zero)
45fe : 20df73          >        jsr report_error
                       >
4601 :                 >skip1042
                        
                                set_stat 0
                       >            load_flag 0
4601 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4603 : 48              >            pha         ;use stack to load status
4604 : 28              >            plp
                        
4605 : a200                     ldx #0
4607 : 08                       php
4608 : ec1a32                   cpx abs1+3  ;test result
                                trap_ne
460b : f003            >        beq skip1046
                       >        trap            ;failed not equal (non zero)
460d : 20df73          >        jsr report_error
                       >
4610 :                 >skip1046
                        
4610 : 68                       pla         ;load status
                                eor_flag 0
4611 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4613 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4616 : f003            >        beq skip1049
                       >        trap            ;failed not equal (non zero)
4618 : 20df73          >        jsr report_error
                       >
461b :                 >skip1049
                        
                        
                                set_stat $ff
                       >            load_flag $ff
461b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
461d : 48              >            pha         ;use stack to load status
461e : 28              >            plp
                        
461f : a2c3                     ldx #$c3  
4621 : 08                       php
4622 : ec1732                   cpx abs1    ;test result
                                trap_ne
4625 : f003            >        beq skip1053
                       >        trap            ;failed not equal (non zero)
4627 : 20df73          >        jsr report_error
                       >
462a :                 >skip1053
                        
462a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
462b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
462d : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4630 : f003            >        beq skip1056
                       >        trap            ;failed not equal (non zero)
4632 : 20df73          >        jsr report_error
                       >
4635 :                 >skip1056
                        
                                set_stat $ff
                       >            load_flag $ff
4635 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4637 : 48              >            pha         ;use stack to load status
4638 : 28              >            plp
                        
4639 : a282                     ldx #$82
463b : 08                       php
463c : ec1832                   cpx abs1+1  ;test result
                                trap_ne
463f : f003            >        beq skip1060
                       >        trap            ;failed not equal (non zero)
4641 : 20df73          >        jsr report_error
                       >
4644 :                 >skip1060
                        
4644 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4645 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4647 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
464a : f003            >        beq skip1063
                       >        trap            ;failed not equal (non zero)
464c : 20df73          >        jsr report_error
                       >
464f :                 >skip1063
                        
                                set_stat $ff
                       >            load_flag $ff
464f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4651 : 48              >            pha         ;use stack to load status
4652 : 28              >            plp
                        
4653 : a241                     ldx #$41
4655 : 08                       php
4656 : ec1932                   cpx abs1+2  ;test result
                                trap_ne
4659 : f003            >        beq skip1067
                       >        trap            ;failed not equal (non zero)
465b : 20df73          >        jsr report_error
                       >
465e :                 >skip1067
                        
465e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
465f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4661 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4664 : f003            >        beq skip1070
                       >        trap            ;failed not equal (non zero)
4666 : 20df73          >        jsr report_error
                       >
4669 :                 >skip1070
                        
                                set_stat $ff
                       >            load_flag $ff
4669 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
466b : 48              >            pha         ;use stack to load status
466c : 28              >            plp
                        
466d : a200                     ldx #0
466f : 08                       php
4670 : ec1a32                   cpx abs1+3  ;test result
                                trap_ne
4673 : f003            >        beq skip1074
                       >        trap            ;failed not equal (non zero)
4675 : 20df73          >        jsr report_error
                       >
4678 :                 >skip1074
                        
4678 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4679 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
467b : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
467e : f003            >        beq skip1077
                       >        trap            ;failed not equal (non zero)
4680 : 20df73          >        jsr report_error
                       >
4683 :                 >skip1077
                        
                        
4683 : a200                     ldx #0
4685 : a552                     lda zpt  
4687 : 49c3                     eor #$c3
4689 : c559                     cmp zp1  
                                trap_ne     ;store to zp data
468b : f003            >        beq skip1079
                       >        trap            ;failed not equal (non zero)
468d : 20df73          >        jsr report_error
                       >
4690 :                 >skip1079
                        
4690 : 8652                     stx zpt     ;clear                
4692 : ad0332                   lda abst  
4695 : 49c3                     eor #$c3
4697 : cd1732                   cmp abs1  
                                trap_ne     ;store to abs data
469a : f003            >        beq skip1081
                       >        trap            ;failed not equal (non zero)
469c : 20df73          >        jsr report_error
                       >
469f :                 >skip1081
                        
469f : 8e0332                   stx abst    ;clear                
46a2 : a553                     lda zpt+1
46a4 : 49c3                     eor #$c3
46a6 : c55a                     cmp zp1+1
                                trap_ne     ;store to zp data
46a8 : f003            >        beq skip1083
                       >        trap            ;failed not equal (non zero)
46aa : 20df73          >        jsr report_error
                       >
46ad :                 >skip1083
                        
46ad : 8653                     stx zpt+1   ;clear                
46af : ad0432                   lda abst+1
46b2 : 49c3                     eor #$c3
46b4 : cd1832                   cmp abs1+1
                                trap_ne     ;store to abs data
46b7 : f003            >        beq skip1085
                       >        trap            ;failed not equal (non zero)
46b9 : 20df73          >        jsr report_error
                       >
46bc :                 >skip1085
                        
46bc : 8e0432                   stx abst+1  ;clear                
46bf : a554                     lda zpt+2
46c1 : 49c3                     eor #$c3
46c3 : c55b                     cmp zp1+2
                                trap_ne     ;store to zp data
46c5 : f003            >        beq skip1087
                       >        trap            ;failed not equal (non zero)
46c7 : 20df73          >        jsr report_error
                       >
46ca :                 >skip1087
                        
46ca : 8654                     stx zpt+2   ;clear                
46cc : ad0532                   lda abst+2
46cf : 49c3                     eor #$c3
46d1 : cd1932                   cmp abs1+2
                                trap_ne     ;store to abs data
46d4 : f003            >        beq skip1089
                       >        trap            ;failed not equal (non zero)
46d6 : 20df73          >        jsr report_error
                       >
46d9 :                 >skip1089
                        
46d9 : 8e0532                   stx abst+2  ;clear                
46dc : a555                     lda zpt+3
46de : 49c3                     eor #$c3
46e0 : c55c                     cmp zp1+3
                                trap_ne     ;store to zp data
46e2 : f003            >        beq skip1091
                       >        trap            ;failed not equal (non zero)
46e4 : 20df73          >        jsr report_error
                       >
46e7 :                 >skip1091
                        
46e7 : 8655                     stx zpt+3   ;clear                
46e9 : ad0632                   lda abst+3
46ec : 49c3                     eor #$c3
46ee : cd1a32                   cmp abs1+3
                                trap_ne     ;store to abs data
46f1 : f003            >        beq skip1093
                       >        trap            ;failed not equal (non zero)
46f3 : 20df73          >        jsr report_error
                       >
46f6 :                 >skip1093
                        
46f6 : 8e0632                   stx abst+3  ;clear                
                                next_test
46f9 : ad0032          >            lda test_case   ;previous test
46fc : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
46fe : f003            >        beq skip1096
                       >        trap            ;failed not equal (non zero)
4700 : 20df73          >        jsr report_error
                       >
4703 :                 >skip1096
                       >
0014 =                 >test_num = test_num + 1
4703 : a914            >            lda #test_num   ;*** next tests' number
4705 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
4708 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
470a : 48              >            pha         ;use stack to load status
470b : 28              >            plp
                        
470c : a459                     ldy zp1  
470e : 08                       php         ;test stores do not alter flags
470f : 98                       tya
4710 : 49c3                     eor #$c3
4712 : a8                       tay
4713 : 28                       plp
4714 : 8c0332                   sty abst  
4717 : 08                       php         ;flags after load/store sequence
4718 : 49c3                     eor #$c3
471a : a8                       tay
471b : c0c3                     cpy #$c3    ;test result
                                trap_ne
471d : f003            >        beq skip1100
                       >        trap            ;failed not equal (non zero)
471f : 20df73          >        jsr report_error
                       >
4722 :                 >skip1100
                        
4722 : 68                       pla         ;load status
                                eor_flag 0
4723 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4725 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4728 : f003            >        beq skip1103
                       >        trap            ;failed not equal (non zero)
472a : 20df73          >        jsr report_error
                       >
472d :                 >skip1103
                        
                                set_stat 0
                       >            load_flag 0
472d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
472f : 48              >            pha         ;use stack to load status
4730 : 28              >            plp
                        
4731 : a45a                     ldy zp1+1
4733 : 08                       php         ;test stores do not alter flags
4734 : 98                       tya
4735 : 49c3                     eor #$c3
4737 : a8                       tay
4738 : 28                       plp
4739 : 8c0432                   sty abst+1
473c : 08                       php         ;flags after load/store sequence
473d : 49c3                     eor #$c3
473f : a8                       tay
4740 : c082                     cpy #$82    ;test result
                                trap_ne
4742 : f003            >        beq skip1107
                       >        trap            ;failed not equal (non zero)
4744 : 20df73          >        jsr report_error
                       >
4747 :                 >skip1107
                        
4747 : 68                       pla         ;load status
                                eor_flag 0
4748 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
474a : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
474d : f003            >        beq skip1110
                       >        trap            ;failed not equal (non zero)
474f : 20df73          >        jsr report_error
                       >
4752 :                 >skip1110
                        
                                set_stat 0
                       >            load_flag 0
4752 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4754 : 48              >            pha         ;use stack to load status
4755 : 28              >            plp
                        
4756 : a45b                     ldy zp1+2
4758 : 08                       php         ;test stores do not alter flags
4759 : 98                       tya
475a : 49c3                     eor #$c3
475c : a8                       tay
475d : 28                       plp
475e : 8c0532                   sty abst+2
4761 : 08                       php         ;flags after load/store sequence
4762 : 49c3                     eor #$c3
4764 : a8                       tay
4765 : c041                     cpy #$41    ;test result
                                trap_ne
4767 : f003            >        beq skip1114
                       >        trap            ;failed not equal (non zero)
4769 : 20df73          >        jsr report_error
                       >
476c :                 >skip1114
                        
476c : 68                       pla         ;load status
                                eor_flag 0
476d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
476f : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4772 : f003            >        beq skip1117
                       >        trap            ;failed not equal (non zero)
4774 : 20df73          >        jsr report_error
                       >
4777 :                 >skip1117
                        
                                set_stat 0
                       >            load_flag 0
4777 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4779 : 48              >            pha         ;use stack to load status
477a : 28              >            plp
                        
477b : a45c                     ldy zp1+3
477d : 08                       php         ;test stores do not alter flags
477e : 98                       tya
477f : 49c3                     eor #$c3
4781 : a8                       tay
4782 : 28                       plp
4783 : 8c0632                   sty abst+3
4786 : 08                       php         ;flags after load/store sequence
4787 : 49c3                     eor #$c3
4789 : a8                       tay
478a : c000                     cpy #0      ;test result
                                trap_ne
478c : f003            >        beq skip1121
                       >        trap            ;failed not equal (non zero)
478e : 20df73          >        jsr report_error
                       >
4791 :                 >skip1121
                        
4791 : 68                       pla         ;load status
                                eor_flag 0
4792 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4794 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4797 : f003            >        beq skip1124
                       >        trap            ;failed not equal (non zero)
4799 : 20df73          >        jsr report_error
                       >
479c :                 >skip1124
                        
                        
                                set_stat $ff
                       >            load_flag $ff
479c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
479e : 48              >            pha         ;use stack to load status
479f : 28              >            plp
                        
47a0 : a459                     ldy zp1  
47a2 : 08                       php         ;test stores do not alter flags
47a3 : 98                       tya
47a4 : 49c3                     eor #$c3
47a6 : a8                       tay
47a7 : 28                       plp
47a8 : 8c0332                   sty abst  
47ab : 08                       php         ;flags after load/store sequence
47ac : 49c3                     eor #$c3
47ae : a8                       tay
47af : c0c3                     cpy #$c3    ;test result
                                trap_ne
47b1 : f003            >        beq skip1128
                       >        trap            ;failed not equal (non zero)
47b3 : 20df73          >        jsr report_error
                       >
47b6 :                 >skip1128
                        
47b6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
47b7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
47b9 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
47bc : f003            >        beq skip1131
                       >        trap            ;failed not equal (non zero)
47be : 20df73          >        jsr report_error
                       >
47c1 :                 >skip1131
                        
                                set_stat $ff
                       >            load_flag $ff
47c1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
47c3 : 48              >            pha         ;use stack to load status
47c4 : 28              >            plp
                        
47c5 : a45a                     ldy zp1+1
47c7 : 08                       php         ;test stores do not alter flags
47c8 : 98                       tya
47c9 : 49c3                     eor #$c3
47cb : a8                       tay
47cc : 28                       plp
47cd : 8c0432                   sty abst+1
47d0 : 08                       php         ;flags after load/store sequence
47d1 : 49c3                     eor #$c3
47d3 : a8                       tay
47d4 : c082                     cpy #$82   ;test result
                                trap_ne
47d6 : f003            >        beq skip1135
                       >        trap            ;failed not equal (non zero)
47d8 : 20df73          >        jsr report_error
                       >
47db :                 >skip1135
                        
47db : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
47dc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
47de : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
47e1 : f003            >        beq skip1138
                       >        trap            ;failed not equal (non zero)
47e3 : 20df73          >        jsr report_error
                       >
47e6 :                 >skip1138
                        
                                set_stat $ff
                       >            load_flag $ff
47e6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
47e8 : 48              >            pha         ;use stack to load status
47e9 : 28              >            plp
                        
47ea : a45b                     ldy zp1+2
47ec : 08                       php         ;test stores do not alter flags
47ed : 98                       tya
47ee : 49c3                     eor #$c3
47f0 : a8                       tay
47f1 : 28                       plp
47f2 : 8c0532                   sty abst+2
47f5 : 08                       php         ;flags after load/store sequence
47f6 : 49c3                     eor #$c3
47f8 : a8                       tay
47f9 : c041                     cpy #$41    ;test result
                                trap_ne
47fb : f003            >        beq skip1142
                       >        trap            ;failed not equal (non zero)
47fd : 20df73          >        jsr report_error
                       >
4800 :                 >skip1142
                        
4800 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4801 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4803 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4806 : f003            >        beq skip1145
                       >        trap            ;failed not equal (non zero)
4808 : 20df73          >        jsr report_error
                       >
480b :                 >skip1145
                        
                                set_stat $ff
                       >            load_flag $ff
480b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
480d : 48              >            pha         ;use stack to load status
480e : 28              >            plp
                        
480f : a45c                     ldy zp1+3
4811 : 08                       php         ;test stores do not alter flags
4812 : 98                       tya
4813 : 49c3                     eor #$c3
4815 : a8                       tay
4816 : 28                       plp
4817 : 8c0632                   sty abst+3
481a : 08                       php         ;flags after load/store sequence
481b : 49c3                     eor #$c3
481d : a8                       tay
481e : c000                     cpy #0      ;test result
                                trap_ne
4820 : f003            >        beq skip1149
                       >        trap            ;failed not equal (non zero)
4822 : 20df73          >        jsr report_error
                       >
4825 :                 >skip1149
                        
4825 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4826 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4828 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
482b : f003            >        beq skip1152
                       >        trap            ;failed not equal (non zero)
482d : 20df73          >        jsr report_error
                       >
4830 :                 >skip1152
                        
                                
                                set_stat 0
                       >            load_flag 0
4830 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4832 : 48              >            pha         ;use stack to load status
4833 : 28              >            plp
                        
4834 : ac1732                   ldy abs1  
4837 : 08                       php         ;test stores do not alter flags
4838 : 98                       tya
4839 : 49c3                     eor #$c3
483b : a8                       tay
483c : 28                       plp
483d : 8452                     sty zpt  
483f : 08                       php         ;flags after load/store sequence
4840 : 49c3                     eor #$c3
4842 : a8                       tay
4843 : c459                     cpy zp1     ;test result
                                trap_ne
4845 : f003            >        beq skip1156
                       >        trap            ;failed not equal (non zero)
4847 : 20df73          >        jsr report_error
                       >
484a :                 >skip1156
                        
484a : 68                       pla         ;load status
                                eor_flag 0
484b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
484d : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4850 : f003            >        beq skip1159
                       >        trap            ;failed not equal (non zero)
4852 : 20df73          >        jsr report_error
                       >
4855 :                 >skip1159
                        
                                set_stat 0
                       >            load_flag 0
4855 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4857 : 48              >            pha         ;use stack to load status
4858 : 28              >            plp
                        
4859 : ac1832                   ldy abs1+1
485c : 08                       php         ;test stores do not alter flags
485d : 98                       tya
485e : 49c3                     eor #$c3
4860 : a8                       tay
4861 : 28                       plp
4862 : 8453                     sty zpt+1
4864 : 08                       php         ;flags after load/store sequence
4865 : 49c3                     eor #$c3
4867 : a8                       tay
4868 : c45a                     cpy zp1+1   ;test result
                                trap_ne
486a : f003            >        beq skip1163
                       >        trap            ;failed not equal (non zero)
486c : 20df73          >        jsr report_error
                       >
486f :                 >skip1163
                        
486f : 68                       pla         ;load status
                                eor_flag 0
4870 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4872 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4875 : f003            >        beq skip1166
                       >        trap            ;failed not equal (non zero)
4877 : 20df73          >        jsr report_error
                       >
487a :                 >skip1166
                        
                                set_stat 0
                       >            load_flag 0
487a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
487c : 48              >            pha         ;use stack to load status
487d : 28              >            plp
                        
487e : ac1932                   ldy abs1+2
4881 : 08                       php         ;test stores do not alter flags
4882 : 98                       tya
4883 : 49c3                     eor #$c3
4885 : a8                       tay
4886 : 28                       plp
4887 : 8454                     sty zpt+2
4889 : 08                       php         ;flags after load/store sequence
488a : 49c3                     eor #$c3
488c : a8                       tay
488d : c45b                     cpy zp1+2   ;test result
                                trap_ne
488f : f003            >        beq skip1170
                       >        trap            ;failed not equal (non zero)
4891 : 20df73          >        jsr report_error
                       >
4894 :                 >skip1170
                        
4894 : 68                       pla         ;load status
                                eor_flag 0
4895 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4897 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
489a : f003            >        beq skip1173
                       >        trap            ;failed not equal (non zero)
489c : 20df73          >        jsr report_error
                       >
489f :                 >skip1173
                        
                                set_stat 0
                       >            load_flag 0
489f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
48a1 : 48              >            pha         ;use stack to load status
48a2 : 28              >            plp
                        
48a3 : ac1a32                   ldy abs1+3
48a6 : 08                       php         ;test stores do not alter flags
48a7 : 98                       tya
48a8 : 49c3                     eor #$c3
48aa : a8                       tay
48ab : 28                       plp
48ac : 8455                     sty zpt+3
48ae : 08                       php         ;flags after load/store sequence
48af : 49c3                     eor #$c3
48b1 : a8                       tay
48b2 : c45c                     cpy zp1+3   ;test result
                                trap_ne
48b4 : f003            >        beq skip1177
                       >        trap            ;failed not equal (non zero)
48b6 : 20df73          >        jsr report_error
                       >
48b9 :                 >skip1177
                        
48b9 : 68                       pla         ;load status
                                eor_flag 0
48ba : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
48bc : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
48bf : f003            >        beq skip1180
                       >        trap            ;failed not equal (non zero)
48c1 : 20df73          >        jsr report_error
                       >
48c4 :                 >skip1180
                        
                        
                                set_stat $ff
                       >            load_flag $ff
48c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
48c6 : 48              >            pha         ;use stack to load status
48c7 : 28              >            plp
                        
48c8 : ac1732                   ldy abs1  
48cb : 08                       php         ;test stores do not alter flags
48cc : 98                       tya
48cd : 49c3                     eor #$c3
48cf : a8                       tay
48d0 : 28                       plp
48d1 : 8452                     sty zpt  
48d3 : 08                       php         ;flags after load/store sequence
48d4 : 49c3                     eor #$c3
48d6 : a8                       tay
48d7 : c559                     cmp zp1     ;test result
                                trap_ne
48d9 : f003            >        beq skip1184
                       >        trap            ;failed not equal (non zero)
48db : 20df73          >        jsr report_error
                       >
48de :                 >skip1184
                        
48de : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
48df : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
48e1 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
48e4 : f003            >        beq skip1187
                       >        trap            ;failed not equal (non zero)
48e6 : 20df73          >        jsr report_error
                       >
48e9 :                 >skip1187
                        
                                set_stat $ff
                       >            load_flag $ff
48e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
48eb : 48              >            pha         ;use stack to load status
48ec : 28              >            plp
                        
48ed : ac1832                   ldy abs1+1
48f0 : 08                       php         ;test stores do not alter flags
48f1 : 98                       tya
48f2 : 49c3                     eor #$c3
48f4 : a8                       tay
48f5 : 28                       plp
48f6 : 8453                     sty zpt+1
48f8 : 08                       php         ;flags after load/store sequence
48f9 : 49c3                     eor #$c3
48fb : a8                       tay
48fc : c55a                     cmp zp1+1   ;test result
                                trap_ne
48fe : f003            >        beq skip1191
                       >        trap            ;failed not equal (non zero)
4900 : 20df73          >        jsr report_error
                       >
4903 :                 >skip1191
                        
4903 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4904 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4906 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4909 : f003            >        beq skip1194
                       >        trap            ;failed not equal (non zero)
490b : 20df73          >        jsr report_error
                       >
490e :                 >skip1194
                        
                                set_stat $ff
                       >            load_flag $ff
490e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4910 : 48              >            pha         ;use stack to load status
4911 : 28              >            plp
                        
4912 : ac1932                   ldy abs1+2
4915 : 08                       php         ;test stores do not alter flags
4916 : 98                       tya
4917 : 49c3                     eor #$c3
4919 : a8                       tay
491a : 28                       plp
491b : 8454                     sty zpt+2
491d : 08                       php         ;flags after load/store sequence
491e : 49c3                     eor #$c3
4920 : a8                       tay
4921 : c55b                     cmp zp1+2   ;test result
                                trap_ne
4923 : f003            >        beq skip1198
                       >        trap            ;failed not equal (non zero)
4925 : 20df73          >        jsr report_error
                       >
4928 :                 >skip1198
                        
4928 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4929 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
492b : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
492e : f003            >        beq skip1201
                       >        trap            ;failed not equal (non zero)
4930 : 20df73          >        jsr report_error
                       >
4933 :                 >skip1201
                        
                                set_stat $ff
                       >            load_flag $ff
4933 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4935 : 48              >            pha         ;use stack to load status
4936 : 28              >            plp
                        
4937 : ac1a32                   ldy abs1+3
493a : 08                       php         ;test stores do not alter flags
493b : 98                       tya
493c : 49c3                     eor #$c3
493e : a8                       tay
493f : 28                       plp
4940 : 8455                     sty zpt+3
4942 : 08                       php         ;flags after load/store sequence
4943 : 49c3                     eor #$c3
4945 : a8                       tay
4946 : c55c                     cmp zp1+3   ;test result
                                trap_ne
4948 : f003            >        beq skip1205
                       >        trap            ;failed not equal (non zero)
494a : 20df73          >        jsr report_error
                       >
494d :                 >skip1205
                        
494d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
494e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4950 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4953 : f003            >        beq skip1208
                       >        trap            ;failed not equal (non zero)
4955 : 20df73          >        jsr report_error
                       >
4958 :                 >skip1208
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
4958 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
495a : 48              >            pha         ;use stack to load status
495b : 28              >            plp
                        
495c : a0c3                     ldy #$c3  
495e : 08                       php
495f : cc1732                   cpy abs1    ;test result
                                trap_ne
4962 : f003            >        beq skip1212
                       >        trap            ;failed not equal (non zero)
4964 : 20df73          >        jsr report_error
                       >
4967 :                 >skip1212
                        
4967 : 68                       pla         ;load status
                                eor_flag 0
4968 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
496a : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
496d : f003            >        beq skip1215
                       >        trap            ;failed not equal (non zero)
496f : 20df73          >        jsr report_error
                       >
4972 :                 >skip1215
                        
                                set_stat 0
                       >            load_flag 0
4972 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4974 : 48              >            pha         ;use stack to load status
4975 : 28              >            plp
                        
4976 : a082                     ldy #$82
4978 : 08                       php
4979 : cc1832                   cpy abs1+1  ;test result
                                trap_ne
497c : f003            >        beq skip1219
                       >        trap            ;failed not equal (non zero)
497e : 20df73          >        jsr report_error
                       >
4981 :                 >skip1219
                        
4981 : 68                       pla         ;load status
                                eor_flag 0
4982 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4984 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4987 : f003            >        beq skip1222
                       >        trap            ;failed not equal (non zero)
4989 : 20df73          >        jsr report_error
                       >
498c :                 >skip1222
                        
                                set_stat 0
                       >            load_flag 0
498c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
498e : 48              >            pha         ;use stack to load status
498f : 28              >            plp
                        
4990 : a041                     ldy #$41
4992 : 08                       php
4993 : cc1932                   cpy abs1+2  ;test result
                                trap_ne
4996 : f003            >        beq skip1226
                       >        trap            ;failed not equal (non zero)
4998 : 20df73          >        jsr report_error
                       >
499b :                 >skip1226
                        
499b : 68                       pla         ;load status
                                eor_flag 0
499c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
499e : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
49a1 : f003            >        beq skip1229
                       >        trap            ;failed not equal (non zero)
49a3 : 20df73          >        jsr report_error
                       >
49a6 :                 >skip1229
                        
                                set_stat 0
                       >            load_flag 0
49a6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
49a8 : 48              >            pha         ;use stack to load status
49a9 : 28              >            plp
                        
49aa : a000                     ldy #0
49ac : 08                       php
49ad : cc1a32                   cpy abs1+3  ;test result
                                trap_ne
49b0 : f003            >        beq skip1233
                       >        trap            ;failed not equal (non zero)
49b2 : 20df73          >        jsr report_error
                       >
49b5 :                 >skip1233
                        
49b5 : 68                       pla         ;load status
                                eor_flag 0
49b6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
49b8 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
49bb : f003            >        beq skip1236
                       >        trap            ;failed not equal (non zero)
49bd : 20df73          >        jsr report_error
                       >
49c0 :                 >skip1236
                        
                        
                                set_stat $ff
                       >            load_flag $ff
49c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49c2 : 48              >            pha         ;use stack to load status
49c3 : 28              >            plp
                        
49c4 : a0c3                     ldy #$c3  
49c6 : 08                       php
49c7 : cc1732                   cpy abs1    ;test result
                                trap_ne
49ca : f003            >        beq skip1240
                       >        trap            ;failed not equal (non zero)
49cc : 20df73          >        jsr report_error
                       >
49cf :                 >skip1240
                        
49cf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
49d0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
49d2 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
49d5 : f003            >        beq skip1243
                       >        trap            ;failed not equal (non zero)
49d7 : 20df73          >        jsr report_error
                       >
49da :                 >skip1243
                        
                                set_stat $ff
                       >            load_flag $ff
49da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49dc : 48              >            pha         ;use stack to load status
49dd : 28              >            plp
                        
49de : a082                     ldy #$82
49e0 : 08                       php
49e1 : cc1832                   cpy abs1+1  ;test result
                                trap_ne
49e4 : f003            >        beq skip1247
                       >        trap            ;failed not equal (non zero)
49e6 : 20df73          >        jsr report_error
                       >
49e9 :                 >skip1247
                        
49e9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
49ea : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
49ec : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
49ef : f003            >        beq skip1250
                       >        trap            ;failed not equal (non zero)
49f1 : 20df73          >        jsr report_error
                       >
49f4 :                 >skip1250
                        
                                set_stat $ff
                       >            load_flag $ff
49f4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
49f6 : 48              >            pha         ;use stack to load status
49f7 : 28              >            plp
                        
49f8 : a041                     ldy #$41
49fa : 08                       php
49fb : cc1932                   cpy abs1+2   ;test result
                                trap_ne
49fe : f003            >        beq skip1254
                       >        trap            ;failed not equal (non zero)
4a00 : 20df73          >        jsr report_error
                       >
4a03 :                 >skip1254
                        
4a03 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4a04 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4a06 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4a09 : f003            >        beq skip1257
                       >        trap            ;failed not equal (non zero)
4a0b : 20df73          >        jsr report_error
                       >
4a0e :                 >skip1257
                        
                                set_stat $ff
                       >            load_flag $ff
4a0e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a10 : 48              >            pha         ;use stack to load status
4a11 : 28              >            plp
                        
4a12 : a000                     ldy #0
4a14 : 08                       php
4a15 : cc1a32                   cpy abs1+3  ;test result
                                trap_ne
4a18 : f003            >        beq skip1261
                       >        trap            ;failed not equal (non zero)
4a1a : 20df73          >        jsr report_error
                       >
4a1d :                 >skip1261
                        
4a1d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4a1e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4a20 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4a23 : f003            >        beq skip1264
                       >        trap            ;failed not equal (non zero)
4a25 : 20df73          >        jsr report_error
                       >
4a28 :                 >skip1264
                        
                                
4a28 : a000                     ldy #0
4a2a : a552                     lda zpt  
4a2c : 49c3                     eor #$c3
4a2e : c559                     cmp zp1  
                                trap_ne     ;store to zp   data
4a30 : f003            >        beq skip1266
                       >        trap            ;failed not equal (non zero)
4a32 : 20df73          >        jsr report_error
                       >
4a35 :                 >skip1266
                        
4a35 : 8452                     sty zpt     ;clear                
4a37 : ad0332                   lda abst  
4a3a : 49c3                     eor #$c3
4a3c : cd1732                   cmp abs1  
                                trap_ne     ;store to abs   data
4a3f : f003            >        beq skip1268
                       >        trap            ;failed not equal (non zero)
4a41 : 20df73          >        jsr report_error
                       >
4a44 :                 >skip1268
                        
4a44 : 8c0332                   sty abst    ;clear                
4a47 : a553                     lda zpt+1
4a49 : 49c3                     eor #$c3
4a4b : c55a                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
4a4d : f003            >        beq skip1270
                       >        trap            ;failed not equal (non zero)
4a4f : 20df73          >        jsr report_error
                       >
4a52 :                 >skip1270
                        
4a52 : 8453                     sty zpt+1   ;clear                
4a54 : ad0432                   lda abst+1
4a57 : 49c3                     eor #$c3
4a59 : cd1832                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
4a5c : f003            >        beq skip1272
                       >        trap            ;failed not equal (non zero)
4a5e : 20df73          >        jsr report_error
                       >
4a61 :                 >skip1272
                        
4a61 : 8c0432                   sty abst+1  ;clear                
4a64 : a554                     lda zpt+2
4a66 : 49c3                     eor #$c3
4a68 : c55b                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
4a6a : f003            >        beq skip1274
                       >        trap            ;failed not equal (non zero)
4a6c : 20df73          >        jsr report_error
                       >
4a6f :                 >skip1274
                        
4a6f : 8454                     sty zpt+2   ;clear                
4a71 : ad0532                   lda abst+2
4a74 : 49c3                     eor #$c3
4a76 : cd1932                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
4a79 : f003            >        beq skip1276
                       >        trap            ;failed not equal (non zero)
4a7b : 20df73          >        jsr report_error
                       >
4a7e :                 >skip1276
                        
4a7e : 8c0532                   sty abst+2  ;clear                
4a81 : a555                     lda zpt+3
4a83 : 49c3                     eor #$c3
4a85 : c55c                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
4a87 : f003            >        beq skip1278
                       >        trap            ;failed not equal (non zero)
4a89 : 20df73          >        jsr report_error
                       >
4a8c :                 >skip1278
                        
4a8c : 8455                     sty zpt+3   ;clear                
4a8e : ad0632                   lda abst+3
4a91 : 49c3                     eor #$c3
4a93 : cd1a32                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
4a96 : f003            >        beq skip1280
                       >        trap            ;failed not equal (non zero)
4a98 : 20df73          >        jsr report_error
                       >
4a9b :                 >skip1280
                        
4a9b : 8c0632                   sty abst+3  ;clear                
                                next_test
4a9e : ad0032          >            lda test_case   ;previous test
4aa1 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4aa3 : f003            >        beq skip1283
                       >        trap            ;failed not equal (non zero)
4aa5 : 20df73          >        jsr report_error
                       >
4aa8 :                 >skip1283
                       >
0015 =                 >test_num = test_num + 1
4aa8 : a915            >            lda #test_num   ;*** next tests' number
4aaa : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
4aad : a203                     ldx #3
4aaf :                  tldax    
                                set_stat 0
                       >            load_flag 0
4aaf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4ab1 : 48              >            pha         ;use stack to load status
4ab2 : 28              >            plp
                        
4ab3 : b559                     lda zp1,x
4ab5 : 08                       php         ;test stores do not alter flags
4ab6 : 49c3                     eor #$c3
4ab8 : 28                       plp
4ab9 : 9d0332                   sta abst,x
4abc : 08                       php         ;flags after load/store sequence
4abd : 49c3                     eor #$c3
4abf : dd1732                   cmp abs1,x  ;test result
                                trap_ne
4ac2 : f003            >        beq skip1287
                       >        trap            ;failed not equal (non zero)
4ac4 : 20df73          >        jsr report_error
                       >
4ac7 :                 >skip1287
                        
4ac7 : 68                       pla         ;load status
                                eor_flag 0
4ac8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4aca : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4acd : f003            >        beq skip1290
                       >        trap            ;failed not equal (non zero)
4acf : 20df73          >        jsr report_error
                       >
4ad2 :                 >skip1290
                        
4ad2 : ca                       dex
4ad3 : 10da                     bpl tldax                  
                        
4ad5 : a203                     ldx #3
4ad7 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
4ad7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ad9 : 48              >            pha         ;use stack to load status
4ada : 28              >            plp
                        
4adb : b559                     lda zp1,x
4add : 08                       php         ;test stores do not alter flags
4ade : 49c3                     eor #$c3
4ae0 : 28                       plp
4ae1 : 9d0332                   sta abst,x
4ae4 : 08                       php         ;flags after load/store sequence
4ae5 : 49c3                     eor #$c3
4ae7 : dd1732                   cmp abs1,x   ;test result
                                trap_ne
4aea : f003            >        beq skip1294
                       >        trap            ;failed not equal (non zero)
4aec : 20df73          >        jsr report_error
                       >
4aef :                 >skip1294
                        
4aef : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4af0 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4af2 : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4af5 : f003            >        beq skip1297
                       >        trap            ;failed not equal (non zero)
4af7 : 20df73          >        jsr report_error
                       >
4afa :                 >skip1297
                        
4afa : ca                       dex
4afb : 10da                     bpl tldax1                  
                        
4afd : a203                     ldx #3
4aff :                  tldax2   
                                set_stat 0
                       >            load_flag 0
4aff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b01 : 48              >            pha         ;use stack to load status
4b02 : 28              >            plp
                        
4b03 : bd1732                   lda abs1,x
4b06 : 08                       php         ;test stores do not alter flags
4b07 : 49c3                     eor #$c3
4b09 : 28                       plp
4b0a : 9552                     sta zpt,x
4b0c : 08                       php         ;flags after load/store sequence
4b0d : 49c3                     eor #$c3
4b0f : d559                     cmp zp1,x   ;test result
                                trap_ne
4b11 : f003            >        beq skip1301
                       >        trap            ;failed not equal (non zero)
4b13 : 20df73          >        jsr report_error
                       >
4b16 :                 >skip1301
                        
4b16 : 68                       pla         ;load status
                                eor_flag 0
4b17 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4b19 : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4b1c : f003            >        beq skip1304
                       >        trap            ;failed not equal (non zero)
4b1e : 20df73          >        jsr report_error
                       >
4b21 :                 >skip1304
                        
4b21 : ca                       dex
4b22 : 10db                     bpl tldax2                  
                        
4b24 : a203                     ldx #3
4b26 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
4b26 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4b28 : 48              >            pha         ;use stack to load status
4b29 : 28              >            plp
                        
4b2a : bd1732                   lda abs1,x
4b2d : 08                       php         ;test stores do not alter flags
4b2e : 49c3                     eor #$c3
4b30 : 28                       plp
4b31 : 9552                     sta zpt,x
4b33 : 08                       php         ;flags after load/store sequence
4b34 : 49c3                     eor #$c3
4b36 : d559                     cmp zp1,x   ;test result
                                trap_ne
4b38 : f003            >        beq skip1308
                       >        trap            ;failed not equal (non zero)
4b3a : 20df73          >        jsr report_error
                       >
4b3d :                 >skip1308
                        
4b3d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4b3e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4b40 : dd1c32                   cmp fLDx,x  ;test flags
                                trap_ne
4b43 : f003            >        beq skip1311
                       >        trap            ;failed not equal (non zero)
4b45 : 20df73          >        jsr report_error
                       >
4b48 :                 >skip1311
                        
4b48 : ca                       dex
4b49 : 10db                     bpl tldax3
                        
4b4b : a203                     ldx #3      ;testing store result
4b4d : a000                     ldy #0
4b4f : b552             tstax   lda zpt,x
4b51 : 49c3                     eor #$c3
4b53 : d559                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4b55 : f003            >        beq skip1313
                       >        trap            ;failed not equal (non zero)
4b57 : 20df73          >        jsr report_error
                       >
4b5a :                 >skip1313
                        
4b5a : 9452                     sty zpt,x   ;clear                
4b5c : bd0332                   lda abst,x
4b5f : 49c3                     eor #$c3
4b61 : dd1732                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4b64 : f003            >        beq skip1315
                       >        trap            ;failed not equal (non zero)
4b66 : 20df73          >        jsr report_error
                       >
4b69 :                 >skip1315
                        
4b69 : 8a                       txa
4b6a : 9d0332                   sta abst,x  ;clear                
4b6d : ca                       dex
4b6e : 10df                     bpl tstax
                                next_test
4b70 : ad0032          >            lda test_case   ;previous test
4b73 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4b75 : f003            >        beq skip1318
                       >        trap            ;failed not equal (non zero)
4b77 : 20df73          >        jsr report_error
                       >
4b7a :                 >skip1318
                       >
0016 =                 >test_num = test_num + 1
4b7a : a916            >            lda #test_num   ;*** next tests' number
4b7c : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
4b7f : a003                     ldy #3
4b81 :                  tlday    
                                set_stat 0
                       >            load_flag 0
4b81 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b83 : 48              >            pha         ;use stack to load status
4b84 : 28              >            plp
                        
4b85 : b16a                     lda (ind1),y
4b87 : 08                       php         ;test stores do not alter flags
4b88 : 49c3                     eor #$c3
4b8a : 28                       plp
4b8b : 990332                   sta abst,y
4b8e : 08                       php         ;flags after load/store sequence
4b8f : 49c3                     eor #$c3
4b91 : d91732                   cmp abs1,y  ;test result
                                trap_ne
4b94 : f003            >        beq skip1322
                       >        trap            ;failed not equal (non zero)
4b96 : 20df73          >        jsr report_error
                       >
4b99 :                 >skip1322
                        
4b99 : 68                       pla         ;load status
                                eor_flag 0
4b9a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4b9c : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4b9f : f003            >        beq skip1325
                       >        trap            ;failed not equal (non zero)
4ba1 : 20df73          >        jsr report_error
                       >
4ba4 :                 >skip1325
                        
4ba4 : 88                       dey
4ba5 : 10da                     bpl tlday                  
                        
4ba7 : a003                     ldy #3
4ba9 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
4ba9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4bab : 48              >            pha         ;use stack to load status
4bac : 28              >            plp
                        
4bad : b16a                     lda (ind1),y
4baf : 08                       php         ;test stores do not alter flags
4bb0 : 49c3                     eor #$c3
4bb2 : 28                       plp
4bb3 : 990332                   sta abst,y
4bb6 : 08                       php         ;flags after load/store sequence
4bb7 : 49c3                     eor #$c3
4bb9 : d91732                   cmp abs1,y  ;test result
                                trap_ne
4bbc : f003            >        beq skip1329
                       >        trap            ;failed not equal (non zero)
4bbe : 20df73          >        jsr report_error
                       >
4bc1 :                 >skip1329
                        
4bc1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4bc2 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4bc4 : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4bc7 : f003            >        beq skip1332
                       >        trap            ;failed not equal (non zero)
4bc9 : 20df73          >        jsr report_error
                       >
4bcc :                 >skip1332
                        
4bcc : 88                       dey
4bcd : 10da                     bpl tlday1                  
                        
4bcf : a003                     ldy #3      ;testing store result
4bd1 : a200                     ldx #0
4bd3 : b90332           tstay   lda abst,y
4bd6 : 49c3                     eor #$c3
4bd8 : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4bdb : f003            >        beq skip1334
                       >        trap            ;failed not equal (non zero)
4bdd : 20df73          >        jsr report_error
                       >
4be0 :                 >skip1334
                        
4be0 : 8a                       txa
4be1 : 990332                   sta abst,y  ;clear                
4be4 : 88                       dey
4be5 : 10ec                     bpl tstay
                        
4be7 : a003                     ldy #3
4be9 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
4be9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4beb : 48              >            pha         ;use stack to load status
4bec : 28              >            plp
                        
4bed : b91732                   lda abs1,y
4bf0 : 08                       php         ;test stores do not alter flags
4bf1 : 49c3                     eor #$c3
4bf3 : 28                       plp
4bf4 : 9176                     sta (indt),y
4bf6 : 08                       php         ;flags after load/store sequence
4bf7 : 49c3                     eor #$c3
4bf9 : d16a                     cmp (ind1),y    ;test result
                                trap_ne
4bfb : f003            >        beq skip1338
                       >        trap            ;failed not equal (non zero)
4bfd : 20df73          >        jsr report_error
                       >
4c00 :                 >skip1338
                        
4c00 : 68                       pla         ;load status
                                eor_flag 0
4c01 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c03 : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4c06 : f003            >        beq skip1341
                       >        trap            ;failed not equal (non zero)
4c08 : 20df73          >        jsr report_error
                       >
4c0b :                 >skip1341
                        
4c0b : 88                       dey
4c0c : 10db                     bpl tlday2                  
                        
4c0e : a003                     ldy #3
4c10 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
4c10 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4c12 : 48              >            pha         ;use stack to load status
4c13 : 28              >            plp
                        
4c14 : b91732                   lda abs1,y
4c17 : 08                       php         ;test stores do not alter flags
4c18 : 49c3                     eor #$c3
4c1a : 28                       plp
4c1b : 9176                     sta (indt),y
4c1d : 08                       php         ;flags after load/store sequence
4c1e : 49c3                     eor #$c3
4c20 : d16a                     cmp (ind1),y   ;test result
                                trap_ne
4c22 : f003            >        beq skip1345
                       >        trap            ;failed not equal (non zero)
4c24 : 20df73          >        jsr report_error
                       >
4c27 :                 >skip1345
                        
4c27 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4c28 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4c2a : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4c2d : f003            >        beq skip1348
                       >        trap            ;failed not equal (non zero)
4c2f : 20df73          >        jsr report_error
                       >
4c32 :                 >skip1348
                        
4c32 : 88                       dey
4c33 : 10db                     bpl tlday3
                                
4c35 : a003                     ldy #3      ;testing store result
4c37 : a200                     ldx #0
4c39 : b90332           tstay1  lda abst,y
4c3c : 49c3                     eor #$c3
4c3e : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4c41 : f003            >        beq skip1350
                       >        trap            ;failed not equal (non zero)
4c43 : 20df73          >        jsr report_error
                       >
4c46 :                 >skip1350
                        
4c46 : 8a                       txa
4c47 : 990332                   sta abst,y  ;clear                
4c4a : 88                       dey
4c4b : 10ec                     bpl tstay1
                                
4c4d : a206                     ldx #6
4c4f : a003                     ldy #3
4c51 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
4c51 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c53 : 48              >            pha         ;use stack to load status
4c54 : 28              >            plp
                        
4c55 : a16a                     lda (ind1,x)
4c57 : 08                       php         ;test stores do not alter flags
4c58 : 49c3                     eor #$c3
4c5a : 28                       plp
4c5b : 8176                     sta (indt,x)
4c5d : 08                       php         ;flags after load/store sequence
4c5e : 49c3                     eor #$c3
4c60 : d91732                   cmp abs1,y  ;test result
                                trap_ne
4c63 : f003            >        beq skip1354
                       >        trap            ;failed not equal (non zero)
4c65 : 20df73          >        jsr report_error
                       >
4c68 :                 >skip1354
                        
4c68 : 68                       pla         ;load status
                                eor_flag 0
4c69 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4c6b : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4c6e : f003            >        beq skip1357
                       >        trap            ;failed not equal (non zero)
4c70 : 20df73          >        jsr report_error
                       >
4c73 :                 >skip1357
                        
4c73 : ca                       dex
4c74 : ca                       dex
4c75 : 88                       dey
4c76 : 10d9                     bpl tldax4                  
                        
4c78 : a206                     ldx #6
4c7a : a003                     ldy #3
4c7c :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
4c7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4c7e : 48              >            pha         ;use stack to load status
4c7f : 28              >            plp
                        
4c80 : a16a                     lda (ind1,x)
4c82 : 08                       php         ;test stores do not alter flags
4c83 : 49c3                     eor #$c3
4c85 : 28                       plp
4c86 : 8176                     sta (indt,x)
4c88 : 08                       php         ;flags after load/store sequence
4c89 : 49c3                     eor #$c3
4c8b : d91732                   cmp abs1,y  ;test result
                                trap_ne
4c8e : f003            >        beq skip1361
                       >        trap            ;failed not equal (non zero)
4c90 : 20df73          >        jsr report_error
                       >
4c93 :                 >skip1361
                        
4c93 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4c94 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4c96 : d91c32                   cmp fLDx,y  ;test flags
                                trap_ne
4c99 : f003            >        beq skip1364
                       >        trap            ;failed not equal (non zero)
4c9b : 20df73          >        jsr report_error
                       >
4c9e :                 >skip1364
                        
4c9e : ca                       dex
4c9f : ca                       dex
4ca0 : 88                       dey
4ca1 : 10d9                     bpl tldax5
                        
4ca3 : a003                     ldy #3      ;testing store result
4ca5 : a200                     ldx #0
4ca7 : b90332           tstay2  lda abst,y
4caa : 49c3                     eor #$c3
4cac : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4caf : f003            >        beq skip1366
                       >        trap            ;failed not equal (non zero)
4cb1 : 20df73          >        jsr report_error
                       >
4cb4 :                 >skip1366
                        
4cb4 : 8a                       txa
4cb5 : 990332                   sta abst,y  ;clear                
4cb8 : 88                       dey
4cb9 : 10ec                     bpl tstay2
                                next_test
4cbb : ad0032          >            lda test_case   ;previous test
4cbe : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4cc0 : f003            >        beq skip1369
                       >        trap            ;failed not equal (non zero)
4cc2 : 20df73          >        jsr report_error
                       >
4cc5 :                 >skip1369
                       >
0017 =                 >test_num = test_num + 1
4cc5 : a917            >            lda #test_num   ;*** next tests' number
4cc7 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
4cca : a2fd                     ldx #3+$fa
4ccc : b55f             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
4cce : 9d0931                   sta abst-$fa,x      ;no STX abs,x!
4cd1 : ca                       dex
4cd2 : e0fa                     cpx #$fa
4cd4 : b0f6                     bcs tldax6                  
4cd6 : a2fd                     ldx #3+$fa
4cd8 : bd1d31           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
4cdb : 9558                     sta zpt-$fa&$ff,x
4cdd : ca                       dex
4cde : e0fa                     cpx #$fa
4ce0 : b0f6                     bcs tldax7
                                                  
4ce2 : a203                     ldx #3      ;testing wraparound result
4ce4 : a000                     ldy #0
4ce6 : b552             tstax1  lda zpt,x
4ce8 : d559                     cmp zp1,x
                                trap_ne     ;store to zp,x data
4cea : f003            >        beq skip1371
                       >        trap            ;failed not equal (non zero)
4cec : 20df73          >        jsr report_error
                       >
4cef :                 >skip1371
                        
4cef : 9452                     sty zpt,x   ;clear                
4cf1 : bd0332                   lda abst,x
4cf4 : dd1732                   cmp abs1,x
                                trap_ne     ;store to abs,x data
4cf7 : f003            >        beq skip1373
                       >        trap            ;failed not equal (non zero)
4cf9 : 20df73          >        jsr report_error
                       >
4cfc :                 >skip1373
                        
4cfc : 8a                       txa
4cfd : 9d0332                   sta abst,x  ;clear                
4d00 : ca                       dex
4d01 : 10e3                     bpl tstax1
                        
4d03 : a0fb                     ldy #3+$f8
4d05 : a2fe                     ldx #6+$f8
4d07 : a172             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
4d09 : 990b31                   sta abst-$f8,y
4d0c : ca                       dex
4d0d : ca                       dex
4d0e : 88                       dey
4d0f : c0f8                     cpy #$f8
4d11 : b0f4                     bcs tlday4
4d13 : a003                     ldy #3      ;testing wraparound result
4d15 : a200                     ldx #0
4d17 : b90332           tstay4  lda abst,y
4d1a : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4d1d : f003            >        beq skip1375
                       >        trap            ;failed not equal (non zero)
4d1f : 20df73          >        jsr report_error
                       >
4d22 :                 >skip1375
                        
4d22 : 8a                       txa
4d23 : 990332                   sta abst,y  ;clear                
4d26 : 88                       dey
4d27 : 10ee                     bpl tstay4
                                
4d29 : a0fb                     ldy #3+$f8
4d2b : b91f31           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
4d2e : 917e                     sta (inwt),y
4d30 : 88                       dey
4d31 : c0f8                     cpy #$f8
4d33 : b0f6                     bcs tlday5                  
4d35 : a003                     ldy #3      ;testing wraparound result
4d37 : a200                     ldx #0
4d39 : b90332           tstay5  lda abst,y
4d3c : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4d3f : f003            >        beq skip1377
                       >        trap            ;failed not equal (non zero)
4d41 : 20df73          >        jsr report_error
                       >
4d44 :                 >skip1377
                        
4d44 : 8a                       txa
4d45 : 990332                   sta abst,y  ;clear                
4d48 : 88                       dey
4d49 : 10ee                     bpl tstay5
                        
4d4b : a0fb                     ldy #3+$f8
4d4d : a2fe                     ldx #6+$f8
4d4f : b174             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
4d51 : 817e                     sta (indt-$f8&$ff,x)
4d53 : ca                       dex
4d54 : ca                       dex
4d55 : 88                       dey
4d56 : c0f8                     cpy #$f8
4d58 : b0f5                     bcs tlday6
4d5a : a003                     ldy #3      ;testing wraparound result
4d5c : a200                     ldx #0
4d5e : b90332           tstay6  lda abst,y
4d61 : d91732                   cmp abs1,y
                                trap_ne     ;store to abs data
4d64 : f003            >        beq skip1379
                       >        trap            ;failed not equal (non zero)
4d66 : 20df73          >        jsr report_error
                       >
4d69 :                 >skip1379
                        
4d69 : 8a                       txa
4d6a : 990332                   sta abst,y  ;clear                
4d6d : 88                       dey
4d6e : 10ee                     bpl tstay6
                                next_test
4d70 : ad0032          >            lda test_case   ;previous test
4d73 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4d75 : f003            >        beq skip1382
                       >        trap            ;failed not equal (non zero)
4d77 : 20df73          >        jsr report_error
                       >
4d7a :                 >skip1382
                       >
0018 =                 >test_num = test_num + 1
4d7a : a918            >            lda #test_num   ;*** next tests' number
4d7c : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
4d7f : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
4d81 : 48              >            pha         ;use stack to load status
4d82 : 28              >            plp
                        
4d83 : a559                     lda zp1
4d85 : 08                       php         ;test stores do not alter flags
4d86 : 49c3                     eor #$c3
4d88 : 28                       plp
4d89 : 8d0332                   sta abst
4d8c : 08                       php         ;flags after load/store sequence
4d8d : 49c3                     eor #$c3
4d8f : c9c3                     cmp #$c3    ;test result
                                trap_ne
4d91 : f003            >        beq skip1386
                       >        trap            ;failed not equal (non zero)
4d93 : 20df73          >        jsr report_error
                       >
4d96 :                 >skip1386
                        
4d96 : 68                       pla         ;load status
                                eor_flag 0
4d97 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4d99 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4d9c : f003            >        beq skip1389
                       >        trap            ;failed not equal (non zero)
4d9e : 20df73          >        jsr report_error
                       >
4da1 :                 >skip1389
                        
                                set_stat 0
                       >            load_flag 0
4da1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4da3 : 48              >            pha         ;use stack to load status
4da4 : 28              >            plp
                        
4da5 : a55a                     lda zp1+1
4da7 : 08                       php         ;test stores do not alter flags
4da8 : 49c3                     eor #$c3
4daa : 28                       plp
4dab : 8d0432                   sta abst+1
4dae : 08                       php         ;flags after load/store sequence
4daf : 49c3                     eor #$c3
4db1 : c982                     cmp #$82    ;test result
                                trap_ne
4db3 : f003            >        beq skip1393
                       >        trap            ;failed not equal (non zero)
4db5 : 20df73          >        jsr report_error
                       >
4db8 :                 >skip1393
                        
4db8 : 68                       pla         ;load status
                                eor_flag 0
4db9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4dbb : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4dbe : f003            >        beq skip1396
                       >        trap            ;failed not equal (non zero)
4dc0 : 20df73          >        jsr report_error
                       >
4dc3 :                 >skip1396
                        
                                set_stat 0
                       >            load_flag 0
4dc3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4dc5 : 48              >            pha         ;use stack to load status
4dc6 : 28              >            plp
                        
4dc7 : a55b                     lda zp1+2
4dc9 : 08                       php         ;test stores do not alter flags
4dca : 49c3                     eor #$c3
4dcc : 28                       plp
4dcd : 8d0532                   sta abst+2
4dd0 : 08                       php         ;flags after load/store sequence
4dd1 : 49c3                     eor #$c3
4dd3 : c941                     cmp #$41    ;test result
                                trap_ne
4dd5 : f003            >        beq skip1400
                       >        trap            ;failed not equal (non zero)
4dd7 : 20df73          >        jsr report_error
                       >
4dda :                 >skip1400
                        
4dda : 68                       pla         ;load status
                                eor_flag 0
4ddb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4ddd : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4de0 : f003            >        beq skip1403
                       >        trap            ;failed not equal (non zero)
4de2 : 20df73          >        jsr report_error
                       >
4de5 :                 >skip1403
                        
                                set_stat 0
                       >            load_flag 0
4de5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4de7 : 48              >            pha         ;use stack to load status
4de8 : 28              >            plp
                        
4de9 : a55c                     lda zp1+3
4deb : 08                       php         ;test stores do not alter flags
4dec : 49c3                     eor #$c3
4dee : 28                       plp
4def : 8d0632                   sta abst+3
4df2 : 08                       php         ;flags after load/store sequence
4df3 : 49c3                     eor #$c3
4df5 : c900                     cmp #0      ;test result
                                trap_ne
4df7 : f003            >        beq skip1407
                       >        trap            ;failed not equal (non zero)
4df9 : 20df73          >        jsr report_error
                       >
4dfc :                 >skip1407
                        
4dfc : 68                       pla         ;load status
                                eor_flag 0
4dfd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4dff : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4e02 : f003            >        beq skip1410
                       >        trap            ;failed not equal (non zero)
4e04 : 20df73          >        jsr report_error
                       >
4e07 :                 >skip1410
                        
                                set_stat $ff
                       >            load_flag $ff
4e07 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e09 : 48              >            pha         ;use stack to load status
4e0a : 28              >            plp
                        
4e0b : a559                     lda zp1  
4e0d : 08                       php         ;test stores do not alter flags
4e0e : 49c3                     eor #$c3
4e10 : 28                       plp
4e11 : 8d0332                   sta abst  
4e14 : 08                       php         ;flags after load/store sequence
4e15 : 49c3                     eor #$c3
4e17 : c9c3                     cmp #$c3    ;test result
                                trap_ne
4e19 : f003            >        beq skip1414
                       >        trap            ;failed not equal (non zero)
4e1b : 20df73          >        jsr report_error
                       >
4e1e :                 >skip1414
                        
4e1e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e1f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e21 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4e24 : f003            >        beq skip1417
                       >        trap            ;failed not equal (non zero)
4e26 : 20df73          >        jsr report_error
                       >
4e29 :                 >skip1417
                        
                                set_stat $ff
                       >            load_flag $ff
4e29 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e2b : 48              >            pha         ;use stack to load status
4e2c : 28              >            plp
                        
4e2d : a55a                     lda zp1+1
4e2f : 08                       php         ;test stores do not alter flags
4e30 : 49c3                     eor #$c3
4e32 : 28                       plp
4e33 : 8d0432                   sta abst+1
4e36 : 08                       php         ;flags after load/store sequence
4e37 : 49c3                     eor #$c3
4e39 : c982                     cmp #$82    ;test result
                                trap_ne
4e3b : f003            >        beq skip1421
                       >        trap            ;failed not equal (non zero)
4e3d : 20df73          >        jsr report_error
                       >
4e40 :                 >skip1421
                        
4e40 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e41 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e43 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4e46 : f003            >        beq skip1424
                       >        trap            ;failed not equal (non zero)
4e48 : 20df73          >        jsr report_error
                       >
4e4b :                 >skip1424
                        
                                set_stat $ff
                       >            load_flag $ff
4e4b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e4d : 48              >            pha         ;use stack to load status
4e4e : 28              >            plp
                        
4e4f : a55b                     lda zp1+2
4e51 : 08                       php         ;test stores do not alter flags
4e52 : 49c3                     eor #$c3
4e54 : 28                       plp
4e55 : 8d0532                   sta abst+2
4e58 : 08                       php         ;flags after load/store sequence
4e59 : 49c3                     eor #$c3
4e5b : c941                     cmp #$41    ;test result
                                trap_ne
4e5d : f003            >        beq skip1428
                       >        trap            ;failed not equal (non zero)
4e5f : 20df73          >        jsr report_error
                       >
4e62 :                 >skip1428
                        
4e62 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e63 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e65 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4e68 : f003            >        beq skip1431
                       >        trap            ;failed not equal (non zero)
4e6a : 20df73          >        jsr report_error
                       >
4e6d :                 >skip1431
                        
                                set_stat $ff
                       >            load_flag $ff
4e6d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e6f : 48              >            pha         ;use stack to load status
4e70 : 28              >            plp
                        
4e71 : a55c                     lda zp1+3
4e73 : 08                       php         ;test stores do not alter flags
4e74 : 49c3                     eor #$c3
4e76 : 28                       plp
4e77 : 8d0632                   sta abst+3
4e7a : 08                       php         ;flags after load/store sequence
4e7b : 49c3                     eor #$c3
4e7d : c900                     cmp #0      ;test result
                                trap_ne
4e7f : f003            >        beq skip1435
                       >        trap            ;failed not equal (non zero)
4e81 : 20df73          >        jsr report_error
                       >
4e84 :                 >skip1435
                        
4e84 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4e85 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4e87 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4e8a : f003            >        beq skip1438
                       >        trap            ;failed not equal (non zero)
4e8c : 20df73          >        jsr report_error
                       >
4e8f :                 >skip1438
                        
                                set_stat 0
                       >            load_flag 0
4e8f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e91 : 48              >            pha         ;use stack to load status
4e92 : 28              >            plp
                        
4e93 : ad1732                   lda abs1  
4e96 : 08                       php         ;test stores do not alter flags
4e97 : 49c3                     eor #$c3
4e99 : 28                       plp
4e9a : 8552                     sta zpt  
4e9c : 08                       php         ;flags after load/store sequence
4e9d : 49c3                     eor #$c3
4e9f : c559                     cmp zp1     ;test result
                                trap_ne
4ea1 : f003            >        beq skip1442
                       >        trap            ;failed not equal (non zero)
4ea3 : 20df73          >        jsr report_error
                       >
4ea6 :                 >skip1442
                        
4ea6 : 68                       pla         ;load status
                                eor_flag 0
4ea7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4ea9 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4eac : f003            >        beq skip1445
                       >        trap            ;failed not equal (non zero)
4eae : 20df73          >        jsr report_error
                       >
4eb1 :                 >skip1445
                        
                                set_stat 0
                       >            load_flag 0
4eb1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4eb3 : 48              >            pha         ;use stack to load status
4eb4 : 28              >            plp
                        
4eb5 : ad1832                   lda abs1+1
4eb8 : 08                       php         ;test stores do not alter flags
4eb9 : 49c3                     eor #$c3
4ebb : 28                       plp
4ebc : 8553                     sta zpt+1
4ebe : 08                       php         ;flags after load/store sequence
4ebf : 49c3                     eor #$c3
4ec1 : c55a                     cmp zp1+1   ;test result
                                trap_ne
4ec3 : f003            >        beq skip1449
                       >        trap            ;failed not equal (non zero)
4ec5 : 20df73          >        jsr report_error
                       >
4ec8 :                 >skip1449
                        
4ec8 : 68                       pla         ;load status
                                eor_flag 0
4ec9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4ecb : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4ece : f003            >        beq skip1452
                       >        trap            ;failed not equal (non zero)
4ed0 : 20df73          >        jsr report_error
                       >
4ed3 :                 >skip1452
                        
                                set_stat 0
                       >            load_flag 0
4ed3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4ed5 : 48              >            pha         ;use stack to load status
4ed6 : 28              >            plp
                        
4ed7 : ad1932                   lda abs1+2
4eda : 08                       php         ;test stores do not alter flags
4edb : 49c3                     eor #$c3
4edd : 28                       plp
4ede : 8554                     sta zpt+2
4ee0 : 08                       php         ;flags after load/store sequence
4ee1 : 49c3                     eor #$c3
4ee3 : c55b                     cmp zp1+2   ;test result
                                trap_ne
4ee5 : f003            >        beq skip1456
                       >        trap            ;failed not equal (non zero)
4ee7 : 20df73          >        jsr report_error
                       >
4eea :                 >skip1456
                        
4eea : 68                       pla         ;load status
                                eor_flag 0
4eeb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4eed : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4ef0 : f003            >        beq skip1459
                       >        trap            ;failed not equal (non zero)
4ef2 : 20df73          >        jsr report_error
                       >
4ef5 :                 >skip1459
                        
                                set_stat 0
                       >            load_flag 0
4ef5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4ef7 : 48              >            pha         ;use stack to load status
4ef8 : 28              >            plp
                        
4ef9 : ad1a32                   lda abs1+3
4efc : 08                       php         ;test stores do not alter flags
4efd : 49c3                     eor #$c3
4eff : 28                       plp
4f00 : 8555                     sta zpt+3
4f02 : 08                       php         ;flags after load/store sequence
4f03 : 49c3                     eor #$c3
4f05 : c55c                     cmp zp1+3   ;test result
                                trap_ne
4f07 : f003            >        beq skip1463
                       >        trap            ;failed not equal (non zero)
4f09 : 20df73          >        jsr report_error
                       >
4f0c :                 >skip1463
                        
4f0c : 68                       pla         ;load status
                                eor_flag 0
4f0d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4f0f : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4f12 : f003            >        beq skip1466
                       >        trap            ;failed not equal (non zero)
4f14 : 20df73          >        jsr report_error
                       >
4f17 :                 >skip1466
                        
                                set_stat $ff
                       >            load_flag $ff
4f17 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f19 : 48              >            pha         ;use stack to load status
4f1a : 28              >            plp
                        
4f1b : ad1732                   lda abs1  
4f1e : 08                       php         ;test stores do not alter flags
4f1f : 49c3                     eor #$c3
4f21 : 28                       plp
4f22 : 8552                     sta zpt  
4f24 : 08                       php         ;flags after load/store sequence
4f25 : 49c3                     eor #$c3
4f27 : c559                     cmp zp1     ;test result
                                trap_ne
4f29 : f003            >        beq skip1470
                       >        trap            ;failed not equal (non zero)
4f2b : 20df73          >        jsr report_error
                       >
4f2e :                 >skip1470
                        
4f2e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f2f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4f31 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4f34 : f003            >        beq skip1473
                       >        trap            ;failed not equal (non zero)
4f36 : 20df73          >        jsr report_error
                       >
4f39 :                 >skip1473
                        
                                set_stat $ff
                       >            load_flag $ff
4f39 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f3b : 48              >            pha         ;use stack to load status
4f3c : 28              >            plp
                        
4f3d : ad1832                   lda abs1+1
4f40 : 08                       php         ;test stores do not alter flags
4f41 : 49c3                     eor #$c3
4f43 : 28                       plp
4f44 : 8553                     sta zpt+1
4f46 : 08                       php         ;flags after load/store sequence
4f47 : 49c3                     eor #$c3
4f49 : c55a                     cmp zp1+1   ;test result
                                trap_ne
4f4b : f003            >        beq skip1477
                       >        trap            ;failed not equal (non zero)
4f4d : 20df73          >        jsr report_error
                       >
4f50 :                 >skip1477
                        
4f50 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f51 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4f53 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4f56 : f003            >        beq skip1480
                       >        trap            ;failed not equal (non zero)
4f58 : 20df73          >        jsr report_error
                       >
4f5b :                 >skip1480
                        
                                set_stat $ff
                       >            load_flag $ff
4f5b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f5d : 48              >            pha         ;use stack to load status
4f5e : 28              >            plp
                        
4f5f : ad1932                   lda abs1+2
4f62 : 08                       php         ;test stores do not alter flags
4f63 : 49c3                     eor #$c3
4f65 : 28                       plp
4f66 : 8554                     sta zpt+2
4f68 : 08                       php         ;flags after load/store sequence
4f69 : 49c3                     eor #$c3
4f6b : c55b                     cmp zp1+2   ;test result
                                trap_ne
4f6d : f003            >        beq skip1484
                       >        trap            ;failed not equal (non zero)
4f6f : 20df73          >        jsr report_error
                       >
4f72 :                 >skip1484
                        
4f72 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f73 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4f75 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4f78 : f003            >        beq skip1487
                       >        trap            ;failed not equal (non zero)
4f7a : 20df73          >        jsr report_error
                       >
4f7d :                 >skip1487
                        
                                set_stat $ff
                       >            load_flag $ff
4f7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f7f : 48              >            pha         ;use stack to load status
4f80 : 28              >            plp
                        
4f81 : ad1a32                   lda abs1+3
4f84 : 08                       php         ;test stores do not alter flags
4f85 : 49c3                     eor #$c3
4f87 : 28                       plp
4f88 : 8555                     sta zpt+3
4f8a : 08                       php         ;flags after load/store sequence
4f8b : 49c3                     eor #$c3
4f8d : c55c                     cmp zp1+3   ;test result
                                trap_ne
4f8f : f003            >        beq skip1491
                       >        trap            ;failed not equal (non zero)
4f91 : 20df73          >        jsr report_error
                       >
4f94 :                 >skip1491
                        
4f94 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
4f95 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
4f97 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
4f9a : f003            >        beq skip1494
                       >        trap            ;failed not equal (non zero)
4f9c : 20df73          >        jsr report_error
                       >
4f9f :                 >skip1494
                        
                                set_stat 0  
                       >            load_flag 0  
4f9f : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
4fa1 : 48              >            pha         ;use stack to load status
4fa2 : 28              >            plp
                        
4fa3 : a9c3                     lda #$c3
4fa5 : 08                       php
4fa6 : cd1732                   cmp abs1    ;test result
                                trap_ne
4fa9 : f003            >        beq skip1498
                       >        trap            ;failed not equal (non zero)
4fab : 20df73          >        jsr report_error
                       >
4fae :                 >skip1498
                        
4fae : 68                       pla         ;load status
                                eor_flag 0
4faf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4fb1 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
4fb4 : f003            >        beq skip1501
                       >        trap            ;failed not equal (non zero)
4fb6 : 20df73          >        jsr report_error
                       >
4fb9 :                 >skip1501
                        
                                set_stat 0
                       >            load_flag 0
4fb9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4fbb : 48              >            pha         ;use stack to load status
4fbc : 28              >            plp
                        
4fbd : a982                     lda #$82
4fbf : 08                       php
4fc0 : cd1832                   cmp abs1+1  ;test result
                                trap_ne
4fc3 : f003            >        beq skip1505
                       >        trap            ;failed not equal (non zero)
4fc5 : 20df73          >        jsr report_error
                       >
4fc8 :                 >skip1505
                        
4fc8 : 68                       pla         ;load status
                                eor_flag 0
4fc9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4fcb : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
4fce : f003            >        beq skip1508
                       >        trap            ;failed not equal (non zero)
4fd0 : 20df73          >        jsr report_error
                       >
4fd3 :                 >skip1508
                        
                                set_stat 0
                       >            load_flag 0
4fd3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4fd5 : 48              >            pha         ;use stack to load status
4fd6 : 28              >            plp
                        
4fd7 : a941                     lda #$41
4fd9 : 08                       php
4fda : cd1932                   cmp abs1+2  ;test result
                                trap_ne
4fdd : f003            >        beq skip1512
                       >        trap            ;failed not equal (non zero)
4fdf : 20df73          >        jsr report_error
                       >
4fe2 :                 >skip1512
                        
4fe2 : 68                       pla         ;load status
                                eor_flag 0
4fe3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4fe5 : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
4fe8 : f003            >        beq skip1515
                       >        trap            ;failed not equal (non zero)
4fea : 20df73          >        jsr report_error
                       >
4fed :                 >skip1515
                        
                                set_stat 0
                       >            load_flag 0
4fed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4fef : 48              >            pha         ;use stack to load status
4ff0 : 28              >            plp
                        
4ff1 : a900                     lda #0
4ff3 : 08                       php
4ff4 : cd1a32                   cmp abs1+3  ;test result
                                trap_ne
4ff7 : f003            >        beq skip1519
                       >        trap            ;failed not equal (non zero)
4ff9 : 20df73          >        jsr report_error
                       >
4ffc :                 >skip1519
                        
4ffc : 68                       pla         ;load status
                                eor_flag 0
4ffd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
4fff : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
5002 : f003            >        beq skip1522
                       >        trap            ;failed not equal (non zero)
5004 : 20df73          >        jsr report_error
                       >
5007 :                 >skip1522
                        
                        
                                set_stat $ff
                       >            load_flag $ff
5007 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5009 : 48              >            pha         ;use stack to load status
500a : 28              >            plp
                        
500b : a9c3                     lda #$c3  
500d : 08                       php
500e : cd1732                   cmp abs1    ;test result
                                trap_ne
5011 : f003            >        beq skip1526
                       >        trap            ;failed not equal (non zero)
5013 : 20df73          >        jsr report_error
                       >
5016 :                 >skip1526
                        
5016 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5017 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5019 : cd1c32                   cmp fLDx    ;test flags
                                trap_ne
501c : f003            >        beq skip1529
                       >        trap            ;failed not equal (non zero)
501e : 20df73          >        jsr report_error
                       >
5021 :                 >skip1529
                        
                                set_stat $ff
                       >            load_flag $ff
5021 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5023 : 48              >            pha         ;use stack to load status
5024 : 28              >            plp
                        
5025 : a982                     lda #$82
5027 : 08                       php
5028 : cd1832                   cmp abs1+1  ;test result
                                trap_ne
502b : f003            >        beq skip1533
                       >        trap            ;failed not equal (non zero)
502d : 20df73          >        jsr report_error
                       >
5030 :                 >skip1533
                        
5030 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5031 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5033 : cd1d32                   cmp fLDx+1  ;test flags
                                trap_ne
5036 : f003            >        beq skip1536
                       >        trap            ;failed not equal (non zero)
5038 : 20df73          >        jsr report_error
                       >
503b :                 >skip1536
                        
                                set_stat $ff
                       >            load_flag $ff
503b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
503d : 48              >            pha         ;use stack to load status
503e : 28              >            plp
                        
503f : a941                     lda #$41
5041 : 08                       php
5042 : cd1932                   cmp abs1+2  ;test result
                                trap_ne
5045 : f003            >        beq skip1540
                       >        trap            ;failed not equal (non zero)
5047 : 20df73          >        jsr report_error
                       >
504a :                 >skip1540
                        
504a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
504b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
504d : cd1e32                   cmp fLDx+2  ;test flags
                                trap_ne
5050 : f003            >        beq skip1543
                       >        trap            ;failed not equal (non zero)
5052 : 20df73          >        jsr report_error
                       >
5055 :                 >skip1543
                        
                                set_stat $ff
                       >            load_flag $ff
5055 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5057 : 48              >            pha         ;use stack to load status
5058 : 28              >            plp
                        
5059 : a900                     lda #0
505b : 08                       php
505c : cd1a32                   cmp abs1+3  ;test result
                                trap_ne
505f : f003            >        beq skip1547
                       >        trap            ;failed not equal (non zero)
5061 : 20df73          >        jsr report_error
                       >
5064 :                 >skip1547
                        
5064 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
5065 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
5067 : cd1f32                   cmp fLDx+3  ;test flags
                                trap_ne
506a : f003            >        beq skip1550
                       >        trap            ;failed not equal (non zero)
506c : 20df73          >        jsr report_error
                       >
506f :                 >skip1550
                        
                        
506f : a200                     ldx #0
5071 : a552                     lda zpt  
5073 : 49c3                     eor #$c3
5075 : c559                     cmp zp1  
                                trap_ne     ;store to zp data
5077 : f003            >        beq skip1552
                       >        trap            ;failed not equal (non zero)
5079 : 20df73          >        jsr report_error
                       >
507c :                 >skip1552
                        
507c : 8652                     stx zpt     ;clear                
507e : ad0332                   lda abst  
5081 : 49c3                     eor #$c3
5083 : cd1732                   cmp abs1  
                                trap_ne     ;store to abs data
5086 : f003            >        beq skip1554
                       >        trap            ;failed not equal (non zero)
5088 : 20df73          >        jsr report_error
                       >
508b :                 >skip1554
                        
508b : 8e0332                   stx abst    ;clear                
508e : a553                     lda zpt+1
5090 : 49c3                     eor #$c3
5092 : c55a                     cmp zp1+1
                                trap_ne     ;store to zp data
5094 : f003            >        beq skip1556
                       >        trap            ;failed not equal (non zero)
5096 : 20df73          >        jsr report_error
                       >
5099 :                 >skip1556
                        
5099 : 8653                     stx zpt+1   ;clear                
509b : ad0432                   lda abst+1
509e : 49c3                     eor #$c3
50a0 : cd1832                   cmp abs1+1
                                trap_ne     ;store to abs data
50a3 : f003            >        beq skip1558
                       >        trap            ;failed not equal (non zero)
50a5 : 20df73          >        jsr report_error
                       >
50a8 :                 >skip1558
                        
50a8 : 8e0432                   stx abst+1  ;clear                
50ab : a554                     lda zpt+2
50ad : 49c3                     eor #$c3
50af : c55b                     cmp zp1+2
                                trap_ne     ;store to zp data
50b1 : f003            >        beq skip1560
                       >        trap            ;failed not equal (non zero)
50b3 : 20df73          >        jsr report_error
                       >
50b6 :                 >skip1560
                        
50b6 : 8654                     stx zpt+2   ;clear                
50b8 : ad0532                   lda abst+2
50bb : 49c3                     eor #$c3
50bd : cd1932                   cmp abs1+2
                                trap_ne     ;store to abs data
50c0 : f003            >        beq skip1562
                       >        trap            ;failed not equal (non zero)
50c2 : 20df73          >        jsr report_error
                       >
50c5 :                 >skip1562
                        
50c5 : 8e0532                   stx abst+2  ;clear                
50c8 : a555                     lda zpt+3
50ca : 49c3                     eor #$c3
50cc : c55c                     cmp zp1+3
                                trap_ne     ;store to zp data
50ce : f003            >        beq skip1564
                       >        trap            ;failed not equal (non zero)
50d0 : 20df73          >        jsr report_error
                       >
50d3 :                 >skip1564
                        
50d3 : 8655                     stx zpt+3   ;clear                
50d5 : ad0632                   lda abst+3
50d8 : 49c3                     eor #$c3
50da : cd1a32                   cmp abs1+3
                                trap_ne     ;store to abs data
50dd : f003            >        beq skip1566
                       >        trap            ;failed not equal (non zero)
50df : 20df73          >        jsr report_error
                       >
50e2 :                 >skip1566
                        
50e2 : 8e0632                   stx abst+3  ;clear                
                                next_test
50e5 : ad0032          >            lda test_case   ;previous test
50e8 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
50ea : f003            >        beq skip1569
                       >        trap            ;failed not equal (non zero)
50ec : 20df73          >        jsr report_error
                       >
50ef :                 >skip1569
                       >
0019 =                 >test_num = test_num + 1
50ef : a919            >            lda #test_num   ;*** next tests' number
50f1 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
50f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
50f6 : 48              >            pha         ;use stack to load status
50f7 : a9ff            >            lda #$ff     ;precharge accu
50f9 : 28              >            plp
                        
50fa : 245c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
50fc : 08              >            php         ;save flags
50fd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
50ff : f003            >        beq skip1574
                       >        trap            ;failed not equal (non zero)
5101 : 20df73          >        jsr report_error
                       >
5104 :                 >skip1574
                       >
5104 : 68              >            pla         ;load status
5105 : 48              >            pha
                       >            cmp_flag fz 
5106 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5108 : f003            >        beq skip1577
                       >        trap            ;failed not equal (non zero)
510a : 20df73          >        jsr report_error
                       >
510d :                 >skip1577
                       >
510d : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
510e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5110 : 48              >            pha         ;use stack to load status
5111 : a901            >            lda #1     ;precharge accu
5113 : 28              >            plp
                        
5114 : 245b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
5116 : 08              >            php         ;save flags
5117 : c901            >            cmp #1     ;test result
                       >            trap_ne
5119 : f003            >        beq skip1582
                       >        trap            ;failed not equal (non zero)
511b : 20df73          >        jsr report_error
                       >
511e :                 >skip1582
                       >
511e : 68              >            pla         ;load status
511f : 48              >            pha
                       >            cmp_flag fv
5120 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5122 : f003            >        beq skip1585
                       >        trap            ;failed not equal (non zero)
5124 : 20df73          >        jsr report_error
                       >
5127 :                 >skip1585
                       >
5127 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5128 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
512a : 48              >            pha         ;use stack to load status
512b : a901            >            lda #1     ;precharge accu
512d : 28              >            plp
                        
512e : 245a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
5130 : 08              >            php         ;save flags
5131 : c901            >            cmp #1     ;test result
                       >            trap_ne
5133 : f003            >        beq skip1590
                       >        trap            ;failed not equal (non zero)
5135 : 20df73          >        jsr report_error
                       >
5138 :                 >skip1590
                       >
5138 : 68              >            pla         ;load status
5139 : 48              >            pha
                       >            cmp_flag fnz
513a : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
513c : f003            >        beq skip1593
                       >        trap            ;failed not equal (non zero)
513e : 20df73          >        jsr report_error
                       >
5141 :                 >skip1593
                       >
5141 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5142 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5144 : 48              >            pha         ;use stack to load status
5145 : a901            >            lda #1     ;precharge accu
5147 : 28              >            plp
                        
5148 : 2459                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
514a : 08              >            php         ;save flags
514b : c901            >            cmp #1     ;test result
                       >            trap_ne
514d : f003            >        beq skip1598
                       >        trap            ;failed not equal (non zero)
514f : 20df73          >        jsr report_error
                       >
5152 :                 >skip1598
                       >
5152 : 68              >            pla         ;load status
5153 : 48              >            pha
                       >            cmp_flag fnv
5154 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5156 : f003            >        beq skip1601
                       >        trap            ;failed not equal (non zero)
5158 : 20df73          >        jsr report_error
                       >
515b :                 >skip1601
                       >
515b : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
515c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
515e : 48              >            pha         ;use stack to load status
515f : a9ff            >            lda #$ff     ;precharge accu
5161 : 28              >            plp
                        
5162 : 245c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
5164 : 08              >            php         ;save flags
5165 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
5167 : f003            >        beq skip1606
                       >        trap            ;failed not equal (non zero)
5169 : 20df73          >        jsr report_error
                       >
516c :                 >skip1606
                       >
516c : 68              >            pla         ;load status
516d : 48              >            pha
                       >            cmp_flag ~fnv 
516e : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5170 : f003            >        beq skip1609
                       >        trap            ;failed not equal (non zero)
5172 : 20df73          >        jsr report_error
                       >
5175 :                 >skip1609
                       >
5175 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5176 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5178 : 48              >            pha         ;use stack to load status
5179 : a901            >            lda #1     ;precharge accu
517b : 28              >            plp
                        
517c : 245b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
517e : 08              >            php         ;save flags
517f : c901            >            cmp #1     ;test result
                       >            trap_ne
5181 : f003            >        beq skip1614
                       >        trap            ;failed not equal (non zero)
5183 : 20df73          >        jsr report_error
                       >
5186 :                 >skip1614
                       >
5186 : 68              >            pla         ;load status
5187 : 48              >            pha
                       >            cmp_flag ~fnz
5188 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
518a : f003            >        beq skip1617
                       >        trap            ;failed not equal (non zero)
518c : 20df73          >        jsr report_error
                       >
518f :                 >skip1617
                       >
518f : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5190 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5192 : 48              >            pha         ;use stack to load status
5193 : a901            >            lda #1     ;precharge accu
5195 : 28              >            plp
                        
5196 : 245a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
5198 : 08              >            php         ;save flags
5199 : c901            >            cmp #1     ;test result
                       >            trap_ne
519b : f003            >        beq skip1622
                       >        trap            ;failed not equal (non zero)
519d : 20df73          >        jsr report_error
                       >
51a0 :                 >skip1622
                       >
51a0 : 68              >            pla         ;load status
51a1 : 48              >            pha
                       >            cmp_flag ~fv
51a2 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
51a4 : f003            >        beq skip1625
                       >        trap            ;failed not equal (non zero)
51a6 : 20df73          >        jsr report_error
                       >
51a9 :                 >skip1625
                       >
51a9 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
51aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
51ac : 48              >            pha         ;use stack to load status
51ad : a901            >            lda #1     ;precharge accu
51af : 28              >            plp
                        
51b0 : 2459                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
51b2 : 08              >            php         ;save flags
51b3 : c901            >            cmp #1     ;test result
                       >            trap_ne
51b5 : f003            >        beq skip1630
                       >        trap            ;failed not equal (non zero)
51b7 : 20df73          >        jsr report_error
                       >
51ba :                 >skip1630
                       >
51ba : 68              >            pla         ;load status
51bb : 48              >            pha
                       >            cmp_flag ~fz
51bc : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
51be : f003            >        beq skip1633
                       >        trap            ;failed not equal (non zero)
51c0 : 20df73          >        jsr report_error
                       >
51c3 :                 >skip1633
                       >
51c3 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
51c4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
51c6 : 48              >            pha         ;use stack to load status
51c7 : a9ff            >            lda #$ff     ;precharge accu
51c9 : 28              >            plp
                        
51ca : 2c1a32                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
51cd : 08              >            php         ;save flags
51ce : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
51d0 : f003            >        beq skip1638
                       >        trap            ;failed not equal (non zero)
51d2 : 20df73          >        jsr report_error
                       >
51d5 :                 >skip1638
                       >
51d5 : 68              >            pla         ;load status
51d6 : 48              >            pha
                       >            cmp_flag fz 
51d7 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
51d9 : f003            >        beq skip1641
                       >        trap            ;failed not equal (non zero)
51db : 20df73          >        jsr report_error
                       >
51de :                 >skip1641
                       >
51de : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
51df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
51e1 : 48              >            pha         ;use stack to load status
51e2 : a901            >            lda #1     ;precharge accu
51e4 : 28              >            plp
                        
51e5 : 2c1932                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
51e8 : 08              >            php         ;save flags
51e9 : c901            >            cmp #1     ;test result
                       >            trap_ne
51eb : f003            >        beq skip1646
                       >        trap            ;failed not equal (non zero)
51ed : 20df73          >        jsr report_error
                       >
51f0 :                 >skip1646
                       >
51f0 : 68              >            pla         ;load status
51f1 : 48              >            pha
                       >            cmp_flag fv
51f2 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
51f4 : f003            >        beq skip1649
                       >        trap            ;failed not equal (non zero)
51f6 : 20df73          >        jsr report_error
                       >
51f9 :                 >skip1649
                       >
51f9 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
51fa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
51fc : 48              >            pha         ;use stack to load status
51fd : a901            >            lda #1     ;precharge accu
51ff : 28              >            plp
                        
5200 : 2c1832                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
5203 : 08              >            php         ;save flags
5204 : c901            >            cmp #1     ;test result
                       >            trap_ne
5206 : f003            >        beq skip1654
                       >        trap            ;failed not equal (non zero)
5208 : 20df73          >        jsr report_error
                       >
520b :                 >skip1654
                       >
520b : 68              >            pla         ;load status
520c : 48              >            pha
                       >            cmp_flag fnz
520d : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
520f : f003            >        beq skip1657
                       >        trap            ;failed not equal (non zero)
5211 : 20df73          >        jsr report_error
                       >
5214 :                 >skip1657
                       >
5214 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
5215 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5217 : 48              >            pha         ;use stack to load status
5218 : a901            >            lda #1     ;precharge accu
521a : 28              >            plp
                        
521b : 2c1732                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
521e : 08              >            php         ;save flags
521f : c901            >            cmp #1     ;test result
                       >            trap_ne
5221 : f003            >        beq skip1662
                       >        trap            ;failed not equal (non zero)
5223 : 20df73          >        jsr report_error
                       >
5226 :                 >skip1662
                       >
5226 : 68              >            pla         ;load status
5227 : 48              >            pha
                       >            cmp_flag fnv
5228 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
522a : f003            >        beq skip1665
                       >        trap            ;failed not equal (non zero)
522c : 20df73          >        jsr report_error
                       >
522f :                 >skip1665
                       >
522f : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
5230 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5232 : 48              >            pha         ;use stack to load status
5233 : a9ff            >            lda #$ff     ;precharge accu
5235 : 28              >            plp
                        
5236 : 2c1a32                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
5239 : 08              >            php         ;save flags
523a : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
523c : f003            >        beq skip1670
                       >        trap            ;failed not equal (non zero)
523e : 20df73          >        jsr report_error
                       >
5241 :                 >skip1670
                       >
5241 : 68              >            pla         ;load status
5242 : 48              >            pha
                       >            cmp_flag ~fnv 
5243 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5245 : f003            >        beq skip1673
                       >        trap            ;failed not equal (non zero)
5247 : 20df73          >        jsr report_error
                       >
524a :                 >skip1673
                       >
524a : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
524b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
524d : 48              >            pha         ;use stack to load status
524e : a901            >            lda #1     ;precharge accu
5250 : 28              >            plp
                        
5251 : 2c1932                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
5254 : 08              >            php         ;save flags
5255 : c901            >            cmp #1     ;test result
                       >            trap_ne
5257 : f003            >        beq skip1678
                       >        trap            ;failed not equal (non zero)
5259 : 20df73          >        jsr report_error
                       >
525c :                 >skip1678
                       >
525c : 68              >            pla         ;load status
525d : 48              >            pha
                       >            cmp_flag ~fnz
525e : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5260 : f003            >        beq skip1681
                       >        trap            ;failed not equal (non zero)
5262 : 20df73          >        jsr report_error
                       >
5265 :                 >skip1681
                       >
5265 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5266 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5268 : 48              >            pha         ;use stack to load status
5269 : a901            >            lda #1     ;precharge accu
526b : 28              >            plp
                        
526c : 2c1832                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
526f : 08              >            php         ;save flags
5270 : c901            >            cmp #1     ;test result
                       >            trap_ne
5272 : f003            >        beq skip1686
                       >        trap            ;failed not equal (non zero)
5274 : 20df73          >        jsr report_error
                       >
5277 :                 >skip1686
                       >
5277 : 68              >            pla         ;load status
5278 : 48              >            pha
                       >            cmp_flag ~fv
5279 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
527b : f003            >        beq skip1689
                       >        trap            ;failed not equal (non zero)
527d : 20df73          >        jsr report_error
                       >
5280 :                 >skip1689
                       >
5280 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
5281 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5283 : 48              >            pha         ;use stack to load status
5284 : a901            >            lda #1     ;precharge accu
5286 : 28              >            plp
                        
5287 : 2c1732                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
528a : 08              >            php         ;save flags
528b : c901            >            cmp #1     ;test result
                       >            trap_ne
528d : f003            >        beq skip1694
                       >        trap            ;failed not equal (non zero)
528f : 20df73          >        jsr report_error
                       >
5292 :                 >skip1694
                       >
5292 : 68              >            pla         ;load status
5293 : 48              >            pha
                       >            cmp_flag ~fz
5294 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5296 : f003            >        beq skip1697
                       >        trap            ;failed not equal (non zero)
5298 : 20df73          >        jsr report_error
                       >
529b :                 >skip1697
                       >
529b : 28              >            plp         ;restore status
                        
                                next_test
529c : ad0032          >            lda test_case   ;previous test
529f : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
52a1 : f003            >        beq skip1700
                       >        trap            ;failed not equal (non zero)
52a3 : 20df73          >        jsr report_error
                       >
52a6 :                 >skip1700
                       >
001a =                 >test_num = test_num + 1
52a6 : a91a            >            lda #test_num   ;*** next tests' number
52a8 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
52ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52ad : 48              >            pha         ;use stack to load status
52ae : a280            >            ldx #$80     ;precharge index x
52b0 : 28              >            plp
                        
52b1 : e45d                     cpx zp7f
                                tst_stat fc
52b3 : 08              >            php         ;save status
52b4 : 68              >            pla         ;use stack to retrieve status
52b5 : 48              >            pha
                       >            cmp_flag fc
52b6 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
52b8 : f003            >        beq skip1706
                       >        trap            ;failed not equal (non zero)
52ba : 20df73          >        jsr report_error
                       >
52bd :                 >skip1706
                       >
52bd : 28              >            plp         ;restore status
                        
52be : ca                       dex
52bf : e45d                     cpx zp7f
                                tst_stat fzc
52c1 : 08              >            php         ;save status
52c2 : 68              >            pla         ;use stack to retrieve status
52c3 : 48              >            pha
                       >            cmp_flag fzc
52c4 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
52c6 : f003            >        beq skip1710
                       >        trap            ;failed not equal (non zero)
52c8 : 20df73          >        jsr report_error
                       >
52cb :                 >skip1710
                       >
52cb : 28              >            plp         ;restore status
                        
52cc : ca                       dex
52cd : e45d                     cpx zp7f
                                tst_x $7e,fn
52cf : 08              >            php         ;save flags
52d0 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
52d2 : f003            >        beq skip1713
                       >        trap            ;failed not equal (non zero)
52d4 : 20df73          >        jsr report_error
                       >
52d7 :                 >skip1713
                       >
52d7 : 68              >            pla         ;load status
52d8 : 48              >            pha
                       >            cmp_flag fn
52d9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
52db : f003            >        beq skip1716
                       >        trap            ;failed not equal (non zero)
52dd : 20df73          >        jsr report_error
                       >
52e0 :                 >skip1716
                       >
52e0 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
52e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
52e3 : 48              >            pha         ;use stack to load status
52e4 : a280            >            ldx #$80     ;precharge index x
52e6 : 28              >            plp
                        
52e7 : e45d                     cpx zp7f
                                tst_stat ~fnz
52e9 : 08              >            php         ;save status
52ea : 68              >            pla         ;use stack to retrieve status
52eb : 48              >            pha
                       >            cmp_flag ~fnz
52ec : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
52ee : f003            >        beq skip1722
                       >        trap            ;failed not equal (non zero)
52f0 : 20df73          >        jsr report_error
                       >
52f3 :                 >skip1722
                       >
52f3 : 28              >            plp         ;restore status
                        
52f4 : ca                       dex
52f5 : e45d                     cpx zp7f
                                tst_stat ~fn
52f7 : 08              >            php         ;save status
52f8 : 68              >            pla         ;use stack to retrieve status
52f9 : 48              >            pha
                       >            cmp_flag ~fn
52fa : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
52fc : f003            >        beq skip1726
                       >        trap            ;failed not equal (non zero)
52fe : 20df73          >        jsr report_error
                       >
5301 :                 >skip1726
                       >
5301 : 28              >            plp         ;restore status
                        
5302 : ca                       dex
5303 : e45d                     cpx zp7f
                                tst_x $7e,~fzc
5305 : 08              >            php         ;save flags
5306 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5308 : f003            >        beq skip1729
                       >        trap            ;failed not equal (non zero)
530a : 20df73          >        jsr report_error
                       >
530d :                 >skip1729
                       >
530d : 68              >            pla         ;load status
530e : 48              >            pha
                       >            cmp_flag ~fzc
530f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5311 : f003            >        beq skip1732
                       >        trap            ;failed not equal (non zero)
5313 : 20df73          >        jsr report_error
                       >
5316 :                 >skip1732
                       >
5316 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
5317 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5319 : 48              >            pha         ;use stack to load status
531a : a280            >            ldx #$80     ;precharge index x
531c : 28              >            plp
                        
531d : ec1b32                   cpx abs7f
                                tst_stat fc
5320 : 08              >            php         ;save status
5321 : 68              >            pla         ;use stack to retrieve status
5322 : 48              >            pha
                       >            cmp_flag fc
5323 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5325 : f003            >        beq skip1738
                       >        trap            ;failed not equal (non zero)
5327 : 20df73          >        jsr report_error
                       >
532a :                 >skip1738
                       >
532a : 28              >            plp         ;restore status
                        
532b : ca                       dex
532c : ec1b32                   cpx abs7f
                                tst_stat fzc
532f : 08              >            php         ;save status
5330 : 68              >            pla         ;use stack to retrieve status
5331 : 48              >            pha
                       >            cmp_flag fzc
5332 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5334 : f003            >        beq skip1742
                       >        trap            ;failed not equal (non zero)
5336 : 20df73          >        jsr report_error
                       >
5339 :                 >skip1742
                       >
5339 : 28              >            plp         ;restore status
                        
533a : ca                       dex
533b : ec1b32                   cpx abs7f
                                tst_x $7e,fn
533e : 08              >            php         ;save flags
533f : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
5341 : f003            >        beq skip1745
                       >        trap            ;failed not equal (non zero)
5343 : 20df73          >        jsr report_error
                       >
5346 :                 >skip1745
                       >
5346 : 68              >            pla         ;load status
5347 : 48              >            pha
                       >            cmp_flag fn
5348 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
534a : f003            >        beq skip1748
                       >        trap            ;failed not equal (non zero)
534c : 20df73          >        jsr report_error
                       >
534f :                 >skip1748
                       >
534f : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
5350 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5352 : 48              >            pha         ;use stack to load status
5353 : a280            >            ldx #$80     ;precharge index x
5355 : 28              >            plp
                        
5356 : ec1b32                   cpx abs7f
                                tst_stat ~fnz
5359 : 08              >            php         ;save status
535a : 68              >            pla         ;use stack to retrieve status
535b : 48              >            pha
                       >            cmp_flag ~fnz
535c : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
535e : f003            >        beq skip1754
                       >        trap            ;failed not equal (non zero)
5360 : 20df73          >        jsr report_error
                       >
5363 :                 >skip1754
                       >
5363 : 28              >            plp         ;restore status
                        
5364 : ca                       dex
5365 : ec1b32                   cpx abs7f
                                tst_stat ~fn
5368 : 08              >            php         ;save status
5369 : 68              >            pla         ;use stack to retrieve status
536a : 48              >            pha
                       >            cmp_flag ~fn
536b : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
536d : f003            >        beq skip1758
                       >        trap            ;failed not equal (non zero)
536f : 20df73          >        jsr report_error
                       >
5372 :                 >skip1758
                       >
5372 : 28              >            plp         ;restore status
                        
5373 : ca                       dex
5374 : ec1b32                   cpx abs7f
                                tst_x $7e,~fzc
5377 : 08              >            php         ;save flags
5378 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
537a : f003            >        beq skip1761
                       >        trap            ;failed not equal (non zero)
537c : 20df73          >        jsr report_error
                       >
537f :                 >skip1761
                       >
537f : 68              >            pla         ;load status
5380 : 48              >            pha
                       >            cmp_flag ~fzc
5381 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5383 : f003            >        beq skip1764
                       >        trap            ;failed not equal (non zero)
5385 : 20df73          >        jsr report_error
                       >
5388 :                 >skip1764
                       >
5388 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
5389 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
538b : 48              >            pha         ;use stack to load status
538c : a280            >            ldx #$80     ;precharge index x
538e : 28              >            plp
                        
538f : e07f                     cpx #$7f
                                tst_stat fc
5391 : 08              >            php         ;save status
5392 : 68              >            pla         ;use stack to retrieve status
5393 : 48              >            pha
                       >            cmp_flag fc
5394 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5396 : f003            >        beq skip1770
                       >        trap            ;failed not equal (non zero)
5398 : 20df73          >        jsr report_error
                       >
539b :                 >skip1770
                       >
539b : 28              >            plp         ;restore status
                        
539c : ca                       dex
539d : e07f                     cpx #$7f
                                tst_stat fzc
539f : 08              >            php         ;save status
53a0 : 68              >            pla         ;use stack to retrieve status
53a1 : 48              >            pha
                       >            cmp_flag fzc
53a2 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
53a4 : f003            >        beq skip1774
                       >        trap            ;failed not equal (non zero)
53a6 : 20df73          >        jsr report_error
                       >
53a9 :                 >skip1774
                       >
53a9 : 28              >            plp         ;restore status
                        
53aa : ca                       dex
53ab : e07f                     cpx #$7f
                                tst_x $7e,fn
53ad : 08              >            php         ;save flags
53ae : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
53b0 : f003            >        beq skip1777
                       >        trap            ;failed not equal (non zero)
53b2 : 20df73          >        jsr report_error
                       >
53b5 :                 >skip1777
                       >
53b5 : 68              >            pla         ;load status
53b6 : 48              >            pha
                       >            cmp_flag fn
53b7 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
53b9 : f003            >        beq skip1780
                       >        trap            ;failed not equal (non zero)
53bb : 20df73          >        jsr report_error
                       >
53be :                 >skip1780
                       >
53be : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
53bf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
53c1 : 48              >            pha         ;use stack to load status
53c2 : a280            >            ldx #$80     ;precharge index x
53c4 : 28              >            plp
                        
53c5 : e07f                     cpx #$7f
                                tst_stat ~fnz
53c7 : 08              >            php         ;save status
53c8 : 68              >            pla         ;use stack to retrieve status
53c9 : 48              >            pha
                       >            cmp_flag ~fnz
53ca : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
53cc : f003            >        beq skip1786
                       >        trap            ;failed not equal (non zero)
53ce : 20df73          >        jsr report_error
                       >
53d1 :                 >skip1786
                       >
53d1 : 28              >            plp         ;restore status
                        
53d2 : ca                       dex
53d3 : e07f                     cpx #$7f
                                tst_stat ~fn
53d5 : 08              >            php         ;save status
53d6 : 68              >            pla         ;use stack to retrieve status
53d7 : 48              >            pha
                       >            cmp_flag ~fn
53d8 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
53da : f003            >        beq skip1790
                       >        trap            ;failed not equal (non zero)
53dc : 20df73          >        jsr report_error
                       >
53df :                 >skip1790
                       >
53df : 28              >            plp         ;restore status
                        
53e0 : ca                       dex
53e1 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
53e3 : 08              >            php         ;save flags
53e4 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
53e6 : f003            >        beq skip1793
                       >        trap            ;failed not equal (non zero)
53e8 : 20df73          >        jsr report_error
                       >
53eb :                 >skip1793
                       >
53eb : 68              >            pla         ;load status
53ec : 48              >            pha
                       >            cmp_flag ~fzc
53ed : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
53ef : f003            >        beq skip1796
                       >        trap            ;failed not equal (non zero)
53f1 : 20df73          >        jsr report_error
                       >
53f4 :                 >skip1796
                       >
53f4 : 28              >            plp         ;restore status
                        
                                next_test
53f5 : ad0032          >            lda test_case   ;previous test
53f8 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
53fa : f003            >        beq skip1799
                       >        trap            ;failed not equal (non zero)
53fc : 20df73          >        jsr report_error
                       >
53ff :                 >skip1799
                       >
001b =                 >test_num = test_num + 1
53ff : a91b            >            lda #test_num   ;*** next tests' number
5401 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
5404 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5406 : 48              >            pha         ;use stack to load status
5407 : a080            >            ldy #$80     ;precharge index y
5409 : 28              >            plp
                        
540a : c45d                     cpy zp7f
                                tst_stat fc
540c : 08              >            php         ;save status
540d : 68              >            pla         ;use stack to retrieve status
540e : 48              >            pha
                       >            cmp_flag fc
540f : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5411 : f003            >        beq skip1805
                       >        trap            ;failed not equal (non zero)
5413 : 20df73          >        jsr report_error
                       >
5416 :                 >skip1805
                       >
5416 : 28              >            plp         ;restore status
                        
5417 : 88                       dey
5418 : c45d                     cpy zp7f
                                tst_stat fzc
541a : 08              >            php         ;save status
541b : 68              >            pla         ;use stack to retrieve status
541c : 48              >            pha
                       >            cmp_flag fzc
541d : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
541f : f003            >        beq skip1809
                       >        trap            ;failed not equal (non zero)
5421 : 20df73          >        jsr report_error
                       >
5424 :                 >skip1809
                       >
5424 : 28              >            plp         ;restore status
                        
5425 : 88                       dey
5426 : c45d                     cpy zp7f
                                tst_y $7e,fn
5428 : 08              >            php         ;save flags
5429 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
542b : f003            >        beq skip1812
                       >        trap            ;failed not equal (non zero)
542d : 20df73          >        jsr report_error
                       >
5430 :                 >skip1812
                       >
5430 : 68              >            pla         ;load status
5431 : 48              >            pha
                       >            cmp_flag fn
5432 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5434 : f003            >        beq skip1815
                       >        trap            ;failed not equal (non zero)
5436 : 20df73          >        jsr report_error
                       >
5439 :                 >skip1815
                       >
5439 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
543a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
543c : 48              >            pha         ;use stack to load status
543d : a080            >            ldy #$80     ;precharge index y
543f : 28              >            plp
                        
5440 : c45d                     cpy zp7f
                                tst_stat ~fnz
5442 : 08              >            php         ;save status
5443 : 68              >            pla         ;use stack to retrieve status
5444 : 48              >            pha
                       >            cmp_flag ~fnz
5445 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5447 : f003            >        beq skip1821
                       >        trap            ;failed not equal (non zero)
5449 : 20df73          >        jsr report_error
                       >
544c :                 >skip1821
                       >
544c : 28              >            plp         ;restore status
                        
544d : 88                       dey
544e : c45d                     cpy zp7f
                                tst_stat ~fn
5450 : 08              >            php         ;save status
5451 : 68              >            pla         ;use stack to retrieve status
5452 : 48              >            pha
                       >            cmp_flag ~fn
5453 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5455 : f003            >        beq skip1825
                       >        trap            ;failed not equal (non zero)
5457 : 20df73          >        jsr report_error
                       >
545a :                 >skip1825
                       >
545a : 28              >            plp         ;restore status
                        
545b : 88                       dey
545c : c45d                     cpy zp7f
                                tst_y $7e,~fzc
545e : 08              >            php         ;save flags
545f : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5461 : f003            >        beq skip1828
                       >        trap            ;failed not equal (non zero)
5463 : 20df73          >        jsr report_error
                       >
5466 :                 >skip1828
                       >
5466 : 68              >            pla         ;load status
5467 : 48              >            pha
                       >            cmp_flag ~fzc
5468 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
546a : f003            >        beq skip1831
                       >        trap            ;failed not equal (non zero)
546c : 20df73          >        jsr report_error
                       >
546f :                 >skip1831
                       >
546f : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
5470 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5472 : 48              >            pha         ;use stack to load status
5473 : a080            >            ldy #$80     ;precharge index y
5475 : 28              >            plp
                        
5476 : cc1b32                   cpy abs7f
                                tst_stat fc
5479 : 08              >            php         ;save status
547a : 68              >            pla         ;use stack to retrieve status
547b : 48              >            pha
                       >            cmp_flag fc
547c : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
547e : f003            >        beq skip1837
                       >        trap            ;failed not equal (non zero)
5480 : 20df73          >        jsr report_error
                       >
5483 :                 >skip1837
                       >
5483 : 28              >            plp         ;restore status
                        
5484 : 88                       dey
5485 : cc1b32                   cpy abs7f
                                tst_stat fzc
5488 : 08              >            php         ;save status
5489 : 68              >            pla         ;use stack to retrieve status
548a : 48              >            pha
                       >            cmp_flag fzc
548b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
548d : f003            >        beq skip1841
                       >        trap            ;failed not equal (non zero)
548f : 20df73          >        jsr report_error
                       >
5492 :                 >skip1841
                       >
5492 : 28              >            plp         ;restore status
                        
5493 : 88                       dey
5494 : cc1b32                   cpy abs7f
                                tst_y $7e,fn
5497 : 08              >            php         ;save flags
5498 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
549a : f003            >        beq skip1844
                       >        trap            ;failed not equal (non zero)
549c : 20df73          >        jsr report_error
                       >
549f :                 >skip1844
                       >
549f : 68              >            pla         ;load status
54a0 : 48              >            pha
                       >            cmp_flag fn
54a1 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54a3 : f003            >        beq skip1847
                       >        trap            ;failed not equal (non zero)
54a5 : 20df73          >        jsr report_error
                       >
54a8 :                 >skip1847
                       >
54a8 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
54a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
54ab : 48              >            pha         ;use stack to load status
54ac : a080            >            ldy #$80     ;precharge index y
54ae : 28              >            plp
                        
54af : cc1b32                   cpy abs7f
                                tst_stat ~fnz
54b2 : 08              >            php         ;save status
54b3 : 68              >            pla         ;use stack to retrieve status
54b4 : 48              >            pha
                       >            cmp_flag ~fnz
54b5 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54b7 : f003            >        beq skip1853
                       >        trap            ;failed not equal (non zero)
54b9 : 20df73          >        jsr report_error
                       >
54bc :                 >skip1853
                       >
54bc : 28              >            plp         ;restore status
                        
54bd : 88                       dey
54be : cc1b32                   cpy abs7f
                                tst_stat ~fn
54c1 : 08              >            php         ;save status
54c2 : 68              >            pla         ;use stack to retrieve status
54c3 : 48              >            pha
                       >            cmp_flag ~fn
54c4 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54c6 : f003            >        beq skip1857
                       >        trap            ;failed not equal (non zero)
54c8 : 20df73          >        jsr report_error
                       >
54cb :                 >skip1857
                       >
54cb : 28              >            plp         ;restore status
                        
54cc : 88                       dey
54cd : cc1b32                   cpy abs7f
                                tst_y $7e,~fzc
54d0 : 08              >            php         ;save flags
54d1 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
54d3 : f003            >        beq skip1860
                       >        trap            ;failed not equal (non zero)
54d5 : 20df73          >        jsr report_error
                       >
54d8 :                 >skip1860
                       >
54d8 : 68              >            pla         ;load status
54d9 : 48              >            pha
                       >            cmp_flag ~fzc
54da : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54dc : f003            >        beq skip1863
                       >        trap            ;failed not equal (non zero)
54de : 20df73          >        jsr report_error
                       >
54e1 :                 >skip1863
                       >
54e1 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
54e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
54e4 : 48              >            pha         ;use stack to load status
54e5 : a080            >            ldy #$80     ;precharge index y
54e7 : 28              >            plp
                        
54e8 : c07f                     cpy #$7f
                                tst_stat fc
54ea : 08              >            php         ;save status
54eb : 68              >            pla         ;use stack to retrieve status
54ec : 48              >            pha
                       >            cmp_flag fc
54ed : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54ef : f003            >        beq skip1869
                       >        trap            ;failed not equal (non zero)
54f1 : 20df73          >        jsr report_error
                       >
54f4 :                 >skip1869
                       >
54f4 : 28              >            plp         ;restore status
                        
54f5 : 88                       dey
54f6 : c07f                     cpy #$7f
                                tst_stat fzc
54f8 : 08              >            php         ;save status
54f9 : 68              >            pla         ;use stack to retrieve status
54fa : 48              >            pha
                       >            cmp_flag fzc
54fb : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
54fd : f003            >        beq skip1873
                       >        trap            ;failed not equal (non zero)
54ff : 20df73          >        jsr report_error
                       >
5502 :                 >skip1873
                       >
5502 : 28              >            plp         ;restore status
                        
5503 : 88                       dey
5504 : c07f                     cpy #$7f
                                tst_y $7e,fn
5506 : 08              >            php         ;save flags
5507 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
5509 : f003            >        beq skip1876
                       >        trap            ;failed not equal (non zero)
550b : 20df73          >        jsr report_error
                       >
550e :                 >skip1876
                       >
550e : 68              >            pla         ;load status
550f : 48              >            pha
                       >            cmp_flag fn
5510 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5512 : f003            >        beq skip1879
                       >        trap            ;failed not equal (non zero)
5514 : 20df73          >        jsr report_error
                       >
5517 :                 >skip1879
                       >
5517 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
5518 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
551a : 48              >            pha         ;use stack to load status
551b : a080            >            ldy #$80     ;precharge index y
551d : 28              >            plp
                        
551e : c07f                     cpy #$7f
                                tst_stat ~fnz
5520 : 08              >            php         ;save status
5521 : 68              >            pla         ;use stack to retrieve status
5522 : 48              >            pha
                       >            cmp_flag ~fnz
5523 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5525 : f003            >        beq skip1885
                       >        trap            ;failed not equal (non zero)
5527 : 20df73          >        jsr report_error
                       >
552a :                 >skip1885
                       >
552a : 28              >            plp         ;restore status
                        
552b : 88                       dey
552c : c07f                     cpy #$7f
                                tst_stat ~fn
552e : 08              >            php         ;save status
552f : 68              >            pla         ;use stack to retrieve status
5530 : 48              >            pha
                       >            cmp_flag ~fn
5531 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5533 : f003            >        beq skip1889
                       >        trap            ;failed not equal (non zero)
5535 : 20df73          >        jsr report_error
                       >
5538 :                 >skip1889
                       >
5538 : 28              >            plp         ;restore status
                        
5539 : 88                       dey
553a : c07f                     cpy #$7f
                                tst_y $7e,~fzc
553c : 08              >            php         ;save flags
553d : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
553f : f003            >        beq skip1892
                       >        trap            ;failed not equal (non zero)
5541 : 20df73          >        jsr report_error
                       >
5544 :                 >skip1892
                       >
5544 : 68              >            pla         ;load status
5545 : 48              >            pha
                       >            cmp_flag ~fzc
5546 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5548 : f003            >        beq skip1895
                       >        trap            ;failed not equal (non zero)
554a : 20df73          >        jsr report_error
                       >
554d :                 >skip1895
                       >
554d : 28              >            plp         ;restore status
                        
                                next_test
554e : ad0032          >            lda test_case   ;previous test
5551 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5553 : f003            >        beq skip1898
                       >        trap            ;failed not equal (non zero)
5555 : 20df73          >        jsr report_error
                       >
5558 :                 >skip1898
                       >
001c =                 >test_num = test_num + 1
5558 : a91c            >            lda #test_num   ;*** next tests' number
555a : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
555d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
555f : 48              >            pha         ;use stack to load status
5560 : a980            >            lda #$80     ;precharge accu
5562 : 28              >            plp
                        
5563 : c55d                     cmp zp7f
                                tst_a $80,fc
5565 : 08              >            php         ;save flags
5566 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5568 : f003            >        beq skip1903
                       >        trap            ;failed not equal (non zero)
556a : 20df73          >        jsr report_error
                       >
556d :                 >skip1903
                       >
556d : 68              >            pla         ;load status
556e : 48              >            pha
                       >            cmp_flag fc
556f : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5571 : f003            >        beq skip1906
                       >        trap            ;failed not equal (non zero)
5573 : 20df73          >        jsr report_error
                       >
5576 :                 >skip1906
                       >
5576 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5577 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5579 : 48              >            pha         ;use stack to load status
557a : a97f            >            lda #$7f     ;precharge accu
557c : 28              >            plp
                        
557d : c55d                     cmp zp7f
                                tst_a $7f,fzc
557f : 08              >            php         ;save flags
5580 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5582 : f003            >        beq skip1911
                       >        trap            ;failed not equal (non zero)
5584 : 20df73          >        jsr report_error
                       >
5587 :                 >skip1911
                       >
5587 : 68              >            pla         ;load status
5588 : 48              >            pha
                       >            cmp_flag fzc
5589 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
558b : f003            >        beq skip1914
                       >        trap            ;failed not equal (non zero)
558d : 20df73          >        jsr report_error
                       >
5590 :                 >skip1914
                       >
5590 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5591 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5593 : 48              >            pha         ;use stack to load status
5594 : a97e            >            lda #$7e     ;precharge accu
5596 : 28              >            plp
                        
5597 : c55d                     cmp zp7f
                                tst_a $7e,fn
5599 : 08              >            php         ;save flags
559a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
559c : f003            >        beq skip1919
                       >        trap            ;failed not equal (non zero)
559e : 20df73          >        jsr report_error
                       >
55a1 :                 >skip1919
                       >
55a1 : 68              >            pla         ;load status
55a2 : 48              >            pha
                       >            cmp_flag fn
55a3 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
55a5 : f003            >        beq skip1922
                       >        trap            ;failed not equal (non zero)
55a7 : 20df73          >        jsr report_error
                       >
55aa :                 >skip1922
                       >
55aa : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
55ab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55ad : 48              >            pha         ;use stack to load status
55ae : a980            >            lda #$80     ;precharge accu
55b0 : 28              >            plp
                        
55b1 : c55d                     cmp zp7f
                                tst_a $80,~fnz
55b3 : 08              >            php         ;save flags
55b4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
55b6 : f003            >        beq skip1927
                       >        trap            ;failed not equal (non zero)
55b8 : 20df73          >        jsr report_error
                       >
55bb :                 >skip1927
                       >
55bb : 68              >            pla         ;load status
55bc : 48              >            pha
                       >            cmp_flag ~fnz
55bd : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
55bf : f003            >        beq skip1930
                       >        trap            ;failed not equal (non zero)
55c1 : 20df73          >        jsr report_error
                       >
55c4 :                 >skip1930
                       >
55c4 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
55c5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55c7 : 48              >            pha         ;use stack to load status
55c8 : a97f            >            lda #$7f     ;precharge accu
55ca : 28              >            plp
                        
55cb : c55d                     cmp zp7f
                                tst_a $7f,~fn
55cd : 08              >            php         ;save flags
55ce : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
55d0 : f003            >        beq skip1935
                       >        trap            ;failed not equal (non zero)
55d2 : 20df73          >        jsr report_error
                       >
55d5 :                 >skip1935
                       >
55d5 : 68              >            pla         ;load status
55d6 : 48              >            pha
                       >            cmp_flag ~fn
55d7 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
55d9 : f003            >        beq skip1938
                       >        trap            ;failed not equal (non zero)
55db : 20df73          >        jsr report_error
                       >
55de :                 >skip1938
                       >
55de : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
55df : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55e1 : 48              >            pha         ;use stack to load status
55e2 : a97e            >            lda #$7e     ;precharge accu
55e4 : 28              >            plp
                        
55e5 : c55d                     cmp zp7f
                                tst_a $7e,~fzc
55e7 : 08              >            php         ;save flags
55e8 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
55ea : f003            >        beq skip1943
                       >        trap            ;failed not equal (non zero)
55ec : 20df73          >        jsr report_error
                       >
55ef :                 >skip1943
                       >
55ef : 68              >            pla         ;load status
55f0 : 48              >            pha
                       >            cmp_flag ~fzc
55f1 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
55f3 : f003            >        beq skip1946
                       >        trap            ;failed not equal (non zero)
55f5 : 20df73          >        jsr report_error
                       >
55f8 :                 >skip1946
                       >
55f8 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
55f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
55fb : 48              >            pha         ;use stack to load status
55fc : a980            >            lda #$80     ;precharge accu
55fe : 28              >            plp
                        
55ff : cd1b32                   cmp abs7f
                                tst_a $80,fc
5602 : 08              >            php         ;save flags
5603 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5605 : f003            >        beq skip1951
                       >        trap            ;failed not equal (non zero)
5607 : 20df73          >        jsr report_error
                       >
560a :                 >skip1951
                       >
560a : 68              >            pla         ;load status
560b : 48              >            pha
                       >            cmp_flag fc
560c : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
560e : f003            >        beq skip1954
                       >        trap            ;failed not equal (non zero)
5610 : 20df73          >        jsr report_error
                       >
5613 :                 >skip1954
                       >
5613 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5614 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5616 : 48              >            pha         ;use stack to load status
5617 : a97f            >            lda #$7f     ;precharge accu
5619 : 28              >            plp
                        
561a : cd1b32                   cmp abs7f
                                tst_a $7f,fzc
561d : 08              >            php         ;save flags
561e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5620 : f003            >        beq skip1959
                       >        trap            ;failed not equal (non zero)
5622 : 20df73          >        jsr report_error
                       >
5625 :                 >skip1959
                       >
5625 : 68              >            pla         ;load status
5626 : 48              >            pha
                       >            cmp_flag fzc
5627 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5629 : f003            >        beq skip1962
                       >        trap            ;failed not equal (non zero)
562b : 20df73          >        jsr report_error
                       >
562e :                 >skip1962
                       >
562e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
562f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5631 : 48              >            pha         ;use stack to load status
5632 : a97e            >            lda #$7e     ;precharge accu
5634 : 28              >            plp
                        
5635 : cd1b32                   cmp abs7f
                                tst_a $7e,fn
5638 : 08              >            php         ;save flags
5639 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
563b : f003            >        beq skip1967
                       >        trap            ;failed not equal (non zero)
563d : 20df73          >        jsr report_error
                       >
5640 :                 >skip1967
                       >
5640 : 68              >            pla         ;load status
5641 : 48              >            pha
                       >            cmp_flag fn
5642 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5644 : f003            >        beq skip1970
                       >        trap            ;failed not equal (non zero)
5646 : 20df73          >        jsr report_error
                       >
5649 :                 >skip1970
                       >
5649 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
564a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
564c : 48              >            pha         ;use stack to load status
564d : a980            >            lda #$80     ;precharge accu
564f : 28              >            plp
                        
5650 : cd1b32                   cmp abs7f
                                tst_a $80,~fnz
5653 : 08              >            php         ;save flags
5654 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5656 : f003            >        beq skip1975
                       >        trap            ;failed not equal (non zero)
5658 : 20df73          >        jsr report_error
                       >
565b :                 >skip1975
                       >
565b : 68              >            pla         ;load status
565c : 48              >            pha
                       >            cmp_flag ~fnz
565d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
565f : f003            >        beq skip1978
                       >        trap            ;failed not equal (non zero)
5661 : 20df73          >        jsr report_error
                       >
5664 :                 >skip1978
                       >
5664 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5665 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5667 : 48              >            pha         ;use stack to load status
5668 : a97f            >            lda #$7f     ;precharge accu
566a : 28              >            plp
                        
566b : cd1b32                   cmp abs7f
                                tst_a $7f,~fn
566e : 08              >            php         ;save flags
566f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5671 : f003            >        beq skip1983
                       >        trap            ;failed not equal (non zero)
5673 : 20df73          >        jsr report_error
                       >
5676 :                 >skip1983
                       >
5676 : 68              >            pla         ;load status
5677 : 48              >            pha
                       >            cmp_flag ~fn
5678 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
567a : f003            >        beq skip1986
                       >        trap            ;failed not equal (non zero)
567c : 20df73          >        jsr report_error
                       >
567f :                 >skip1986
                       >
567f : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5680 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5682 : 48              >            pha         ;use stack to load status
5683 : a97e            >            lda #$7e     ;precharge accu
5685 : 28              >            plp
                        
5686 : cd1b32                   cmp abs7f
                                tst_a $7e,~fzc
5689 : 08              >            php         ;save flags
568a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
568c : f003            >        beq skip1991
                       >        trap            ;failed not equal (non zero)
568e : 20df73          >        jsr report_error
                       >
5691 :                 >skip1991
                       >
5691 : 68              >            pla         ;load status
5692 : 48              >            pha
                       >            cmp_flag ~fzc
5693 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5695 : f003            >        beq skip1994
                       >        trap            ;failed not equal (non zero)
5697 : 20df73          >        jsr report_error
                       >
569a :                 >skip1994
                       >
569a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
569b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
569d : 48              >            pha         ;use stack to load status
569e : a980            >            lda #$80     ;precharge accu
56a0 : 28              >            plp
                        
56a1 : c97f                     cmp #$7f
                                tst_a $80,fc
56a3 : 08              >            php         ;save flags
56a4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
56a6 : f003            >        beq skip1999
                       >        trap            ;failed not equal (non zero)
56a8 : 20df73          >        jsr report_error
                       >
56ab :                 >skip1999
                       >
56ab : 68              >            pla         ;load status
56ac : 48              >            pha
                       >            cmp_flag fc
56ad : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
56af : f003            >        beq skip2002
                       >        trap            ;failed not equal (non zero)
56b1 : 20df73          >        jsr report_error
                       >
56b4 :                 >skip2002
                       >
56b4 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
56b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
56b7 : 48              >            pha         ;use stack to load status
56b8 : a97f            >            lda #$7f     ;precharge accu
56ba : 28              >            plp
                        
56bb : c97f                     cmp #$7f
                                tst_a $7f,fzc
56bd : 08              >            php         ;save flags
56be : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
56c0 : f003            >        beq skip2007
                       >        trap            ;failed not equal (non zero)
56c2 : 20df73          >        jsr report_error
                       >
56c5 :                 >skip2007
                       >
56c5 : 68              >            pla         ;load status
56c6 : 48              >            pha
                       >            cmp_flag fzc
56c7 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
56c9 : f003            >        beq skip2010
                       >        trap            ;failed not equal (non zero)
56cb : 20df73          >        jsr report_error
                       >
56ce :                 >skip2010
                       >
56ce : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
56cf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
56d1 : 48              >            pha         ;use stack to load status
56d2 : a97e            >            lda #$7e     ;precharge accu
56d4 : 28              >            plp
                        
56d5 : c97f                     cmp #$7f
                                tst_a $7e,fn
56d7 : 08              >            php         ;save flags
56d8 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
56da : f003            >        beq skip2015
                       >        trap            ;failed not equal (non zero)
56dc : 20df73          >        jsr report_error
                       >
56df :                 >skip2015
                       >
56df : 68              >            pla         ;load status
56e0 : 48              >            pha
                       >            cmp_flag fn
56e1 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
56e3 : f003            >        beq skip2018
                       >        trap            ;failed not equal (non zero)
56e5 : 20df73          >        jsr report_error
                       >
56e8 :                 >skip2018
                       >
56e8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
56e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56eb : 48              >            pha         ;use stack to load status
56ec : a980            >            lda #$80     ;precharge accu
56ee : 28              >            plp
                        
56ef : c97f                     cmp #$7f
                                tst_a $80,~fnz
56f1 : 08              >            php         ;save flags
56f2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
56f4 : f003            >        beq skip2023
                       >        trap            ;failed not equal (non zero)
56f6 : 20df73          >        jsr report_error
                       >
56f9 :                 >skip2023
                       >
56f9 : 68              >            pla         ;load status
56fa : 48              >            pha
                       >            cmp_flag ~fnz
56fb : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
56fd : f003            >        beq skip2026
                       >        trap            ;failed not equal (non zero)
56ff : 20df73          >        jsr report_error
                       >
5702 :                 >skip2026
                       >
5702 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5703 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5705 : 48              >            pha         ;use stack to load status
5706 : a97f            >            lda #$7f     ;precharge accu
5708 : 28              >            plp
                        
5709 : c97f                     cmp #$7f
                                tst_a $7f,~fn
570b : 08              >            php         ;save flags
570c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
570e : f003            >        beq skip2031
                       >        trap            ;failed not equal (non zero)
5710 : 20df73          >        jsr report_error
                       >
5713 :                 >skip2031
                       >
5713 : 68              >            pla         ;load status
5714 : 48              >            pha
                       >            cmp_flag ~fn
5715 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5717 : f003            >        beq skip2034
                       >        trap            ;failed not equal (non zero)
5719 : 20df73          >        jsr report_error
                       >
571c :                 >skip2034
                       >
571c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
571d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
571f : 48              >            pha         ;use stack to load status
5720 : a97e            >            lda #$7e     ;precharge accu
5722 : 28              >            plp
                        
5723 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
5725 : 08              >            php         ;save flags
5726 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5728 : f003            >        beq skip2039
                       >        trap            ;failed not equal (non zero)
572a : 20df73          >        jsr report_error
                       >
572d :                 >skip2039
                       >
572d : 68              >            pla         ;load status
572e : 48              >            pha
                       >            cmp_flag ~fzc
572f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5731 : f003            >        beq skip2042
                       >        trap            ;failed not equal (non zero)
5733 : 20df73          >        jsr report_error
                       >
5736 :                 >skip2042
                       >
5736 : 28              >            plp         ;restore status
                        
                        
5737 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
5739 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
573b : 48              >            pha         ;use stack to load status
573c : a980            >            lda #$80     ;precharge accu
573e : 28              >            plp
                        
573f : d559                     cmp zp1,x
                                tst_a $80,fc
5741 : 08              >            php         ;save flags
5742 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5744 : f003            >        beq skip2047
                       >        trap            ;failed not equal (non zero)
5746 : 20df73          >        jsr report_error
                       >
5749 :                 >skip2047
                       >
5749 : 68              >            pla         ;load status
574a : 48              >            pha
                       >            cmp_flag fc
574b : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
574d : f003            >        beq skip2050
                       >        trap            ;failed not equal (non zero)
574f : 20df73          >        jsr report_error
                       >
5752 :                 >skip2050
                       >
5752 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5753 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5755 : 48              >            pha         ;use stack to load status
5756 : a97f            >            lda #$7f     ;precharge accu
5758 : 28              >            plp
                        
5759 : d559                     cmp zp1,x
                                tst_a $7f,fzc
575b : 08              >            php         ;save flags
575c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
575e : f003            >        beq skip2055
                       >        trap            ;failed not equal (non zero)
5760 : 20df73          >        jsr report_error
                       >
5763 :                 >skip2055
                       >
5763 : 68              >            pla         ;load status
5764 : 48              >            pha
                       >            cmp_flag fzc
5765 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5767 : f003            >        beq skip2058
                       >        trap            ;failed not equal (non zero)
5769 : 20df73          >        jsr report_error
                       >
576c :                 >skip2058
                       >
576c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
576d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
576f : 48              >            pha         ;use stack to load status
5770 : a97e            >            lda #$7e     ;precharge accu
5772 : 28              >            plp
                        
5773 : d559                     cmp zp1,x
                                tst_a $7e,fn
5775 : 08              >            php         ;save flags
5776 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5778 : f003            >        beq skip2063
                       >        trap            ;failed not equal (non zero)
577a : 20df73          >        jsr report_error
                       >
577d :                 >skip2063
                       >
577d : 68              >            pla         ;load status
577e : 48              >            pha
                       >            cmp_flag fn
577f : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5781 : f003            >        beq skip2066
                       >        trap            ;failed not equal (non zero)
5783 : 20df73          >        jsr report_error
                       >
5786 :                 >skip2066
                       >
5786 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5787 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5789 : 48              >            pha         ;use stack to load status
578a : a980            >            lda #$80     ;precharge accu
578c : 28              >            plp
                        
578d : d559                     cmp zp1,x
                                tst_a $80,~fnz
578f : 08              >            php         ;save flags
5790 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5792 : f003            >        beq skip2071
                       >        trap            ;failed not equal (non zero)
5794 : 20df73          >        jsr report_error
                       >
5797 :                 >skip2071
                       >
5797 : 68              >            pla         ;load status
5798 : 48              >            pha
                       >            cmp_flag ~fnz
5799 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
579b : f003            >        beq skip2074
                       >        trap            ;failed not equal (non zero)
579d : 20df73          >        jsr report_error
                       >
57a0 :                 >skip2074
                       >
57a0 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
57a1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57a3 : 48              >            pha         ;use stack to load status
57a4 : a97f            >            lda #$7f     ;precharge accu
57a6 : 28              >            plp
                        
57a7 : d559                     cmp zp1,x
                                tst_a $7f,~fn
57a9 : 08              >            php         ;save flags
57aa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
57ac : f003            >        beq skip2079
                       >        trap            ;failed not equal (non zero)
57ae : 20df73          >        jsr report_error
                       >
57b1 :                 >skip2079
                       >
57b1 : 68              >            pla         ;load status
57b2 : 48              >            pha
                       >            cmp_flag ~fn
57b3 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57b5 : f003            >        beq skip2082
                       >        trap            ;failed not equal (non zero)
57b7 : 20df73          >        jsr report_error
                       >
57ba :                 >skip2082
                       >
57ba : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
57bb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
57bd : 48              >            pha         ;use stack to load status
57be : a97e            >            lda #$7e     ;precharge accu
57c0 : 28              >            plp
                        
57c1 : d559                     cmp zp1,x
                                tst_a $7e,~fzc
57c3 : 08              >            php         ;save flags
57c4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
57c6 : f003            >        beq skip2087
                       >        trap            ;failed not equal (non zero)
57c8 : 20df73          >        jsr report_error
                       >
57cb :                 >skip2087
                       >
57cb : 68              >            pla         ;load status
57cc : 48              >            pha
                       >            cmp_flag ~fzc
57cd : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57cf : f003            >        beq skip2090
                       >        trap            ;failed not equal (non zero)
57d1 : 20df73          >        jsr report_error
                       >
57d4 :                 >skip2090
                       >
57d4 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
57d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
57d7 : 48              >            pha         ;use stack to load status
57d8 : a980            >            lda #$80     ;precharge accu
57da : 28              >            plp
                        
57db : dd1732                   cmp abs1,x
                                tst_a $80,fc
57de : 08              >            php         ;save flags
57df : c980            >            cmp #$80     ;test result
                       >            trap_ne
57e1 : f003            >        beq skip2095
                       >        trap            ;failed not equal (non zero)
57e3 : 20df73          >        jsr report_error
                       >
57e6 :                 >skip2095
                       >
57e6 : 68              >            pla         ;load status
57e7 : 48              >            pha
                       >            cmp_flag fc
57e8 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
57ea : f003            >        beq skip2098
                       >        trap            ;failed not equal (non zero)
57ec : 20df73          >        jsr report_error
                       >
57ef :                 >skip2098
                       >
57ef : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
57f0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
57f2 : 48              >            pha         ;use stack to load status
57f3 : a97f            >            lda #$7f     ;precharge accu
57f5 : 28              >            plp
                        
57f6 : dd1732                   cmp abs1,x
                                tst_a $7f,fzc
57f9 : 08              >            php         ;save flags
57fa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
57fc : f003            >        beq skip2103
                       >        trap            ;failed not equal (non zero)
57fe : 20df73          >        jsr report_error
                       >
5801 :                 >skip2103
                       >
5801 : 68              >            pla         ;load status
5802 : 48              >            pha
                       >            cmp_flag fzc
5803 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5805 : f003            >        beq skip2106
                       >        trap            ;failed not equal (non zero)
5807 : 20df73          >        jsr report_error
                       >
580a :                 >skip2106
                       >
580a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
580b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
580d : 48              >            pha         ;use stack to load status
580e : a97e            >            lda #$7e     ;precharge accu
5810 : 28              >            plp
                        
5811 : dd1732                   cmp abs1,x
                                tst_a $7e,fn
5814 : 08              >            php         ;save flags
5815 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5817 : f003            >        beq skip2111
                       >        trap            ;failed not equal (non zero)
5819 : 20df73          >        jsr report_error
                       >
581c :                 >skip2111
                       >
581c : 68              >            pla         ;load status
581d : 48              >            pha
                       >            cmp_flag fn
581e : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5820 : f003            >        beq skip2114
                       >        trap            ;failed not equal (non zero)
5822 : 20df73          >        jsr report_error
                       >
5825 :                 >skip2114
                       >
5825 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5826 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5828 : 48              >            pha         ;use stack to load status
5829 : a980            >            lda #$80     ;precharge accu
582b : 28              >            plp
                        
582c : dd1732                   cmp abs1,x
                                tst_a $80,~fnz
582f : 08              >            php         ;save flags
5830 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5832 : f003            >        beq skip2119
                       >        trap            ;failed not equal (non zero)
5834 : 20df73          >        jsr report_error
                       >
5837 :                 >skip2119
                       >
5837 : 68              >            pla         ;load status
5838 : 48              >            pha
                       >            cmp_flag ~fnz
5839 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
583b : f003            >        beq skip2122
                       >        trap            ;failed not equal (non zero)
583d : 20df73          >        jsr report_error
                       >
5840 :                 >skip2122
                       >
5840 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5841 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5843 : 48              >            pha         ;use stack to load status
5844 : a97f            >            lda #$7f     ;precharge accu
5846 : 28              >            plp
                        
5847 : dd1732                   cmp abs1,x
                                tst_a $7f,~fn
584a : 08              >            php         ;save flags
584b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
584d : f003            >        beq skip2127
                       >        trap            ;failed not equal (non zero)
584f : 20df73          >        jsr report_error
                       >
5852 :                 >skip2127
                       >
5852 : 68              >            pla         ;load status
5853 : 48              >            pha
                       >            cmp_flag ~fn
5854 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5856 : f003            >        beq skip2130
                       >        trap            ;failed not equal (non zero)
5858 : 20df73          >        jsr report_error
                       >
585b :                 >skip2130
                       >
585b : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
585c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
585e : 48              >            pha         ;use stack to load status
585f : a97e            >            lda #$7e     ;precharge accu
5861 : 28              >            plp
                        
5862 : dd1732                   cmp abs1,x
                                tst_a $7e,~fzc
5865 : 08              >            php         ;save flags
5866 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5868 : f003            >        beq skip2135
                       >        trap            ;failed not equal (non zero)
586a : 20df73          >        jsr report_error
                       >
586d :                 >skip2135
                       >
586d : 68              >            pla         ;load status
586e : 48              >            pha
                       >            cmp_flag ~fzc
586f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5871 : f003            >        beq skip2138
                       >        trap            ;failed not equal (non zero)
5873 : 20df73          >        jsr report_error
                       >
5876 :                 >skip2138
                       >
5876 : 28              >            plp         ;restore status
                        
                        
5877 : a004                     ldy #4          ;with indexing by Y
5879 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
587b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
587d : 48              >            pha         ;use stack to load status
587e : a980            >            lda #$80     ;precharge accu
5880 : 28              >            plp
                        
5881 : d91732                   cmp abs1,y
                                tst_a $80,fc
5884 : 08              >            php         ;save flags
5885 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5887 : f003            >        beq skip2143
                       >        trap            ;failed not equal (non zero)
5889 : 20df73          >        jsr report_error
                       >
588c :                 >skip2143
                       >
588c : 68              >            pla         ;load status
588d : 48              >            pha
                       >            cmp_flag fc
588e : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5890 : f003            >        beq skip2146
                       >        trap            ;failed not equal (non zero)
5892 : 20df73          >        jsr report_error
                       >
5895 :                 >skip2146
                       >
5895 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5896 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5898 : 48              >            pha         ;use stack to load status
5899 : a97f            >            lda #$7f     ;precharge accu
589b : 28              >            plp
                        
589c : d91732                   cmp abs1,y
                                tst_a $7f,fzc
589f : 08              >            php         ;save flags
58a0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
58a2 : f003            >        beq skip2151
                       >        trap            ;failed not equal (non zero)
58a4 : 20df73          >        jsr report_error
                       >
58a7 :                 >skip2151
                       >
58a7 : 68              >            pla         ;load status
58a8 : 48              >            pha
                       >            cmp_flag fzc
58a9 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58ab : f003            >        beq skip2154
                       >        trap            ;failed not equal (non zero)
58ad : 20df73          >        jsr report_error
                       >
58b0 :                 >skip2154
                       >
58b0 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
58b1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
58b3 : 48              >            pha         ;use stack to load status
58b4 : a97e            >            lda #$7e     ;precharge accu
58b6 : 28              >            plp
                        
58b7 : d91732                   cmp abs1,y
                                tst_a $7e,fn
58ba : 08              >            php         ;save flags
58bb : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
58bd : f003            >        beq skip2159
                       >        trap            ;failed not equal (non zero)
58bf : 20df73          >        jsr report_error
                       >
58c2 :                 >skip2159
                       >
58c2 : 68              >            pla         ;load status
58c3 : 48              >            pha
                       >            cmp_flag fn
58c4 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58c6 : f003            >        beq skip2162
                       >        trap            ;failed not equal (non zero)
58c8 : 20df73          >        jsr report_error
                       >
58cb :                 >skip2162
                       >
58cb : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
58cc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
58ce : 48              >            pha         ;use stack to load status
58cf : a980            >            lda #$80     ;precharge accu
58d1 : 28              >            plp
                        
58d2 : d91732                   cmp abs1,y
                                tst_a $80,~fnz
58d5 : 08              >            php         ;save flags
58d6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
58d8 : f003            >        beq skip2167
                       >        trap            ;failed not equal (non zero)
58da : 20df73          >        jsr report_error
                       >
58dd :                 >skip2167
                       >
58dd : 68              >            pla         ;load status
58de : 48              >            pha
                       >            cmp_flag ~fnz
58df : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58e1 : f003            >        beq skip2170
                       >        trap            ;failed not equal (non zero)
58e3 : 20df73          >        jsr report_error
                       >
58e6 :                 >skip2170
                       >
58e6 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
58e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
58e9 : 48              >            pha         ;use stack to load status
58ea : a97f            >            lda #$7f     ;precharge accu
58ec : 28              >            plp
                        
58ed : d91732                   cmp abs1,y
                                tst_a $7f,~fn
58f0 : 08              >            php         ;save flags
58f1 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
58f3 : f003            >        beq skip2175
                       >        trap            ;failed not equal (non zero)
58f5 : 20df73          >        jsr report_error
                       >
58f8 :                 >skip2175
                       >
58f8 : 68              >            pla         ;load status
58f9 : 48              >            pha
                       >            cmp_flag ~fn
58fa : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
58fc : f003            >        beq skip2178
                       >        trap            ;failed not equal (non zero)
58fe : 20df73          >        jsr report_error
                       >
5901 :                 >skip2178
                       >
5901 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5902 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5904 : 48              >            pha         ;use stack to load status
5905 : a97e            >            lda #$7e     ;precharge accu
5907 : 28              >            plp
                        
5908 : d91732                   cmp abs1,y
                                tst_a $7e,~fzc
590b : 08              >            php         ;save flags
590c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
590e : f003            >        beq skip2183
                       >        trap            ;failed not equal (non zero)
5910 : 20df73          >        jsr report_error
                       >
5913 :                 >skip2183
                       >
5913 : 68              >            pla         ;load status
5914 : 48              >            pha
                       >            cmp_flag ~fzc
5915 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5917 : f003            >        beq skip2186
                       >        trap            ;failed not equal (non zero)
5919 : 20df73          >        jsr report_error
                       >
591c :                 >skip2186
                       >
591c : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
591d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
591f : 48              >            pha         ;use stack to load status
5920 : a980            >            lda #$80     ;precharge accu
5922 : 28              >            plp
                        
5923 : c16a                     cmp (ind1,x)
                                tst_a $80,fc
5925 : 08              >            php         ;save flags
5926 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5928 : f003            >        beq skip2191
                       >        trap            ;failed not equal (non zero)
592a : 20df73          >        jsr report_error
                       >
592d :                 >skip2191
                       >
592d : 68              >            pla         ;load status
592e : 48              >            pha
                       >            cmp_flag fc
592f : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5931 : f003            >        beq skip2194
                       >        trap            ;failed not equal (non zero)
5933 : 20df73          >        jsr report_error
                       >
5936 :                 >skip2194
                       >
5936 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
5937 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5939 : 48              >            pha         ;use stack to load status
593a : a97f            >            lda #$7f     ;precharge accu
593c : 28              >            plp
                        
593d : c16a                     cmp (ind1,x)
                                tst_a $7f,fzc
593f : 08              >            php         ;save flags
5940 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5942 : f003            >        beq skip2199
                       >        trap            ;failed not equal (non zero)
5944 : 20df73          >        jsr report_error
                       >
5947 :                 >skip2199
                       >
5947 : 68              >            pla         ;load status
5948 : 48              >            pha
                       >            cmp_flag fzc
5949 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
594b : f003            >        beq skip2202
                       >        trap            ;failed not equal (non zero)
594d : 20df73          >        jsr report_error
                       >
5950 :                 >skip2202
                       >
5950 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
5951 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5953 : 48              >            pha         ;use stack to load status
5954 : a97e            >            lda #$7e     ;precharge accu
5956 : 28              >            plp
                        
5957 : c16a                     cmp (ind1,x)
                                tst_a $7e,fn
5959 : 08              >            php         ;save flags
595a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
595c : f003            >        beq skip2207
                       >        trap            ;failed not equal (non zero)
595e : 20df73          >        jsr report_error
                       >
5961 :                 >skip2207
                       >
5961 : 68              >            pla         ;load status
5962 : 48              >            pha
                       >            cmp_flag fn
5963 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5965 : f003            >        beq skip2210
                       >        trap            ;failed not equal (non zero)
5967 : 20df73          >        jsr report_error
                       >
596a :                 >skip2210
                       >
596a : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
596b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
596d : 48              >            pha         ;use stack to load status
596e : a980            >            lda #$80     ;precharge accu
5970 : 28              >            plp
                        
5971 : c16a                     cmp (ind1,x)
                                tst_a $80,~fnz
5973 : 08              >            php         ;save flags
5974 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5976 : f003            >        beq skip2215
                       >        trap            ;failed not equal (non zero)
5978 : 20df73          >        jsr report_error
                       >
597b :                 >skip2215
                       >
597b : 68              >            pla         ;load status
597c : 48              >            pha
                       >            cmp_flag ~fnz
597d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
597f : f003            >        beq skip2218
                       >        trap            ;failed not equal (non zero)
5981 : 20df73          >        jsr report_error
                       >
5984 :                 >skip2218
                       >
5984 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5985 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5987 : 48              >            pha         ;use stack to load status
5988 : a97f            >            lda #$7f     ;precharge accu
598a : 28              >            plp
                        
598b : c16a                     cmp (ind1,x)
                                tst_a $7f,~fn
598d : 08              >            php         ;save flags
598e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5990 : f003            >        beq skip2223
                       >        trap            ;failed not equal (non zero)
5992 : 20df73          >        jsr report_error
                       >
5995 :                 >skip2223
                       >
5995 : 68              >            pla         ;load status
5996 : 48              >            pha
                       >            cmp_flag ~fn
5997 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5999 : f003            >        beq skip2226
                       >        trap            ;failed not equal (non zero)
599b : 20df73          >        jsr report_error
                       >
599e :                 >skip2226
                       >
599e : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
599f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
59a1 : 48              >            pha         ;use stack to load status
59a2 : a97e            >            lda #$7e     ;precharge accu
59a4 : 28              >            plp
                        
59a5 : c16a                     cmp (ind1,x)
                                tst_a $7e,~fzc
59a7 : 08              >            php         ;save flags
59a8 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
59aa : f003            >        beq skip2231
                       >        trap            ;failed not equal (non zero)
59ac : 20df73          >        jsr report_error
                       >
59af :                 >skip2231
                       >
59af : 68              >            pla         ;load status
59b0 : 48              >            pha
                       >            cmp_flag ~fzc
59b1 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59b3 : f003            >        beq skip2234
                       >        trap            ;failed not equal (non zero)
59b5 : 20df73          >        jsr report_error
                       >
59b8 :                 >skip2234
                       >
59b8 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
59b9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59bb : 48              >            pha         ;use stack to load status
59bc : a980            >            lda #$80     ;precharge accu
59be : 28              >            plp
                        
59bf : d16a                     cmp (ind1),y
                                tst_a $80,fc
59c1 : 08              >            php         ;save flags
59c2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
59c4 : f003            >        beq skip2239
                       >        trap            ;failed not equal (non zero)
59c6 : 20df73          >        jsr report_error
                       >
59c9 :                 >skip2239
                       >
59c9 : 68              >            pla         ;load status
59ca : 48              >            pha
                       >            cmp_flag fc
59cb : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59cd : f003            >        beq skip2242
                       >        trap            ;failed not equal (non zero)
59cf : 20df73          >        jsr report_error
                       >
59d2 :                 >skip2242
                       >
59d2 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
59d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59d5 : 48              >            pha         ;use stack to load status
59d6 : a97f            >            lda #$7f     ;precharge accu
59d8 : 28              >            plp
                        
59d9 : d16a                     cmp (ind1),y
                                tst_a $7f,fzc
59db : 08              >            php         ;save flags
59dc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
59de : f003            >        beq skip2247
                       >        trap            ;failed not equal (non zero)
59e0 : 20df73          >        jsr report_error
                       >
59e3 :                 >skip2247
                       >
59e3 : 68              >            pla         ;load status
59e4 : 48              >            pha
                       >            cmp_flag fzc
59e5 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
59e7 : f003            >        beq skip2250
                       >        trap            ;failed not equal (non zero)
59e9 : 20df73          >        jsr report_error
                       >
59ec :                 >skip2250
                       >
59ec : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
59ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59ef : 48              >            pha         ;use stack to load status
59f0 : a97e            >            lda #$7e     ;precharge accu
59f2 : 28              >            plp
                        
59f3 : d16a                     cmp (ind1),y
                                tst_a $7e,fn
59f5 : 08              >            php         ;save flags
59f6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
59f8 : f003            >        beq skip2255
                       >        trap            ;failed not equal (non zero)
59fa : 20df73          >        jsr report_error
                       >
59fd :                 >skip2255
                       >
59fd : 68              >            pla         ;load status
59fe : 48              >            pha
                       >            cmp_flag fn
59ff : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a01 : f003            >        beq skip2258
                       >        trap            ;failed not equal (non zero)
5a03 : 20df73          >        jsr report_error
                       >
5a06 :                 >skip2258
                       >
5a06 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
5a07 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a09 : 48              >            pha         ;use stack to load status
5a0a : a980            >            lda #$80     ;precharge accu
5a0c : 28              >            plp
                        
5a0d : d16a                     cmp (ind1),y
                                tst_a $80,~fnz
5a0f : 08              >            php         ;save flags
5a10 : c980            >            cmp #$80     ;test result
                       >            trap_ne
5a12 : f003            >        beq skip2263
                       >        trap            ;failed not equal (non zero)
5a14 : 20df73          >        jsr report_error
                       >
5a17 :                 >skip2263
                       >
5a17 : 68              >            pla         ;load status
5a18 : 48              >            pha
                       >            cmp_flag ~fnz
5a19 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a1b : f003            >        beq skip2266
                       >        trap            ;failed not equal (non zero)
5a1d : 20df73          >        jsr report_error
                       >
5a20 :                 >skip2266
                       >
5a20 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
5a21 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a23 : 48              >            pha         ;use stack to load status
5a24 : a97f            >            lda #$7f     ;precharge accu
5a26 : 28              >            plp
                        
5a27 : d16a                     cmp (ind1),y
                                tst_a $7f,~fn
5a29 : 08              >            php         ;save flags
5a2a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
5a2c : f003            >        beq skip2271
                       >        trap            ;failed not equal (non zero)
5a2e : 20df73          >        jsr report_error
                       >
5a31 :                 >skip2271
                       >
5a31 : 68              >            pla         ;load status
5a32 : 48              >            pha
                       >            cmp_flag ~fn
5a33 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a35 : f003            >        beq skip2274
                       >        trap            ;failed not equal (non zero)
5a37 : 20df73          >        jsr report_error
                       >
5a3a :                 >skip2274
                       >
5a3a : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
5a3b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a3d : 48              >            pha         ;use stack to load status
5a3e : a97e            >            lda #$7e     ;precharge accu
5a40 : 28              >            plp
                        
5a41 : d16a                     cmp (ind1),y
                                tst_a $7e,~fzc
5a43 : 08              >            php         ;save flags
5a44 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
5a46 : f003            >        beq skip2279
                       >        trap            ;failed not equal (non zero)
5a48 : 20df73          >        jsr report_error
                       >
5a4b :                 >skip2279
                       >
5a4b : 68              >            pla         ;load status
5a4c : 48              >            pha
                       >            cmp_flag ~fzc
5a4d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
5a4f : f003            >        beq skip2282
                       >        trap            ;failed not equal (non zero)
5a51 : 20df73          >        jsr report_error
                       >
5a54 :                 >skip2282
                       >
5a54 : 28              >            plp         ;restore status
                        
                                next_test
5a55 : ad0032          >            lda test_case   ;previous test
5a58 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5a5a : f003            >        beq skip2285
                       >        trap            ;failed not equal (non zero)
5a5c : 20df73          >        jsr report_error
                       >
5a5f :                 >skip2285
                       >
001d =                 >test_num = test_num + 1
5a5f : a91d            >            lda #test_num   ;*** next tests' number
5a61 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
5a64 : a203                     ldx #3
5a66 :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
5a66 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5a68 : 48              >            pha         ;use stack to load status
5a69 : b559            >            lda zp1,x    ;precharge accu
5a6b : 28              >            plp
                        
5a6c : 0a                       asl a
                                tst_ax rASL,fASL,0
5a6d : 08              >            php         ;save flags
5a6e : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5a71 : f003            >        beq skip2290
                       >        trap            ;failed not equal (non zero)
5a73 : 20df73          >        jsr report_error
                       >
5a76 :                 >skip2290
                       >
5a76 : 68              >            pla         ;load status
                       >            eor_flag 0
5a77 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5a79 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
5a7c : f003            >        beq skip2293
                       >        trap            ;failed not equal (non zero)
5a7e : 20df73          >        jsr report_error
                       >
5a81 :                 >skip2293
                       >
                        
5a81 : ca                       dex
5a82 : 10e2                     bpl tasl
5a84 : a203                     ldx #3
5a86 :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
5a86 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a88 : 48              >            pha         ;use stack to load status
5a89 : b559            >            lda zp1,x    ;precharge accu
5a8b : 28              >            plp
                        
5a8c : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
5a8d : 08              >            php         ;save flags
5a8e : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5a91 : f003            >        beq skip2298
                       >        trap            ;failed not equal (non zero)
5a93 : 20df73          >        jsr report_error
                       >
5a96 :                 >skip2298
                       >
5a96 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5a97 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5a99 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
5a9c : f003            >        beq skip2301
                       >        trap            ;failed not equal (non zero)
5a9e : 20df73          >        jsr report_error
                       >
5aa1 :                 >skip2301
                       >
                        
5aa1 : ca                       dex
5aa2 : 10e2                     bpl tasl1
                        
5aa4 : a203                     ldx #3
5aa6 :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
5aa6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5aa8 : 48              >            pha         ;use stack to load status
5aa9 : b559            >            lda zp1,x    ;precharge accu
5aab : 28              >            plp
                        
5aac : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
5aad : 08              >            php         ;save flags
5aae : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5ab1 : f003            >        beq skip2306
                       >        trap            ;failed not equal (non zero)
5ab3 : 20df73          >        jsr report_error
                       >
5ab6 :                 >skip2306
                       >
5ab6 : 68              >            pla         ;load status
                       >            eor_flag 0
5ab7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ab9 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
5abc : f003            >        beq skip2309
                       >        trap            ;failed not equal (non zero)
5abe : 20df73          >        jsr report_error
                       >
5ac1 :                 >skip2309
                       >
                        
5ac1 : ca                       dex
5ac2 : 10e2                     bpl tlsr
5ac4 : a203                     ldx #3
5ac6 :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
5ac6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ac8 : 48              >            pha         ;use stack to load status
5ac9 : b559            >            lda zp1,x    ;precharge accu
5acb : 28              >            plp
                        
5acc : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
5acd : 08              >            php         ;save flags
5ace : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5ad1 : f003            >        beq skip2314
                       >        trap            ;failed not equal (non zero)
5ad3 : 20df73          >        jsr report_error
                       >
5ad6 :                 >skip2314
                       >
5ad6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5ad7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5ad9 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
5adc : f003            >        beq skip2317
                       >        trap            ;failed not equal (non zero)
5ade : 20df73          >        jsr report_error
                       >
5ae1 :                 >skip2317
                       >
                        
5ae1 : ca                       dex
5ae2 : 10e2                     bpl tlsr1
                        
5ae4 : a203                     ldx #3
5ae6 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
5ae6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ae8 : 48              >            pha         ;use stack to load status
5ae9 : b559            >            lda zp1,x    ;precharge accu
5aeb : 28              >            plp
                        
5aec : 2a                       rol a
                                tst_ax rROL,fROL,0
5aed : 08              >            php         ;save flags
5aee : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5af1 : f003            >        beq skip2322
                       >        trap            ;failed not equal (non zero)
5af3 : 20df73          >        jsr report_error
                       >
5af6 :                 >skip2322
                       >
5af6 : 68              >            pla         ;load status
                       >            eor_flag 0
5af7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5af9 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
5afc : f003            >        beq skip2325
                       >        trap            ;failed not equal (non zero)
5afe : 20df73          >        jsr report_error
                       >
5b01 :                 >skip2325
                       >
                        
5b01 : ca                       dex
5b02 : 10e2                     bpl trol
5b04 : a203                     ldx #3
5b06 :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
5b06 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5b08 : 48              >            pha         ;use stack to load status
5b09 : b559            >            lda zp1,x    ;precharge accu
5b0b : 28              >            plp
                        
5b0c : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
5b0d : 08              >            php         ;save flags
5b0e : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5b11 : f003            >        beq skip2330
                       >        trap            ;failed not equal (non zero)
5b13 : 20df73          >        jsr report_error
                       >
5b16 :                 >skip2330
                       >
5b16 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5b17 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5b19 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
5b1c : f003            >        beq skip2333
                       >        trap            ;failed not equal (non zero)
5b1e : 20df73          >        jsr report_error
                       >
5b21 :                 >skip2333
                       >
                        
5b21 : ca                       dex
5b22 : 10e2                     bpl trol1
                        
5b24 : a203                     ldx #3
5b26 :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
5b26 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5b28 : 48              >            pha         ;use stack to load status
5b29 : b559            >            lda zp1,x    ;precharge accu
5b2b : 28              >            plp
                        
5b2c : 2a                       rol a
                                tst_ax rROLc,fROLc,0
5b2d : 08              >            php         ;save flags
5b2e : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5b31 : f003            >        beq skip2338
                       >        trap            ;failed not equal (non zero)
5b33 : 20df73          >        jsr report_error
                       >
5b36 :                 >skip2338
                       >
5b36 : 68              >            pla         ;load status
                       >            eor_flag 0
5b37 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5b39 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
5b3c : f003            >        beq skip2341
                       >        trap            ;failed not equal (non zero)
5b3e : 20df73          >        jsr report_error
                       >
5b41 :                 >skip2341
                       >
                        
5b41 : ca                       dex
5b42 : 10e2                     bpl trolc
5b44 : a203                     ldx #3
5b46 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
5b46 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b48 : 48              >            pha         ;use stack to load status
5b49 : b559            >            lda zp1,x    ;precharge accu
5b4b : 28              >            plp
                        
5b4c : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
5b4d : 08              >            php         ;save flags
5b4e : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5b51 : f003            >        beq skip2346
                       >        trap            ;failed not equal (non zero)
5b53 : 20df73          >        jsr report_error
                       >
5b56 :                 >skip2346
                       >
5b56 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5b57 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5b59 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
5b5c : f003            >        beq skip2349
                       >        trap            ;failed not equal (non zero)
5b5e : 20df73          >        jsr report_error
                       >
5b61 :                 >skip2349
                       >
                        
5b61 : ca                       dex
5b62 : 10e2                     bpl trolc1
                        
5b64 : a203                     ldx #3
5b66 :                  tror
                                set_ax zp1,0
                       >            load_flag 0
5b66 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b68 : 48              >            pha         ;use stack to load status
5b69 : b559            >            lda zp1,x    ;precharge accu
5b6b : 28              >            plp
                        
5b6c : 6a                       ror a
                                tst_ax rROR,fROR,0
5b6d : 08              >            php         ;save flags
5b6e : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5b71 : f003            >        beq skip2354
                       >        trap            ;failed not equal (non zero)
5b73 : 20df73          >        jsr report_error
                       >
5b76 :                 >skip2354
                       >
5b76 : 68              >            pla         ;load status
                       >            eor_flag 0
5b77 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5b79 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
5b7c : f003            >        beq skip2357
                       >        trap            ;failed not equal (non zero)
5b7e : 20df73          >        jsr report_error
                       >
5b81 :                 >skip2357
                       >
                        
5b81 : ca                       dex
5b82 : 10e2                     bpl tror
5b84 : a203                     ldx #3
5b86 :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
5b86 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5b88 : 48              >            pha         ;use stack to load status
5b89 : b559            >            lda zp1,x    ;precharge accu
5b8b : 28              >            plp
                        
5b8c : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
5b8d : 08              >            php         ;save flags
5b8e : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5b91 : f003            >        beq skip2362
                       >        trap            ;failed not equal (non zero)
5b93 : 20df73          >        jsr report_error
                       >
5b96 :                 >skip2362
                       >
5b96 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5b97 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5b99 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
5b9c : f003            >        beq skip2365
                       >        trap            ;failed not equal (non zero)
5b9e : 20df73          >        jsr report_error
                       >
5ba1 :                 >skip2365
                       >
                        
5ba1 : ca                       dex
5ba2 : 10e2                     bpl tror1
                        
5ba4 : a203                     ldx #3
5ba6 :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
5ba6 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5ba8 : 48              >            pha         ;use stack to load status
5ba9 : b559            >            lda zp1,x    ;precharge accu
5bab : 28              >            plp
                        
5bac : 6a                       ror a
                                tst_ax rRORc,fRORc,0
5bad : 08              >            php         ;save flags
5bae : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5bb1 : f003            >        beq skip2370
                       >        trap            ;failed not equal (non zero)
5bb3 : 20df73          >        jsr report_error
                       >
5bb6 :                 >skip2370
                       >
5bb6 : 68              >            pla         ;load status
                       >            eor_flag 0
5bb7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5bb9 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
5bbc : f003            >        beq skip2373
                       >        trap            ;failed not equal (non zero)
5bbe : 20df73          >        jsr report_error
                       >
5bc1 :                 >skip2373
                       >
                        
5bc1 : ca                       dex
5bc2 : 10e2                     bpl trorc
5bc4 : a203                     ldx #3
5bc6 :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
5bc6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5bc8 : 48              >            pha         ;use stack to load status
5bc9 : b559            >            lda zp1,x    ;precharge accu
5bcb : 28              >            plp
                        
5bcc : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
5bcd : 08              >            php         ;save flags
5bce : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5bd1 : f003            >        beq skip2378
                       >        trap            ;failed not equal (non zero)
5bd3 : 20df73          >        jsr report_error
                       >
5bd6 :                 >skip2378
                       >
5bd6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5bd7 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5bd9 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
5bdc : f003            >        beq skip2381
                       >        trap            ;failed not equal (non zero)
5bde : 20df73          >        jsr report_error
                       >
5be1 :                 >skip2381
                       >
                        
5be1 : ca                       dex
5be2 : 10e2                     bpl trorc1
                                next_test
5be4 : ad0032          >            lda test_case   ;previous test
5be7 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5be9 : f003            >        beq skip2384
                       >        trap            ;failed not equal (non zero)
5beb : 20df73          >        jsr report_error
                       >
5bee :                 >skip2384
                       >
001e =                 >test_num = test_num + 1
5bee : a91e            >            lda #test_num   ;*** next tests' number
5bf0 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
5bf3 : a203                     ldx #3
5bf5 :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
5bf5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bf7 : 48              >            pha         ;use stack to load status
5bf8 : b559            >            lda zp1,x    ;load to zeropage
5bfa : 8552            >            sta zpt
5bfc : 28              >            plp
                        
5bfd : 0652                     asl zpt
                                tst_z rASL,fASL,0
5bff : 08              >            php         ;save flags
5c00 : a552            >            lda zpt
5c02 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5c05 : f003            >        beq skip2389
                       >        trap            ;failed not equal (non zero)
5c07 : 20df73          >        jsr report_error
                       >
5c0a :                 >skip2389
                       >
5c0a : 68              >            pla         ;load status
                       >            eor_flag 0
5c0b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5c0d : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5c10 : f003            >        beq skip2392
                       >        trap            ;failed not equal (non zero)
5c12 : 20df73          >        jsr report_error
                       >
5c15 :                 >skip2392
                       >
                        
5c15 : ca                       dex
5c16 : 10dd                     bpl tasl2
5c18 : a203                     ldx #3
5c1a :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
5c1a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c1c : 48              >            pha         ;use stack to load status
5c1d : b559            >            lda zp1,x    ;load to zeropage
5c1f : 8552            >            sta zpt
5c21 : 28              >            plp
                        
5c22 : 0652                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
5c24 : 08              >            php         ;save flags
5c25 : a552            >            lda zpt
5c27 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5c2a : f003            >        beq skip2397
                       >        trap            ;failed not equal (non zero)
5c2c : 20df73          >        jsr report_error
                       >
5c2f :                 >skip2397
                       >
5c2f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5c30 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5c32 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5c35 : f003            >        beq skip2400
                       >        trap            ;failed not equal (non zero)
5c37 : 20df73          >        jsr report_error
                       >
5c3a :                 >skip2400
                       >
                        
5c3a : ca                       dex
5c3b : 10dd                     bpl tasl3
                        
5c3d : a203                     ldx #3
5c3f :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
5c3f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c41 : 48              >            pha         ;use stack to load status
5c42 : b559            >            lda zp1,x    ;load to zeropage
5c44 : 8552            >            sta zpt
5c46 : 28              >            plp
                        
5c47 : 4652                     lsr zpt
                                tst_z rLSR,fLSR,0
5c49 : 08              >            php         ;save flags
5c4a : a552            >            lda zpt
5c4c : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5c4f : f003            >        beq skip2405
                       >        trap            ;failed not equal (non zero)
5c51 : 20df73          >        jsr report_error
                       >
5c54 :                 >skip2405
                       >
5c54 : 68              >            pla         ;load status
                       >            eor_flag 0
5c55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5c57 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
5c5a : f003            >        beq skip2408
                       >        trap            ;failed not equal (non zero)
5c5c : 20df73          >        jsr report_error
                       >
5c5f :                 >skip2408
                       >
                        
5c5f : ca                       dex
5c60 : 10dd                     bpl tlsr2
5c62 : a203                     ldx #3
5c64 :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
5c64 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c66 : 48              >            pha         ;use stack to load status
5c67 : b559            >            lda zp1,x    ;load to zeropage
5c69 : 8552            >            sta zpt
5c6b : 28              >            plp
                        
5c6c : 4652                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
5c6e : 08              >            php         ;save flags
5c6f : a552            >            lda zpt
5c71 : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5c74 : f003            >        beq skip2413
                       >        trap            ;failed not equal (non zero)
5c76 : 20df73          >        jsr report_error
                       >
5c79 :                 >skip2413
                       >
5c79 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5c7a : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5c7c : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
5c7f : f003            >        beq skip2416
                       >        trap            ;failed not equal (non zero)
5c81 : 20df73          >        jsr report_error
                       >
5c84 :                 >skip2416
                       >
                        
5c84 : ca                       dex
5c85 : 10dd                     bpl tlsr3
                        
5c87 : a203                     ldx #3
5c89 :                  trol2
                                set_z zp1,0
                       >            load_flag 0
5c89 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c8b : 48              >            pha         ;use stack to load status
5c8c : b559            >            lda zp1,x    ;load to zeropage
5c8e : 8552            >            sta zpt
5c90 : 28              >            plp
                        
5c91 : 2652                     rol zpt
                                tst_z rROL,fROL,0
5c93 : 08              >            php         ;save flags
5c94 : a552            >            lda zpt
5c96 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5c99 : f003            >        beq skip2421
                       >        trap            ;failed not equal (non zero)
5c9b : 20df73          >        jsr report_error
                       >
5c9e :                 >skip2421
                       >
5c9e : 68              >            pla         ;load status
                       >            eor_flag 0
5c9f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ca1 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
5ca4 : f003            >        beq skip2424
                       >        trap            ;failed not equal (non zero)
5ca6 : 20df73          >        jsr report_error
                       >
5ca9 :                 >skip2424
                       >
                        
5ca9 : ca                       dex
5caa : 10dd                     bpl trol2
5cac : a203                     ldx #3
5cae :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
5cae : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5cb0 : 48              >            pha         ;use stack to load status
5cb1 : b559            >            lda zp1,x    ;load to zeropage
5cb3 : 8552            >            sta zpt
5cb5 : 28              >            plp
                        
5cb6 : 2652                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
5cb8 : 08              >            php         ;save flags
5cb9 : a552            >            lda zpt
5cbb : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5cbe : f003            >        beq skip2429
                       >        trap            ;failed not equal (non zero)
5cc0 : 20df73          >        jsr report_error
                       >
5cc3 :                 >skip2429
                       >
5cc3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5cc4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5cc6 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
5cc9 : f003            >        beq skip2432
                       >        trap            ;failed not equal (non zero)
5ccb : 20df73          >        jsr report_error
                       >
5cce :                 >skip2432
                       >
                        
5cce : ca                       dex
5ccf : 10dd                     bpl trol3
                        
5cd1 : a203                     ldx #3
5cd3 :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
5cd3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5cd5 : 48              >            pha         ;use stack to load status
5cd6 : b559            >            lda zp1,x    ;load to zeropage
5cd8 : 8552            >            sta zpt
5cda : 28              >            plp
                        
5cdb : 2652                     rol zpt
                                tst_z rROLc,fROLc,0
5cdd : 08              >            php         ;save flags
5cde : a552            >            lda zpt
5ce0 : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5ce3 : f003            >        beq skip2437
                       >        trap            ;failed not equal (non zero)
5ce5 : 20df73          >        jsr report_error
                       >
5ce8 :                 >skip2437
                       >
5ce8 : 68              >            pla         ;load status
                       >            eor_flag 0
5ce9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ceb : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
5cee : f003            >        beq skip2440
                       >        trap            ;failed not equal (non zero)
5cf0 : 20df73          >        jsr report_error
                       >
5cf3 :                 >skip2440
                       >
                        
5cf3 : ca                       dex
5cf4 : 10dd                     bpl trolc2
5cf6 : a203                     ldx #3
5cf8 :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
5cf8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5cfa : 48              >            pha         ;use stack to load status
5cfb : b559            >            lda zp1,x    ;load to zeropage
5cfd : 8552            >            sta zpt
5cff : 28              >            plp
                        
5d00 : 2652                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
5d02 : 08              >            php         ;save flags
5d03 : a552            >            lda zpt
5d05 : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5d08 : f003            >        beq skip2445
                       >        trap            ;failed not equal (non zero)
5d0a : 20df73          >        jsr report_error
                       >
5d0d :                 >skip2445
                       >
5d0d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5d0e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5d10 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
5d13 : f003            >        beq skip2448
                       >        trap            ;failed not equal (non zero)
5d15 : 20df73          >        jsr report_error
                       >
5d18 :                 >skip2448
                       >
                        
5d18 : ca                       dex
5d19 : 10dd                     bpl trolc3
                        
5d1b : a203                     ldx #3
5d1d :                  tror2
                                set_z zp1,0
                       >            load_flag 0
5d1d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d1f : 48              >            pha         ;use stack to load status
5d20 : b559            >            lda zp1,x    ;load to zeropage
5d22 : 8552            >            sta zpt
5d24 : 28              >            plp
                        
5d25 : 6652                     ror zpt
                                tst_z rROR,fROR,0
5d27 : 08              >            php         ;save flags
5d28 : a552            >            lda zpt
5d2a : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5d2d : f003            >        beq skip2453
                       >        trap            ;failed not equal (non zero)
5d2f : 20df73          >        jsr report_error
                       >
5d32 :                 >skip2453
                       >
5d32 : 68              >            pla         ;load status
                       >            eor_flag 0
5d33 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5d35 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
5d38 : f003            >        beq skip2456
                       >        trap            ;failed not equal (non zero)
5d3a : 20df73          >        jsr report_error
                       >
5d3d :                 >skip2456
                       >
                        
5d3d : ca                       dex
5d3e : 10dd                     bpl tror2
5d40 : a203                     ldx #3
5d42 :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
5d42 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5d44 : 48              >            pha         ;use stack to load status
5d45 : b559            >            lda zp1,x    ;load to zeropage
5d47 : 8552            >            sta zpt
5d49 : 28              >            plp
                        
5d4a : 6652                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
5d4c : 08              >            php         ;save flags
5d4d : a552            >            lda zpt
5d4f : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5d52 : f003            >        beq skip2461
                       >        trap            ;failed not equal (non zero)
5d54 : 20df73          >        jsr report_error
                       >
5d57 :                 >skip2461
                       >
5d57 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5d58 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5d5a : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
5d5d : f003            >        beq skip2464
                       >        trap            ;failed not equal (non zero)
5d5f : 20df73          >        jsr report_error
                       >
5d62 :                 >skip2464
                       >
                        
5d62 : ca                       dex
5d63 : 10dd                     bpl tror3
                        
5d65 : a203                     ldx #3
5d67 :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
5d67 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5d69 : 48              >            pha         ;use stack to load status
5d6a : b559            >            lda zp1,x    ;load to zeropage
5d6c : 8552            >            sta zpt
5d6e : 28              >            plp
                        
5d6f : 6652                     ror zpt
                                tst_z rRORc,fRORc,0
5d71 : 08              >            php         ;save flags
5d72 : a552            >            lda zpt
5d74 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5d77 : f003            >        beq skip2469
                       >        trap            ;failed not equal (non zero)
5d79 : 20df73          >        jsr report_error
                       >
5d7c :                 >skip2469
                       >
5d7c : 68              >            pla         ;load status
                       >            eor_flag 0
5d7d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5d7f : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
5d82 : f003            >        beq skip2472
                       >        trap            ;failed not equal (non zero)
5d84 : 20df73          >        jsr report_error
                       >
5d87 :                 >skip2472
                       >
                        
5d87 : ca                       dex
5d88 : 10dd                     bpl trorc2
5d8a : a203                     ldx #3
5d8c :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
5d8c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d8e : 48              >            pha         ;use stack to load status
5d8f : b559            >            lda zp1,x    ;load to zeropage
5d91 : 8552            >            sta zpt
5d93 : 28              >            plp
                        
5d94 : 6652                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
5d96 : 08              >            php         ;save flags
5d97 : a552            >            lda zpt
5d99 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5d9c : f003            >        beq skip2477
                       >        trap            ;failed not equal (non zero)
5d9e : 20df73          >        jsr report_error
                       >
5da1 :                 >skip2477
                       >
5da1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5da2 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5da4 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
5da7 : f003            >        beq skip2480
                       >        trap            ;failed not equal (non zero)
5da9 : 20df73          >        jsr report_error
                       >
5dac :                 >skip2480
                       >
                        
5dac : ca                       dex
5dad : 10dd                     bpl trorc3
                                next_test
5daf : ad0032          >            lda test_case   ;previous test
5db2 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5db4 : f003            >        beq skip2483
                       >        trap            ;failed not equal (non zero)
5db6 : 20df73          >        jsr report_error
                       >
5db9 :                 >skip2483
                       >
001f =                 >test_num = test_num + 1
5db9 : a91f            >            lda #test_num   ;*** next tests' number
5dbb : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
5dbe : a203                     ldx #3
5dc0 :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
5dc0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5dc2 : 48              >            pha         ;use stack to load status
5dc3 : b559            >            lda zp1,x    ;load to memory
5dc5 : 8d0332          >            sta abst
5dc8 : 28              >            plp
                        
5dc9 : 0e0332                   asl abst
                                tst_abs rASL,fASL,0
5dcc : 08              >            php         ;save flags
5dcd : ad0332          >            lda abst
5dd0 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5dd3 : f003            >        beq skip2488
                       >        trap            ;failed not equal (non zero)
5dd5 : 20df73          >        jsr report_error
                       >
5dd8 :                 >skip2488
                       >
5dd8 : 68              >            pla         ;load status
                       >            eor_flag 0
5dd9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ddb : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5dde : f003            >        beq skip2491
                       >        trap            ;failed not equal (non zero)
5de0 : 20df73          >        jsr report_error
                       >
5de3 :                 >skip2491
                       >
                        
5de3 : ca                       dex
5de4 : 10da                     bpl tasl4
5de6 : a203                     ldx #3
5de8 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
5de8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5dea : 48              >            pha         ;use stack to load status
5deb : b559            >            lda zp1,x    ;load to memory
5ded : 8d0332          >            sta abst
5df0 : 28              >            plp
                        
5df1 : 0e0332                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
5df4 : 08              >            php         ;save flags
5df5 : ad0332          >            lda abst
5df8 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5dfb : f003            >        beq skip2496
                       >        trap            ;failed not equal (non zero)
5dfd : 20df73          >        jsr report_error
                       >
5e00 :                 >skip2496
                       >
5e00 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5e01 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5e03 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5e06 : f003            >        beq skip2499
                       >        trap            ;failed not equal (non zero)
5e08 : 20df73          >        jsr report_error
                       >
5e0b :                 >skip2499
                       >
                        
5e0b : ca                       dex
5e0c : 10da                     bpl tasl5
                        
5e0e : a203                     ldx #3
5e10 :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
5e10 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e12 : 48              >            pha         ;use stack to load status
5e13 : b559            >            lda zp1,x    ;load to memory
5e15 : 8d0332          >            sta abst
5e18 : 28              >            plp
                        
5e19 : 4e0332                   lsr abst
                                tst_abs rLSR,fLSR,0
5e1c : 08              >            php         ;save flags
5e1d : ad0332          >            lda abst
5e20 : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5e23 : f003            >        beq skip2504
                       >        trap            ;failed not equal (non zero)
5e25 : 20df73          >        jsr report_error
                       >
5e28 :                 >skip2504
                       >
5e28 : 68              >            pla         ;load status
                       >            eor_flag 0
5e29 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5e2b : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
5e2e : f003            >        beq skip2507
                       >        trap            ;failed not equal (non zero)
5e30 : 20df73          >        jsr report_error
                       >
5e33 :                 >skip2507
                       >
                        
5e33 : ca                       dex
5e34 : 10da                     bpl tlsr4
5e36 : a203                     ldx #3
5e38 :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
5e38 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e3a : 48              >            pha         ;use stack to load status
5e3b : b559            >            lda zp1,x    ;load to memory
5e3d : 8d0332          >            sta abst
5e40 : 28              >            plp
                        
5e41 : 4e0332                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
5e44 : 08              >            php         ;save flags
5e45 : ad0332          >            lda abst
5e48 : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
5e4b : f003            >        beq skip2512
                       >        trap            ;failed not equal (non zero)
5e4d : 20df73          >        jsr report_error
                       >
5e50 :                 >skip2512
                       >
5e50 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5e51 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5e53 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
5e56 : f003            >        beq skip2515
                       >        trap            ;failed not equal (non zero)
5e58 : 20df73          >        jsr report_error
                       >
5e5b :                 >skip2515
                       >
                        
5e5b : ca                       dex
5e5c : 10da                     bpl tlsr5
                        
5e5e : a203                     ldx #3
5e60 :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
5e60 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e62 : 48              >            pha         ;use stack to load status
5e63 : b559            >            lda zp1,x    ;load to memory
5e65 : 8d0332          >            sta abst
5e68 : 28              >            plp
                        
5e69 : 2e0332                   rol abst
                                tst_abs rROL,fROL,0
5e6c : 08              >            php         ;save flags
5e6d : ad0332          >            lda abst
5e70 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5e73 : f003            >        beq skip2520
                       >        trap            ;failed not equal (non zero)
5e75 : 20df73          >        jsr report_error
                       >
5e78 :                 >skip2520
                       >
5e78 : 68              >            pla         ;load status
                       >            eor_flag 0
5e79 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5e7b : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
5e7e : f003            >        beq skip2523
                       >        trap            ;failed not equal (non zero)
5e80 : 20df73          >        jsr report_error
                       >
5e83 :                 >skip2523
                       >
                        
5e83 : ca                       dex
5e84 : 10da                     bpl trol4
5e86 : a203                     ldx #3
5e88 :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
5e88 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5e8a : 48              >            pha         ;use stack to load status
5e8b : b559            >            lda zp1,x    ;load to memory
5e8d : 8d0332          >            sta abst
5e90 : 28              >            plp
                        
5e91 : 2e0332                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
5e94 : 08              >            php         ;save flags
5e95 : ad0332          >            lda abst
5e98 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
5e9b : f003            >        beq skip2528
                       >        trap            ;failed not equal (non zero)
5e9d : 20df73          >        jsr report_error
                       >
5ea0 :                 >skip2528
                       >
5ea0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5ea1 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5ea3 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
5ea6 : f003            >        beq skip2531
                       >        trap            ;failed not equal (non zero)
5ea8 : 20df73          >        jsr report_error
                       >
5eab :                 >skip2531
                       >
                        
5eab : ca                       dex
5eac : 10da                     bpl trol5
                        
5eae : a203                     ldx #3
5eb0 :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
5eb0 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5eb2 : 48              >            pha         ;use stack to load status
5eb3 : b559            >            lda zp1,x    ;load to memory
5eb5 : 8d0332          >            sta abst
5eb8 : 28              >            plp
                        
5eb9 : 2e0332                   rol abst
                                tst_abs rROLc,fROLc,0
5ebc : 08              >            php         ;save flags
5ebd : ad0332          >            lda abst
5ec0 : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5ec3 : f003            >        beq skip2536
                       >        trap            ;failed not equal (non zero)
5ec5 : 20df73          >        jsr report_error
                       >
5ec8 :                 >skip2536
                       >
5ec8 : 68              >            pla         ;load status
                       >            eor_flag 0
5ec9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ecb : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
5ece : f003            >        beq skip2539
                       >        trap            ;failed not equal (non zero)
5ed0 : 20df73          >        jsr report_error
                       >
5ed3 :                 >skip2539
                       >
                        
5ed3 : ca                       dex
5ed4 : 10da                     bpl trolc4
5ed6 : a203                     ldx #3
5ed8 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
5ed8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5eda : 48              >            pha         ;use stack to load status
5edb : b559            >            lda zp1,x    ;load to memory
5edd : 8d0332          >            sta abst
5ee0 : 28              >            plp
                        
5ee1 : 2e0332                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
5ee4 : 08              >            php         ;save flags
5ee5 : ad0332          >            lda abst
5ee8 : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
5eeb : f003            >        beq skip2544
                       >        trap            ;failed not equal (non zero)
5eed : 20df73          >        jsr report_error
                       >
5ef0 :                 >skip2544
                       >
5ef0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5ef1 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5ef3 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
5ef6 : f003            >        beq skip2547
                       >        trap            ;failed not equal (non zero)
5ef8 : 20df73          >        jsr report_error
                       >
5efb :                 >skip2547
                       >
                        
5efb : ca                       dex
5efc : 10da                     bpl trolc5
                        
5efe : a203                     ldx #3
5f00 :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
5f00 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f02 : 48              >            pha         ;use stack to load status
5f03 : b559            >            lda zp1,x    ;load to memory
5f05 : 8d0332          >            sta abst
5f08 : 28              >            plp
                        
5f09 : 6e0332                   ror abst
                                tst_abs rROR,fROR,0
5f0c : 08              >            php         ;save flags
5f0d : ad0332          >            lda abst
5f10 : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5f13 : f003            >        beq skip2552
                       >        trap            ;failed not equal (non zero)
5f15 : 20df73          >        jsr report_error
                       >
5f18 :                 >skip2552
                       >
5f18 : 68              >            pla         ;load status
                       >            eor_flag 0
5f19 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f1b : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
5f1e : f003            >        beq skip2555
                       >        trap            ;failed not equal (non zero)
5f20 : 20df73          >        jsr report_error
                       >
5f23 :                 >skip2555
                       >
                        
5f23 : ca                       dex
5f24 : 10da                     bpl tror4
5f26 : a203                     ldx #3
5f28 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
5f28 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5f2a : 48              >            pha         ;use stack to load status
5f2b : b559            >            lda zp1,x    ;load to memory
5f2d : 8d0332          >            sta abst
5f30 : 28              >            plp
                        
5f31 : 6e0332                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
5f34 : 08              >            php         ;save flags
5f35 : ad0332          >            lda abst
5f38 : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
5f3b : f003            >        beq skip2560
                       >        trap            ;failed not equal (non zero)
5f3d : 20df73          >        jsr report_error
                       >
5f40 :                 >skip2560
                       >
5f40 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5f41 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5f43 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
5f46 : f003            >        beq skip2563
                       >        trap            ;failed not equal (non zero)
5f48 : 20df73          >        jsr report_error
                       >
5f4b :                 >skip2563
                       >
                        
5f4b : ca                       dex
5f4c : 10da                     bpl tror5
                        
5f4e : a203                     ldx #3
5f50 :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
5f50 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
5f52 : 48              >            pha         ;use stack to load status
5f53 : b559            >            lda zp1,x    ;load to memory
5f55 : 8d0332          >            sta abst
5f58 : 28              >            plp
                        
5f59 : 6e0332                   ror abst
                                tst_abs rRORc,fRORc,0
5f5c : 08              >            php         ;save flags
5f5d : ad0332          >            lda abst
5f60 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5f63 : f003            >        beq skip2568
                       >        trap            ;failed not equal (non zero)
5f65 : 20df73          >        jsr report_error
                       >
5f68 :                 >skip2568
                       >
5f68 : 68              >            pla         ;load status
                       >            eor_flag 0
5f69 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f6b : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
5f6e : f003            >        beq skip2571
                       >        trap            ;failed not equal (non zero)
5f70 : 20df73          >        jsr report_error
                       >
5f73 :                 >skip2571
                       >
                        
5f73 : ca                       dex
5f74 : 10da                     bpl trorc4
5f76 : a203                     ldx #3
5f78 :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
5f78 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f7a : 48              >            pha         ;use stack to load status
5f7b : b559            >            lda zp1,x    ;load to memory
5f7d : 8d0332          >            sta abst
5f80 : 28              >            plp
                        
5f81 : 6e0332                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
5f84 : 08              >            php         ;save flags
5f85 : ad0332          >            lda abst
5f88 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
5f8b : f003            >        beq skip2576
                       >        trap            ;failed not equal (non zero)
5f8d : 20df73          >        jsr report_error
                       >
5f90 :                 >skip2576
                       >
5f90 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5f91 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5f93 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
5f96 : f003            >        beq skip2579
                       >        trap            ;failed not equal (non zero)
5f98 : 20df73          >        jsr report_error
                       >
5f9b :                 >skip2579
                       >
                        
5f9b : ca                       dex
5f9c : 10da                     bpl trorc5
                                next_test
5f9e : ad0032          >            lda test_case   ;previous test
5fa1 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5fa3 : f003            >        beq skip2582
                       >        trap            ;failed not equal (non zero)
5fa5 : 20df73          >        jsr report_error
                       >
5fa8 :                 >skip2582
                       >
0020 =                 >test_num = test_num + 1
5fa8 : a920            >            lda #test_num   ;*** next tests' number
5faa : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
5fad : a203                     ldx #3
5faf :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
5faf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5fb1 : 48              >            pha         ;use stack to load status
5fb2 : b559            >            lda zp1,x    ;load to indexed zeropage
5fb4 : 9552            >            sta zpt,x
5fb6 : 28              >            plp
                        
5fb7 : 1652                     asl zpt,x
                                tst_zx rASL,fASL,0
5fb9 : 08              >            php         ;save flags
5fba : b552            >            lda zpt,x
5fbc : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5fbf : f003            >        beq skip2587
                       >        trap            ;failed not equal (non zero)
5fc1 : 20df73          >        jsr report_error
                       >
5fc4 :                 >skip2587
                       >
5fc4 : 68              >            pla         ;load status
                       >            eor_flag 0
5fc5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5fc7 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5fca : f003            >        beq skip2590
                       >        trap            ;failed not equal (non zero)
5fcc : 20df73          >        jsr report_error
                       >
5fcf :                 >skip2590
                       >
                        
5fcf : ca                       dex
5fd0 : 10dd                     bpl tasl6
5fd2 : a203                     ldx #3
5fd4 :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
5fd4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5fd6 : 48              >            pha         ;use stack to load status
5fd7 : b559            >            lda zp1,x    ;load to indexed zeropage
5fd9 : 9552            >            sta zpt,x
5fdb : 28              >            plp
                        
5fdc : 1652                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
5fde : 08              >            php         ;save flags
5fdf : b552            >            lda zpt,x
5fe1 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
5fe4 : f003            >        beq skip2595
                       >        trap            ;failed not equal (non zero)
5fe6 : 20df73          >        jsr report_error
                       >
5fe9 :                 >skip2595
                       >
5fe9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5fea : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
5fec : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
5fef : f003            >        beq skip2598
                       >        trap            ;failed not equal (non zero)
5ff1 : 20df73          >        jsr report_error
                       >
5ff4 :                 >skip2598
                       >
                        
5ff4 : ca                       dex
5ff5 : 10dd                     bpl tasl7
                        
5ff7 : a203                     ldx #3
5ff9 :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
5ff9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ffb : 48              >            pha         ;use stack to load status
5ffc : b559            >            lda zp1,x    ;load to indexed zeropage
5ffe : 9552            >            sta zpt,x
6000 : 28              >            plp
                        
6001 : 5652                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
6003 : 08              >            php         ;save flags
6004 : b552            >            lda zpt,x
6006 : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
6009 : f003            >        beq skip2603
                       >        trap            ;failed not equal (non zero)
600b : 20df73          >        jsr report_error
                       >
600e :                 >skip2603
                       >
600e : 68              >            pla         ;load status
                       >            eor_flag 0
600f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6011 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6014 : f003            >        beq skip2606
                       >        trap            ;failed not equal (non zero)
6016 : 20df73          >        jsr report_error
                       >
6019 :                 >skip2606
                       >
                        
6019 : ca                       dex
601a : 10dd                     bpl tlsr6
601c : a203                     ldx #3
601e :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
601e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6020 : 48              >            pha         ;use stack to load status
6021 : b559            >            lda zp1,x    ;load to indexed zeropage
6023 : 9552            >            sta zpt,x
6025 : 28              >            plp
                        
6026 : 5652                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
6028 : 08              >            php         ;save flags
6029 : b552            >            lda zpt,x
602b : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
602e : f003            >        beq skip2611
                       >        trap            ;failed not equal (non zero)
6030 : 20df73          >        jsr report_error
                       >
6033 :                 >skip2611
                       >
6033 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6034 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6036 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6039 : f003            >        beq skip2614
                       >        trap            ;failed not equal (non zero)
603b : 20df73          >        jsr report_error
                       >
603e :                 >skip2614
                       >
                        
603e : ca                       dex
603f : 10dd                     bpl tlsr7
                        
6041 : a203                     ldx #3
6043 :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
6043 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6045 : 48              >            pha         ;use stack to load status
6046 : b559            >            lda zp1,x    ;load to indexed zeropage
6048 : 9552            >            sta zpt,x
604a : 28              >            plp
                        
604b : 3652                     rol zpt,x
                                tst_zx rROL,fROL,0
604d : 08              >            php         ;save flags
604e : b552            >            lda zpt,x
6050 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
6053 : f003            >        beq skip2619
                       >        trap            ;failed not equal (non zero)
6055 : 20df73          >        jsr report_error
                       >
6058 :                 >skip2619
                       >
6058 : 68              >            pla         ;load status
                       >            eor_flag 0
6059 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
605b : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
605e : f003            >        beq skip2622
                       >        trap            ;failed not equal (non zero)
6060 : 20df73          >        jsr report_error
                       >
6063 :                 >skip2622
                       >
                        
6063 : ca                       dex
6064 : 10dd                     bpl trol6
6066 : a203                     ldx #3
6068 :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
6068 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
606a : 48              >            pha         ;use stack to load status
606b : b559            >            lda zp1,x    ;load to indexed zeropage
606d : 9552            >            sta zpt,x
606f : 28              >            plp
                        
6070 : 3652                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
6072 : 08              >            php         ;save flags
6073 : b552            >            lda zpt,x
6075 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
6078 : f003            >        beq skip2627
                       >        trap            ;failed not equal (non zero)
607a : 20df73          >        jsr report_error
                       >
607d :                 >skip2627
                       >
607d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
607e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6080 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
6083 : f003            >        beq skip2630
                       >        trap            ;failed not equal (non zero)
6085 : 20df73          >        jsr report_error
                       >
6088 :                 >skip2630
                       >
                        
6088 : ca                       dex
6089 : 10dd                     bpl trol7
                        
608b : a203                     ldx #3
608d :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
608d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
608f : 48              >            pha         ;use stack to load status
6090 : b559            >            lda zp1,x    ;load to indexed zeropage
6092 : 9552            >            sta zpt,x
6094 : 28              >            plp
                        
6095 : 3652                     rol zpt,x
                                tst_zx rROLc,fROLc,0
6097 : 08              >            php         ;save flags
6098 : b552            >            lda zpt,x
609a : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
609d : f003            >        beq skip2635
                       >        trap            ;failed not equal (non zero)
609f : 20df73          >        jsr report_error
                       >
60a2 :                 >skip2635
                       >
60a2 : 68              >            pla         ;load status
                       >            eor_flag 0
60a3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
60a5 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
60a8 : f003            >        beq skip2638
                       >        trap            ;failed not equal (non zero)
60aa : 20df73          >        jsr report_error
                       >
60ad :                 >skip2638
                       >
                        
60ad : ca                       dex
60ae : 10dd                     bpl trolc6
60b0 : a203                     ldx #3
60b2 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
60b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
60b4 : 48              >            pha         ;use stack to load status
60b5 : b559            >            lda zp1,x    ;load to indexed zeropage
60b7 : 9552            >            sta zpt,x
60b9 : 28              >            plp
                        
60ba : 3652                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
60bc : 08              >            php         ;save flags
60bd : b552            >            lda zpt,x
60bf : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
60c2 : f003            >        beq skip2643
                       >        trap            ;failed not equal (non zero)
60c4 : 20df73          >        jsr report_error
                       >
60c7 :                 >skip2643
                       >
60c7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
60c8 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
60ca : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
60cd : f003            >        beq skip2646
                       >        trap            ;failed not equal (non zero)
60cf : 20df73          >        jsr report_error
                       >
60d2 :                 >skip2646
                       >
                        
60d2 : ca                       dex
60d3 : 10dd                     bpl trolc7
                        
60d5 : a203                     ldx #3
60d7 :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
60d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
60d9 : 48              >            pha         ;use stack to load status
60da : b559            >            lda zp1,x    ;load to indexed zeropage
60dc : 9552            >            sta zpt,x
60de : 28              >            plp
                        
60df : 7652                     ror zpt,x
                                tst_zx rROR,fROR,0
60e1 : 08              >            php         ;save flags
60e2 : b552            >            lda zpt,x
60e4 : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
60e7 : f003            >        beq skip2651
                       >        trap            ;failed not equal (non zero)
60e9 : 20df73          >        jsr report_error
                       >
60ec :                 >skip2651
                       >
60ec : 68              >            pla         ;load status
                       >            eor_flag 0
60ed : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
60ef : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
60f2 : f003            >        beq skip2654
                       >        trap            ;failed not equal (non zero)
60f4 : 20df73          >        jsr report_error
                       >
60f7 :                 >skip2654
                       >
                        
60f7 : ca                       dex
60f8 : 10dd                     bpl tror6
60fa : a203                     ldx #3
60fc :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
60fc : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
60fe : 48              >            pha         ;use stack to load status
60ff : b559            >            lda zp1,x    ;load to indexed zeropage
6101 : 9552            >            sta zpt,x
6103 : 28              >            plp
                        
6104 : 7652                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
6106 : 08              >            php         ;save flags
6107 : b552            >            lda zpt,x
6109 : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
610c : f003            >        beq skip2659
                       >        trap            ;failed not equal (non zero)
610e : 20df73          >        jsr report_error
                       >
6111 :                 >skip2659
                       >
6111 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
6112 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
6114 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
6117 : f003            >        beq skip2662
                       >        trap            ;failed not equal (non zero)
6119 : 20df73          >        jsr report_error
                       >
611c :                 >skip2662
                       >
                        
611c : ca                       dex
611d : 10dd                     bpl tror7
                        
611f : a203                     ldx #3
6121 :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
6121 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
6123 : 48              >            pha         ;use stack to load status
6124 : b559            >            lda zp1,x    ;load to indexed zeropage
6126 : 9552            >            sta zpt,x
6128 : 28              >            plp
                        
6129 : 7652                     ror zpt,x
                                tst_zx rRORc,fRORc,0
612b : 08              >            php         ;save flags
612c : b552            >            lda zpt,x
612e : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
6131 : f003            >        beq skip2667
                       >        trap            ;failed not equal (non zero)
6133 : 20df73          >        jsr report_error
                       >
6136 :                 >skip2667
                       >
6136 : 68              >            pla         ;load status
                       >            eor_flag 0
6137 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6139 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
613c : f003            >        beq skip2670
                       >        trap            ;failed not equal (non zero)
613e : 20df73          >        jsr report_error
                       >
6141 :                 >skip2670
                       >
                        
6141 : ca                       dex
6142 : 10dd                     bpl trorc6
6144 : a203                     ldx #3
6146 :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
6146 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6148 : 48              >            pha         ;use stack to load status
6149 : b559            >            lda zp1,x    ;load to indexed zeropage
614b : 9552            >            sta zpt,x
614d : 28              >            plp
                        
614e : 7652                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
6150 : 08              >            php         ;save flags
6151 : b552            >            lda zpt,x
6153 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
6156 : f003            >        beq skip2675
                       >        trap            ;failed not equal (non zero)
6158 : 20df73          >        jsr report_error
                       >
615b :                 >skip2675
                       >
615b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
615c : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
615e : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6161 : f003            >        beq skip2678
                       >        trap            ;failed not equal (non zero)
6163 : 20df73          >        jsr report_error
                       >
6166 :                 >skip2678
                       >
                        
6166 : ca                       dex
6167 : 10dd                     bpl trorc7
                                next_test
6169 : ad0032          >            lda test_case   ;previous test
616c : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
616e : f003            >        beq skip2681
                       >        trap            ;failed not equal (non zero)
6170 : 20df73          >        jsr report_error
                       >
6173 :                 >skip2681
                       >
0021 =                 >test_num = test_num + 1
6173 : a921            >            lda #test_num   ;*** next tests' number
6175 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
6178 : a203                     ldx #3
617a :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
617a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
617c : 48              >            pha         ;use stack to load status
617d : b559            >            lda zp1,x    ;load to indexed memory
617f : 9d0332          >            sta abst,x
6182 : 28              >            plp
                        
6183 : 1e0332                   asl abst,x
                                tst_absx rASL,fASL,0
6186 : 08              >            php         ;save flags
6187 : bd0332          >            lda abst,x
618a : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
618d : f003            >        beq skip2686
                       >        trap            ;failed not equal (non zero)
618f : 20df73          >        jsr report_error
                       >
6192 :                 >skip2686
                       >
6192 : 68              >            pla         ;load status
                       >            eor_flag 0
6193 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6195 : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
6198 : f003            >        beq skip2689
                       >        trap            ;failed not equal (non zero)
619a : 20df73          >        jsr report_error
                       >
619d :                 >skip2689
                       >
                        
619d : ca                       dex
619e : 10da                     bpl tasl8
61a0 : a203                     ldx #3
61a2 :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
61a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
61a4 : 48              >            pha         ;use stack to load status
61a5 : b559            >            lda zp1,x    ;load to indexed memory
61a7 : 9d0332          >            sta abst,x
61aa : 28              >            plp
                        
61ab : 1e0332                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
61ae : 08              >            php         ;save flags
61af : bd0332          >            lda abst,x
61b2 : dd2032          >            cmp rASL,x    ;test result
                       >            trap_ne
61b5 : f003            >        beq skip2694
                       >        trap            ;failed not equal (non zero)
61b7 : 20df73          >        jsr report_error
                       >
61ba :                 >skip2694
                       >
61ba : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
61bb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
61bd : dd3032          >            cmp fASL,x    ;test flags
                       >            trap_ne
61c0 : f003            >        beq skip2697
                       >        trap            ;failed not equal (non zero)
61c2 : 20df73          >        jsr report_error
                       >
61c5 :                 >skip2697
                       >
                        
61c5 : ca                       dex
61c6 : 10da                     bpl tasl9
                        
61c8 : a203                     ldx #3
61ca :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
61ca : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
61cc : 48              >            pha         ;use stack to load status
61cd : b559            >            lda zp1,x    ;load to indexed memory
61cf : 9d0332          >            sta abst,x
61d2 : 28              >            plp
                        
61d3 : 5e0332                   lsr abst,x
                                tst_absx rLSR,fLSR,0
61d6 : 08              >            php         ;save flags
61d7 : bd0332          >            lda abst,x
61da : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
61dd : f003            >        beq skip2702
                       >        trap            ;failed not equal (non zero)
61df : 20df73          >        jsr report_error
                       >
61e2 :                 >skip2702
                       >
61e2 : 68              >            pla         ;load status
                       >            eor_flag 0
61e3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
61e5 : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
61e8 : f003            >        beq skip2705
                       >        trap            ;failed not equal (non zero)
61ea : 20df73          >        jsr report_error
                       >
61ed :                 >skip2705
                       >
                        
61ed : ca                       dex
61ee : 10da                     bpl tlsr8
61f0 : a203                     ldx #3
61f2 :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
61f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
61f4 : 48              >            pha         ;use stack to load status
61f5 : b559            >            lda zp1,x    ;load to indexed memory
61f7 : 9d0332          >            sta abst,x
61fa : 28              >            plp
                        
61fb : 5e0332                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
61fe : 08              >            php         ;save flags
61ff : bd0332          >            lda abst,x
6202 : dd2832          >            cmp rLSR,x    ;test result
                       >            trap_ne
6205 : f003            >        beq skip2710
                       >        trap            ;failed not equal (non zero)
6207 : 20df73          >        jsr report_error
                       >
620a :                 >skip2710
                       >
620a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
620b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
620d : dd3832          >            cmp fLSR,x    ;test flags
                       >            trap_ne
6210 : f003            >        beq skip2713
                       >        trap            ;failed not equal (non zero)
6212 : 20df73          >        jsr report_error
                       >
6215 :                 >skip2713
                       >
                        
6215 : ca                       dex
6216 : 10da                     bpl tlsr9
                        
6218 : a203                     ldx #3
621a :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
621a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
621c : 48              >            pha         ;use stack to load status
621d : b559            >            lda zp1,x    ;load to indexed memory
621f : 9d0332          >            sta abst,x
6222 : 28              >            plp
                        
6223 : 3e0332                   rol abst,x
                                tst_absx rROL,fROL,0
6226 : 08              >            php         ;save flags
6227 : bd0332          >            lda abst,x
622a : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
622d : f003            >        beq skip2718
                       >        trap            ;failed not equal (non zero)
622f : 20df73          >        jsr report_error
                       >
6232 :                 >skip2718
                       >
6232 : 68              >            pla         ;load status
                       >            eor_flag 0
6233 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6235 : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
6238 : f003            >        beq skip2721
                       >        trap            ;failed not equal (non zero)
623a : 20df73          >        jsr report_error
                       >
623d :                 >skip2721
                       >
                        
623d : ca                       dex
623e : 10da                     bpl trol8
6240 : a203                     ldx #3
6242 :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
6242 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
6244 : 48              >            pha         ;use stack to load status
6245 : b559            >            lda zp1,x    ;load to indexed memory
6247 : 9d0332          >            sta abst,x
624a : 28              >            plp
                        
624b : 3e0332                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
624e : 08              >            php         ;save flags
624f : bd0332          >            lda abst,x
6252 : dd2032          >            cmp rROL,x    ;test result
                       >            trap_ne
6255 : f003            >        beq skip2726
                       >        trap            ;failed not equal (non zero)
6257 : 20df73          >        jsr report_error
                       >
625a :                 >skip2726
                       >
625a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
625b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
625d : dd3032          >            cmp fROL,x    ;test flags
                       >            trap_ne
6260 : f003            >        beq skip2729
                       >        trap            ;failed not equal (non zero)
6262 : 20df73          >        jsr report_error
                       >
6265 :                 >skip2729
                       >
                        
6265 : ca                       dex
6266 : 10da                     bpl trol9
                        
6268 : a203                     ldx #3
626a :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
626a : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
626c : 48              >            pha         ;use stack to load status
626d : b559            >            lda zp1,x    ;load to indexed memory
626f : 9d0332          >            sta abst,x
6272 : 28              >            plp
                        
6273 : 3e0332                   rol abst,x
                                tst_absx rROLc,fROLc,0
6276 : 08              >            php         ;save flags
6277 : bd0332          >            lda abst,x
627a : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
627d : f003            >        beq skip2734
                       >        trap            ;failed not equal (non zero)
627f : 20df73          >        jsr report_error
                       >
6282 :                 >skip2734
                       >
6282 : 68              >            pla         ;load status
                       >            eor_flag 0
6283 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6285 : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
6288 : f003            >        beq skip2737
                       >        trap            ;failed not equal (non zero)
628a : 20df73          >        jsr report_error
                       >
628d :                 >skip2737
                       >
                        
628d : ca                       dex
628e : 10da                     bpl trolc8
6290 : a203                     ldx #3
6292 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
6292 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6294 : 48              >            pha         ;use stack to load status
6295 : b559            >            lda zp1,x    ;load to indexed memory
6297 : 9d0332          >            sta abst,x
629a : 28              >            plp
                        
629b : 3e0332                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
629e : 08              >            php         ;save flags
629f : bd0332          >            lda abst,x
62a2 : dd2432          >            cmp rROLc,x    ;test result
                       >            trap_ne
62a5 : f003            >        beq skip2742
                       >        trap            ;failed not equal (non zero)
62a7 : 20df73          >        jsr report_error
                       >
62aa :                 >skip2742
                       >
62aa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
62ab : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
62ad : dd3432          >            cmp fROLc,x    ;test flags
                       >            trap_ne
62b0 : f003            >        beq skip2745
                       >        trap            ;failed not equal (non zero)
62b2 : 20df73          >        jsr report_error
                       >
62b5 :                 >skip2745
                       >
                        
62b5 : ca                       dex
62b6 : 10da                     bpl trolc9
                        
62b8 : a203                     ldx #3
62ba :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
62ba : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
62bc : 48              >            pha         ;use stack to load status
62bd : b559            >            lda zp1,x    ;load to indexed memory
62bf : 9d0332          >            sta abst,x
62c2 : 28              >            plp
                        
62c3 : 7e0332                   ror abst,x
                                tst_absx rROR,fROR,0
62c6 : 08              >            php         ;save flags
62c7 : bd0332          >            lda abst,x
62ca : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
62cd : f003            >        beq skip2750
                       >        trap            ;failed not equal (non zero)
62cf : 20df73          >        jsr report_error
                       >
62d2 :                 >skip2750
                       >
62d2 : 68              >            pla         ;load status
                       >            eor_flag 0
62d3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
62d5 : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
62d8 : f003            >        beq skip2753
                       >        trap            ;failed not equal (non zero)
62da : 20df73          >        jsr report_error
                       >
62dd :                 >skip2753
                       >
                        
62dd : ca                       dex
62de : 10da                     bpl tror8
62e0 : a203                     ldx #3
62e2 :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
62e2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
62e4 : 48              >            pha         ;use stack to load status
62e5 : b559            >            lda zp1,x    ;load to indexed memory
62e7 : 9d0332          >            sta abst,x
62ea : 28              >            plp
                        
62eb : 7e0332                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
62ee : 08              >            php         ;save flags
62ef : bd0332          >            lda abst,x
62f2 : dd2832          >            cmp rROR,x    ;test result
                       >            trap_ne
62f5 : f003            >        beq skip2758
                       >        trap            ;failed not equal (non zero)
62f7 : 20df73          >        jsr report_error
                       >
62fa :                 >skip2758
                       >
62fa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
62fb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
62fd : dd3832          >            cmp fROR,x    ;test flags
                       >            trap_ne
6300 : f003            >        beq skip2761
                       >        trap            ;failed not equal (non zero)
6302 : 20df73          >        jsr report_error
                       >
6305 :                 >skip2761
                       >
                        
6305 : ca                       dex
6306 : 10da                     bpl tror9
                        
6308 : a203                     ldx #3
630a :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
630a : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
630c : 48              >            pha         ;use stack to load status
630d : b559            >            lda zp1,x    ;load to indexed memory
630f : 9d0332          >            sta abst,x
6312 : 28              >            plp
                        
6313 : 7e0332                   ror abst,x
                                tst_absx rRORc,fRORc,0
6316 : 08              >            php         ;save flags
6317 : bd0332          >            lda abst,x
631a : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
631d : f003            >        beq skip2766
                       >        trap            ;failed not equal (non zero)
631f : 20df73          >        jsr report_error
                       >
6322 :                 >skip2766
                       >
6322 : 68              >            pla         ;load status
                       >            eor_flag 0
6323 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6325 : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6328 : f003            >        beq skip2769
                       >        trap            ;failed not equal (non zero)
632a : 20df73          >        jsr report_error
                       >
632d :                 >skip2769
                       >
                        
632d : ca                       dex
632e : 10da                     bpl trorc8
6330 : a203                     ldx #3
6332 :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
6332 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6334 : 48              >            pha         ;use stack to load status
6335 : b559            >            lda zp1,x    ;load to indexed memory
6337 : 9d0332          >            sta abst,x
633a : 28              >            plp
                        
633b : 7e0332                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
633e : 08              >            php         ;save flags
633f : bd0332          >            lda abst,x
6342 : dd2c32          >            cmp rRORc,x    ;test result
                       >            trap_ne
6345 : f003            >        beq skip2774
                       >        trap            ;failed not equal (non zero)
6347 : 20df73          >        jsr report_error
                       >
634a :                 >skip2774
                       >
634a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
634b : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
634d : dd3c32          >            cmp fRORc,x    ;test flags
                       >            trap_ne
6350 : f003            >        beq skip2777
                       >        trap            ;failed not equal (non zero)
6352 : 20df73          >        jsr report_error
                       >
6355 :                 >skip2777
                       >
                        
6355 : ca                       dex
6356 : 10da                     bpl trorc9
                                next_test
6358 : ad0032          >            lda test_case   ;previous test
635b : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
635d : f003            >        beq skip2780
                       >        trap            ;failed not equal (non zero)
635f : 20df73          >        jsr report_error
                       >
6362 :                 >skip2780
                       >
0022 =                 >test_num = test_num + 1
6362 : a922            >            lda #test_num   ;*** next tests' number
6364 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
6367 : a200                     ldx #0
6369 : a97e                     lda #$7e
636b : 8552                     sta zpt
636d :                  tinc    
                                set_stat 0
                       >            load_flag 0
636d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
636f : 48              >            pha         ;use stack to load status
6370 : 28              >            plp
                        
6371 : e652                     inc zpt
                                tst_z rINC,fINC,0
6373 : 08              >            php         ;save flags
6374 : a552            >            lda zpt
6376 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6379 : f003            >        beq skip2785
                       >        trap            ;failed not equal (non zero)
637b : 20df73          >        jsr report_error
                       >
637e :                 >skip2785
                       >
637e : 68              >            pla         ;load status
                       >            eor_flag 0
637f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6381 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
6384 : f003            >        beq skip2788
                       >        trap            ;failed not equal (non zero)
6386 : 20df73          >        jsr report_error
                       >
6389 :                 >skip2788
                       >
                        
6389 : e8                       inx
638a : e002                     cpx #2
638c : d004                     bne tinc1
638e : a9fe                     lda #$fe
6390 : 8552                     sta zpt
6392 : e005             tinc1   cpx #5
6394 : d0d7                     bne tinc
6396 : ca                       dex
6397 : e652                     inc zpt
6399 :                  tdec    
                                set_stat 0
                       >            load_flag 0
6399 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
639b : 48              >            pha         ;use stack to load status
639c : 28              >            plp
                        
639d : c652                     dec zpt
                                tst_z rINC,fINC,0
639f : 08              >            php         ;save flags
63a0 : a552            >            lda zpt
63a2 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
63a5 : f003            >        beq skip2793
                       >        trap            ;failed not equal (non zero)
63a7 : 20df73          >        jsr report_error
                       >
63aa :                 >skip2793
                       >
63aa : 68              >            pla         ;load status
                       >            eor_flag 0
63ab : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
63ad : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
63b0 : f003            >        beq skip2796
                       >        trap            ;failed not equal (non zero)
63b2 : 20df73          >        jsr report_error
                       >
63b5 :                 >skip2796
                       >
                        
63b5 : ca                       dex
63b6 : 300a                     bmi tdec1
63b8 : e001                     cpx #1
63ba : d0dd                     bne tdec
63bc : a981                     lda #$81
63be : 8552                     sta zpt
63c0 : d0d7                     bne tdec
63c2 :                  tdec1
63c2 : a200                     ldx #0
63c4 : a97e                     lda #$7e
63c6 : 8552                     sta zpt
63c8 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
63c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
63ca : 48              >            pha         ;use stack to load status
63cb : 28              >            plp
                        
63cc : e652                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
63ce : 08              >            php         ;save flags
63cf : a552            >            lda zpt
63d1 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
63d4 : f003            >        beq skip2801
                       >        trap            ;failed not equal (non zero)
63d6 : 20df73          >        jsr report_error
                       >
63d9 :                 >skip2801
                       >
63d9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
63da : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
63dc : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
63df : f003            >        beq skip2804
                       >        trap            ;failed not equal (non zero)
63e1 : 20df73          >        jsr report_error
                       >
63e4 :                 >skip2804
                       >
                        
63e4 : e8                       inx
63e5 : e002                     cpx #2
63e7 : d004                     bne tinc11
63e9 : a9fe                     lda #$fe
63eb : 8552                     sta zpt
63ed : e005             tinc11  cpx #5
63ef : d0d7                     bne tinc10
63f1 : ca                       dex
63f2 : e652                     inc zpt
63f4 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
63f4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
63f6 : 48              >            pha         ;use stack to load status
63f7 : 28              >            plp
                        
63f8 : c652                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
63fa : 08              >            php         ;save flags
63fb : a552            >            lda zpt
63fd : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6400 : f003            >        beq skip2809
                       >        trap            ;failed not equal (non zero)
6402 : 20df73          >        jsr report_error
                       >
6405 :                 >skip2809
                       >
6405 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6406 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6408 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
640b : f003            >        beq skip2812
                       >        trap            ;failed not equal (non zero)
640d : 20df73          >        jsr report_error
                       >
6410 :                 >skip2812
                       >
                        
6410 : ca                       dex
6411 : 300a                     bmi tdec11
6413 : e001                     cpx #1
6415 : d0dd                     bne tdec10
6417 : a981                     lda #$81
6419 : 8552                     sta zpt
641b : d0d7                     bne tdec10
641d :                  tdec11
                                next_test
641d : ad0032          >            lda test_case   ;previous test
6420 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6422 : f003            >        beq skip2815
                       >        trap            ;failed not equal (non zero)
6424 : 20df73          >        jsr report_error
                       >
6427 :                 >skip2815
                       >
0023 =                 >test_num = test_num + 1
6427 : a923            >            lda #test_num   ;*** next tests' number
6429 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
642c : a200                     ldx #0
642e : a97e                     lda #$7e
6430 : 8d0332                   sta abst
6433 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
6433 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6435 : 48              >            pha         ;use stack to load status
6436 : 28              >            plp
                        
6437 : ee0332                   inc abst
                                tst_abs rINC,fINC,0
643a : 08              >            php         ;save flags
643b : ad0332          >            lda abst
643e : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6441 : f003            >        beq skip2820
                       >        trap            ;failed not equal (non zero)
6443 : 20df73          >        jsr report_error
                       >
6446 :                 >skip2820
                       >
6446 : 68              >            pla         ;load status
                       >            eor_flag 0
6447 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6449 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
644c : f003            >        beq skip2823
                       >        trap            ;failed not equal (non zero)
644e : 20df73          >        jsr report_error
                       >
6451 :                 >skip2823
                       >
                        
6451 : e8                       inx
6452 : e002                     cpx #2
6454 : d005                     bne tinc3
6456 : a9fe                     lda #$fe
6458 : 8d0332                   sta abst
645b : e005             tinc3   cpx #5
645d : d0d4                     bne tinc2
645f : ca                       dex
6460 : ee0332                   inc abst
6463 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
6463 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6465 : 48              >            pha         ;use stack to load status
6466 : 28              >            plp
                        
6467 : ce0332                   dec abst
                                tst_abs rINC,fINC,0
646a : 08              >            php         ;save flags
646b : ad0332          >            lda abst
646e : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6471 : f003            >        beq skip2828
                       >        trap            ;failed not equal (non zero)
6473 : 20df73          >        jsr report_error
                       >
6476 :                 >skip2828
                       >
6476 : 68              >            pla         ;load status
                       >            eor_flag 0
6477 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6479 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
647c : f003            >        beq skip2831
                       >        trap            ;failed not equal (non zero)
647e : 20df73          >        jsr report_error
                       >
6481 :                 >skip2831
                       >
                        
6481 : ca                       dex
6482 : 300b                     bmi tdec3
6484 : e001                     cpx #1
6486 : d0db                     bne tdec2
6488 : a981                     lda #$81
648a : 8d0332                   sta abst
648d : d0d4                     bne tdec2
648f :                  tdec3
648f : a200                     ldx #0
6491 : a97e                     lda #$7e
6493 : 8d0332                   sta abst
6496 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
6496 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6498 : 48              >            pha         ;use stack to load status
6499 : 28              >            plp
                        
649a : ee0332                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
649d : 08              >            php         ;save flags
649e : ad0332          >            lda abst
64a1 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
64a4 : f003            >        beq skip2836
                       >        trap            ;failed not equal (non zero)
64a6 : 20df73          >        jsr report_error
                       >
64a9 :                 >skip2836
                       >
64a9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
64aa : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
64ac : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
64af : f003            >        beq skip2839
                       >        trap            ;failed not equal (non zero)
64b1 : 20df73          >        jsr report_error
                       >
64b4 :                 >skip2839
                       >
                        
64b4 : e8                       inx
64b5 : e002                     cpx #2
64b7 : d005                     bne tinc13
64b9 : a9fe                     lda #$fe
64bb : 8d0332                   sta abst
64be : e005             tinc13   cpx #5
64c0 : d0d4                     bne tinc12
64c2 : ca                       dex
64c3 : ee0332                   inc abst
64c6 :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
64c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
64c8 : 48              >            pha         ;use stack to load status
64c9 : 28              >            plp
                        
64ca : ce0332                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
64cd : 08              >            php         ;save flags
64ce : ad0332          >            lda abst
64d1 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
64d4 : f003            >        beq skip2844
                       >        trap            ;failed not equal (non zero)
64d6 : 20df73          >        jsr report_error
                       >
64d9 :                 >skip2844
                       >
64d9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
64da : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
64dc : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
64df : f003            >        beq skip2847
                       >        trap            ;failed not equal (non zero)
64e1 : 20df73          >        jsr report_error
                       >
64e4 :                 >skip2847
                       >
                        
64e4 : ca                       dex
64e5 : 300b                     bmi tdec13
64e7 : e001                     cpx #1
64e9 : d0db                     bne tdec12
64eb : a981                     lda #$81
64ed : 8d0332                   sta abst
64f0 : d0d4                     bne tdec12
64f2 :                  tdec13
                                next_test
64f2 : ad0032          >            lda test_case   ;previous test
64f5 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
64f7 : f003            >        beq skip2850
                       >        trap            ;failed not equal (non zero)
64f9 : 20df73          >        jsr report_error
                       >
64fc :                 >skip2850
                       >
0024 =                 >test_num = test_num + 1
64fc : a924            >            lda #test_num   ;*** next tests' number
64fe : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
6501 : a200                     ldx #0
6503 : a97e                     lda #$7e
6505 : 9552             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
6507 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6509 : 48              >            pha         ;use stack to load status
650a : 28              >            plp
                        
650b : f652                     inc zpt,x
                                tst_zx rINC,fINC,0
650d : 08              >            php         ;save flags
650e : b552            >            lda zpt,x
6510 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6513 : f003            >        beq skip2855
                       >        trap            ;failed not equal (non zero)
6515 : 20df73          >        jsr report_error
                       >
6518 :                 >skip2855
                       >
6518 : 68              >            pla         ;load status
                       >            eor_flag 0
6519 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
651b : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
651e : f003            >        beq skip2858
                       >        trap            ;failed not equal (non zero)
6520 : 20df73          >        jsr report_error
                       >
6523 :                 >skip2858
                       >
                        
6523 : b552                     lda zpt,x
6525 : e8                       inx
6526 : e002                     cpx #2
6528 : d002                     bne tinc5
652a : a9fe                     lda #$fe
652c : e005             tinc5   cpx #5
652e : d0d5                     bne tinc4
6530 : ca                       dex
6531 : a902                     lda #2
6533 : 9552             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
6535 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6537 : 48              >            pha         ;use stack to load status
6538 : 28              >            plp
                        
6539 : d652                     dec zpt,x
                                tst_zx rINC,fINC,0
653b : 08              >            php         ;save flags
653c : b552            >            lda zpt,x
653e : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6541 : f003            >        beq skip2863
                       >        trap            ;failed not equal (non zero)
6543 : 20df73          >        jsr report_error
                       >
6546 :                 >skip2863
                       >
6546 : 68              >            pla         ;load status
                       >            eor_flag 0
6547 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6549 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
654c : f003            >        beq skip2866
                       >        trap            ;failed not equal (non zero)
654e : 20df73          >        jsr report_error
                       >
6551 :                 >skip2866
                       >
                        
6551 : b552                     lda zpt,x
6553 : ca                       dex
6554 : 3008                     bmi tdec5
6556 : e001                     cpx #1
6558 : d0d9                     bne tdec4
655a : a981                     lda #$81
655c : d0d5                     bne tdec4
655e :                  tdec5
655e : a200                     ldx #0
6560 : a97e                     lda #$7e
6562 : 9552             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
6564 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6566 : 48              >            pha         ;use stack to load status
6567 : 28              >            plp
                        
6568 : f652                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
656a : 08              >            php         ;save flags
656b : b552            >            lda zpt,x
656d : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6570 : f003            >        beq skip2871
                       >        trap            ;failed not equal (non zero)
6572 : 20df73          >        jsr report_error
                       >
6575 :                 >skip2871
                       >
6575 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6576 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6578 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
657b : f003            >        beq skip2874
                       >        trap            ;failed not equal (non zero)
657d : 20df73          >        jsr report_error
                       >
6580 :                 >skip2874
                       >
                        
6580 : b552                     lda zpt,x
6582 : e8                       inx
6583 : e002                     cpx #2
6585 : d002                     bne tinc15
6587 : a9fe                     lda #$fe
6589 : e005             tinc15  cpx #5
658b : d0d5                     bne tinc14
658d : ca                       dex
658e : a902                     lda #2
6590 : 9552             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
6592 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6594 : 48              >            pha         ;use stack to load status
6595 : 28              >            plp
                        
6596 : d652                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
6598 : 08              >            php         ;save flags
6599 : b552            >            lda zpt,x
659b : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
659e : f003            >        beq skip2879
                       >        trap            ;failed not equal (non zero)
65a0 : 20df73          >        jsr report_error
                       >
65a3 :                 >skip2879
                       >
65a3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
65a4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
65a6 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
65a9 : f003            >        beq skip2882
                       >        trap            ;failed not equal (non zero)
65ab : 20df73          >        jsr report_error
                       >
65ae :                 >skip2882
                       >
                        
65ae : b552                     lda zpt,x
65b0 : ca                       dex
65b1 : 3008                     bmi tdec15
65b3 : e001                     cpx #1
65b5 : d0d9                     bne tdec14
65b7 : a981                     lda #$81
65b9 : d0d5                     bne tdec14
65bb :                  tdec15
                                next_test
65bb : ad0032          >            lda test_case   ;previous test
65be : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
65c0 : f003            >        beq skip2885
                       >        trap            ;failed not equal (non zero)
65c2 : 20df73          >        jsr report_error
                       >
65c5 :                 >skip2885
                       >
0025 =                 >test_num = test_num + 1
65c5 : a925            >            lda #test_num   ;*** next tests' number
65c7 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
65ca : a200                     ldx #0
65cc : a97e                     lda #$7e
65ce : 9d0332           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
65d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
65d3 : 48              >            pha         ;use stack to load status
65d4 : 28              >            plp
                        
65d5 : fe0332                   inc abst,x
                                tst_absx rINC,fINC,0
65d8 : 08              >            php         ;save flags
65d9 : bd0332          >            lda abst,x
65dc : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
65df : f003            >        beq skip2890
                       >        trap            ;failed not equal (non zero)
65e1 : 20df73          >        jsr report_error
                       >
65e4 :                 >skip2890
                       >
65e4 : 68              >            pla         ;load status
                       >            eor_flag 0
65e5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
65e7 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
65ea : f003            >        beq skip2893
                       >        trap            ;failed not equal (non zero)
65ec : 20df73          >        jsr report_error
                       >
65ef :                 >skip2893
                       >
                        
65ef : bd0332                   lda abst,x
65f2 : e8                       inx
65f3 : e002                     cpx #2
65f5 : d002                     bne tinc7
65f7 : a9fe                     lda #$fe
65f9 : e005             tinc7   cpx #5
65fb : d0d1                     bne tinc6
65fd : ca                       dex
65fe : a902                     lda #2
6600 : 9d0332           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
6603 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6605 : 48              >            pha         ;use stack to load status
6606 : 28              >            plp
                        
6607 : de0332                   dec abst,x
                                tst_absx rINC,fINC,0
660a : 08              >            php         ;save flags
660b : bd0332          >            lda abst,x
660e : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6611 : f003            >        beq skip2898
                       >        trap            ;failed not equal (non zero)
6613 : 20df73          >        jsr report_error
                       >
6616 :                 >skip2898
                       >
6616 : 68              >            pla         ;load status
                       >            eor_flag 0
6617 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6619 : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
661c : f003            >        beq skip2901
                       >        trap            ;failed not equal (non zero)
661e : 20df73          >        jsr report_error
                       >
6621 :                 >skip2901
                       >
                        
6621 : bd0332                   lda abst,x
6624 : ca                       dex
6625 : 3008                     bmi tdec7
6627 : e001                     cpx #1
6629 : d0d5                     bne tdec6
662b : a981                     lda #$81
662d : d0d1                     bne tdec6
662f :                  tdec7
662f : a200                     ldx #0
6631 : a97e                     lda #$7e
6633 : 9d0332           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
6636 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6638 : 48              >            pha         ;use stack to load status
6639 : 28              >            plp
                        
663a : fe0332                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
663d : 08              >            php         ;save flags
663e : bd0332          >            lda abst,x
6641 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6644 : f003            >        beq skip2906
                       >        trap            ;failed not equal (non zero)
6646 : 20df73          >        jsr report_error
                       >
6649 :                 >skip2906
                       >
6649 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
664a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
664c : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
664f : f003            >        beq skip2909
                       >        trap            ;failed not equal (non zero)
6651 : 20df73          >        jsr report_error
                       >
6654 :                 >skip2909
                       >
                        
6654 : bd0332                   lda abst,x
6657 : e8                       inx
6658 : e002                     cpx #2
665a : d002                     bne tinc17
665c : a9fe                     lda #$fe
665e : e005             tinc17  cpx #5
6660 : d0d1                     bne tinc16
6662 : ca                       dex
6663 : a902                     lda #2
6665 : 9d0332           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
6668 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
666a : 48              >            pha         ;use stack to load status
666b : 28              >            plp
                        
666c : de0332                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
666f : 08              >            php         ;save flags
6670 : bd0332          >            lda abst,x
6673 : dd4032          >            cmp rINC,x    ;test result
                       >            trap_ne
6676 : f003            >        beq skip2914
                       >        trap            ;failed not equal (non zero)
6678 : 20df73          >        jsr report_error
                       >
667b :                 >skip2914
                       >
667b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
667c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
667e : dd4532          >            cmp fINC,x    ;test flags
                       >            trap_ne
6681 : f003            >        beq skip2917
                       >        trap            ;failed not equal (non zero)
6683 : 20df73          >        jsr report_error
                       >
6686 :                 >skip2917
                       >
                        
6686 : bd0332                   lda abst,x
6689 : ca                       dex
668a : 3008                     bmi tdec17
668c : e001                     cpx #1
668e : d0d5                     bne tdec16
6690 : a981                     lda #$81
6692 : d0d1                     bne tdec16
6694 :                  tdec17
                                next_test
6694 : ad0032          >            lda test_case   ;previous test
6697 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6699 : f003            >        beq skip2920
                       >        trap            ;failed not equal (non zero)
669b : 20df73          >        jsr report_error
                       >
669e :                 >skip2920
                       >
0026 =                 >test_num = test_num + 1
669e : a926            >            lda #test_num   ;*** next tests' number
66a0 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
66a3 : a203                     ldx #3          ;immediate
66a5 : b562             tand    lda zpAN,x
66a7 : 8d0932                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
66aa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
66ac : 48              >            pha         ;use stack to load status
66ad : bd5a32          >            lda absANa,x    ;precharge accu
66b0 : 28              >            plp
                        
66b1 : 200832                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
66b4 : 08              >            php         ;save flags
66b5 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
66b8 : f003            >        beq skip2925
                       >        trap            ;failed not equal (non zero)
66ba : 20df73          >        jsr report_error
                       >
66bd :                 >skip2925
                       >
66bd : 68              >            pla         ;load status
                       >            eor_flag 0
66be : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
66c0 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
66c3 : f003            >        beq skip2928
                       >        trap            ;failed not equal (non zero)
66c5 : 20df73          >        jsr report_error
                       >
66c8 :                 >skip2928
                       >
                        
66c8 : ca                       dex
66c9 : 10da                     bpl tand
66cb : a203                     ldx #3
66cd : b562             tand1   lda zpAN,x
66cf : 8d0932                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
66d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
66d4 : 48              >            pha         ;use stack to load status
66d5 : bd5a32          >            lda absANa,x    ;precharge accu
66d8 : 28              >            plp
                        
66d9 : 200832                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
66dc : 08              >            php         ;save flags
66dd : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
66e0 : f003            >        beq skip2933
                       >        trap            ;failed not equal (non zero)
66e2 : 20df73          >        jsr report_error
                       >
66e5 :                 >skip2933
                       >
66e5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
66e6 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
66e8 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
66eb : f003            >        beq skip2936
                       >        trap            ;failed not equal (non zero)
66ed : 20df73          >        jsr report_error
                       >
66f0 :                 >skip2936
                       >
                        
66f0 : ca                       dex
66f1 : 10da                     bpl tand1
                            
66f3 : a203                     ldx #3      ;zp
66f5 : b562             tand2   lda zpAN,x
66f7 : 8552                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
66f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
66fb : 48              >            pha         ;use stack to load status
66fc : bd5a32          >            lda absANa,x    ;precharge accu
66ff : 28              >            plp
                        
6700 : 2552                     and zpt
                                tst_ax  absrlo,absflo,0
6702 : 08              >            php         ;save flags
6703 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6706 : f003            >        beq skip2941
                       >        trap            ;failed not equal (non zero)
6708 : 20df73          >        jsr report_error
                       >
670b :                 >skip2941
                       >
670b : 68              >            pla         ;load status
                       >            eor_flag 0
670c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
670e : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6711 : f003            >        beq skip2944
                       >        trap            ;failed not equal (non zero)
6713 : 20df73          >        jsr report_error
                       >
6716 :                 >skip2944
                       >
                        
6716 : ca                       dex
6717 : 10dc                     bpl tand2
6719 : a203                     ldx #3
671b : b562             tand3   lda zpAN,x
671d : 8552                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
671f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6721 : 48              >            pha         ;use stack to load status
6722 : bd5a32          >            lda absANa,x    ;precharge accu
6725 : 28              >            plp
                        
6726 : 2552                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6728 : 08              >            php         ;save flags
6729 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
672c : f003            >        beq skip2949
                       >        trap            ;failed not equal (non zero)
672e : 20df73          >        jsr report_error
                       >
6731 :                 >skip2949
                       >
6731 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6732 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6734 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6737 : f003            >        beq skip2952
                       >        trap            ;failed not equal (non zero)
6739 : 20df73          >        jsr report_error
                       >
673c :                 >skip2952
                       >
                        
673c : ca                       dex
673d : 10dc                     bpl tand3
                        
673f : a203                     ldx #3      ;abs
6741 : b562             tand4   lda zpAN,x
6743 : 8d0332                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
6746 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6748 : 48              >            pha         ;use stack to load status
6749 : bd5a32          >            lda absANa,x    ;precharge accu
674c : 28              >            plp
                        
674d : 2d0332                   and abst
                                tst_ax  absrlo,absflo,0
6750 : 08              >            php         ;save flags
6751 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6754 : f003            >        beq skip2957
                       >        trap            ;failed not equal (non zero)
6756 : 20df73          >        jsr report_error
                       >
6759 :                 >skip2957
                       >
6759 : 68              >            pla         ;load status
                       >            eor_flag 0
675a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
675c : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
675f : f003            >        beq skip2960
                       >        trap            ;failed not equal (non zero)
6761 : 20df73          >        jsr report_error
                       >
6764 :                 >skip2960
                       >
                        
6764 : ca                       dex
6765 : 10da                     bpl tand4
6767 : a203                     ldx #3
6769 : b562             tand5   lda zpAN,x
676b : 8d0332                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
676e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6770 : 48              >            pha         ;use stack to load status
6771 : bd5a32          >            lda absANa,x    ;precharge accu
6774 : 28              >            plp
                        
6775 : 2d0332                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
6778 : 08              >            php         ;save flags
6779 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
677c : f003            >        beq skip2965
                       >        trap            ;failed not equal (non zero)
677e : 20df73          >        jsr report_error
                       >
6781 :                 >skip2965
                       >
6781 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6782 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6784 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6787 : f003            >        beq skip2968
                       >        trap            ;failed not equal (non zero)
6789 : 20df73          >        jsr report_error
                       >
678c :                 >skip2968
                       >
                        
678c : ca                       dex
678d : 1002                     bpl tand6
                        
678f : a203                     ldx #3      ;zp,x
6791 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
6791 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6793 : 48              >            pha         ;use stack to load status
6794 : bd5a32          >            lda absANa,x    ;precharge accu
6797 : 28              >            plp
                        
6798 : 3562                     and zpAN,x
                                tst_ax  absrlo,absflo,0
679a : 08              >            php         ;save flags
679b : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
679e : f003            >        beq skip2973
                       >        trap            ;failed not equal (non zero)
67a0 : 20df73          >        jsr report_error
                       >
67a3 :                 >skip2973
                       >
67a3 : 68              >            pla         ;load status
                       >            eor_flag 0
67a4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
67a6 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
67a9 : f003            >        beq skip2976
                       >        trap            ;failed not equal (non zero)
67ab : 20df73          >        jsr report_error
                       >
67ae :                 >skip2976
                       >
                        
67ae : ca                       dex
67af : 10e0                     bpl tand6
67b1 : a203                     ldx #3
67b3 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
67b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67b5 : 48              >            pha         ;use stack to load status
67b6 : bd5a32          >            lda absANa,x    ;precharge accu
67b9 : 28              >            plp
                        
67ba : 3562                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
67bc : 08              >            php         ;save flags
67bd : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
67c0 : f003            >        beq skip2981
                       >        trap            ;failed not equal (non zero)
67c2 : 20df73          >        jsr report_error
                       >
67c5 :                 >skip2981
                       >
67c5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
67c6 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
67c8 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
67cb : f003            >        beq skip2984
                       >        trap            ;failed not equal (non zero)
67cd : 20df73          >        jsr report_error
                       >
67d0 :                 >skip2984
                       >
                        
67d0 : ca                       dex
67d1 : 10e0                     bpl tand7
                        
67d3 : a203                     ldx #3      ;abs,x
67d5 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
67d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
67d7 : 48              >            pha         ;use stack to load status
67d8 : bd5a32          >            lda absANa,x    ;precharge accu
67db : 28              >            plp
                        
67dc : 3d4e32                   and absAN,x
                                tst_ax  absrlo,absflo,0
67df : 08              >            php         ;save flags
67e0 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
67e3 : f003            >        beq skip2989
                       >        trap            ;failed not equal (non zero)
67e5 : 20df73          >        jsr report_error
                       >
67e8 :                 >skip2989
                       >
67e8 : 68              >            pla         ;load status
                       >            eor_flag 0
67e9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
67eb : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
67ee : f003            >        beq skip2992
                       >        trap            ;failed not equal (non zero)
67f0 : 20df73          >        jsr report_error
                       >
67f3 :                 >skip2992
                       >
                        
67f3 : ca                       dex
67f4 : 10df                     bpl tand8
67f6 : a203                     ldx #3
67f8 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
67f8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67fa : 48              >            pha         ;use stack to load status
67fb : bd5a32          >            lda absANa,x    ;precharge accu
67fe : 28              >            plp
                        
67ff : 3d4e32                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
6802 : 08              >            php         ;save flags
6803 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6806 : f003            >        beq skip2997
                       >        trap            ;failed not equal (non zero)
6808 : 20df73          >        jsr report_error
                       >
680b :                 >skip2997
                       >
680b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
680c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
680e : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6811 : f003            >        beq skip3000
                       >        trap            ;failed not equal (non zero)
6813 : 20df73          >        jsr report_error
                       >
6816 :                 >skip3000
                       >
                        
6816 : ca                       dex
6817 : 10df                     bpl tand9
                        
6819 : a003                     ldy #3      ;abs,y
681b :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
681b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
681d : 48              >            pha         ;use stack to load status
681e : b95a32          >            lda absANa,y    ;precharge accu
6821 : 28              >            plp
                        
6822 : 394e32                   and absAN,y
                                tst_ay  absrlo,absflo,0
6825 : 08              >            php         ;save flags
6826 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6829 : f003            >        beq skip3005
                       >        trap            ;failed not equal (non zero)
682b : 20df73          >        jsr report_error
                       >
682e :                 >skip3005
                       >
682e : 68              >            pla         ;load status
                       >            eor_flag 0
682f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6831 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6834 : f003            >        beq skip3008
                       >        trap            ;failed not equal (non zero)
6836 : 20df73          >        jsr report_error
                       >
6839 :                 >skip3008
                       >
                        
6839 : 88                       dey
683a : 10df                     bpl tand10
683c : a003                     ldy #3
683e :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
683e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6840 : 48              >            pha         ;use stack to load status
6841 : b95a32          >            lda absANa,y    ;precharge accu
6844 : 28              >            plp
                        
6845 : 394e32                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
6848 : 08              >            php         ;save flags
6849 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
684c : f003            >        beq skip3013
                       >        trap            ;failed not equal (non zero)
684e : 20df73          >        jsr report_error
                       >
6851 :                 >skip3013
                       >
6851 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6852 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6854 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6857 : f003            >        beq skip3016
                       >        trap            ;failed not equal (non zero)
6859 : 20df73          >        jsr report_error
                       >
685c :                 >skip3016
                       >
                        
685c : 88                       dey
685d : 10df                     bpl tand11
                        
685f : a206                     ldx #6      ;(zp,x)
6861 : a003                     ldy #3
6863 :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
6863 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6865 : 48              >            pha         ;use stack to load status
6866 : b95a32          >            lda absANa,y    ;precharge accu
6869 : 28              >            plp
                        
686a : 2180                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
686c : 08              >            php         ;save flags
686d : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6870 : f003            >        beq skip3021
                       >        trap            ;failed not equal (non zero)
6872 : 20df73          >        jsr report_error
                       >
6875 :                 >skip3021
                       >
6875 : 68              >            pla         ;load status
                       >            eor_flag 0
6876 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6878 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
687b : f003            >        beq skip3024
                       >        trap            ;failed not equal (non zero)
687d : 20df73          >        jsr report_error
                       >
6880 :                 >skip3024
                       >
                        
6880 : ca                       dex
6881 : ca                       dex
6882 : 88                       dey
6883 : 10de                     bpl tand12
6885 : a206                     ldx #6
6887 : a003                     ldy #3
6889 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
6889 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
688b : 48              >            pha         ;use stack to load status
688c : b95a32          >            lda absANa,y    ;precharge accu
688f : 28              >            plp
                        
6890 : 2180                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6892 : 08              >            php         ;save flags
6893 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6896 : f003            >        beq skip3029
                       >        trap            ;failed not equal (non zero)
6898 : 20df73          >        jsr report_error
                       >
689b :                 >skip3029
                       >
689b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
689c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
689e : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
68a1 : f003            >        beq skip3032
                       >        trap            ;failed not equal (non zero)
68a3 : 20df73          >        jsr report_error
                       >
68a6 :                 >skip3032
                       >
                        
68a6 : ca                       dex
68a7 : ca                       dex
68a8 : 88                       dey
68a9 : 10de                     bpl tand13
                        
68ab : a003                     ldy #3      ;(zp),y
68ad :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
68ad : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
68af : 48              >            pha         ;use stack to load status
68b0 : b95a32          >            lda absANa,y    ;precharge accu
68b3 : 28              >            plp
                        
68b4 : 3180                     and (indAN),y
                                tst_ay  absrlo,absflo,0
68b6 : 08              >            php         ;save flags
68b7 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
68ba : f003            >        beq skip3037
                       >        trap            ;failed not equal (non zero)
68bc : 20df73          >        jsr report_error
                       >
68bf :                 >skip3037
                       >
68bf : 68              >            pla         ;load status
                       >            eor_flag 0
68c0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
68c2 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
68c5 : f003            >        beq skip3040
                       >        trap            ;failed not equal (non zero)
68c7 : 20df73          >        jsr report_error
                       >
68ca :                 >skip3040
                       >
                        
68ca : 88                       dey
68cb : 10e0                     bpl tand14
68cd : a003                     ldy #3
68cf :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
68cf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
68d1 : 48              >            pha         ;use stack to load status
68d2 : b95a32          >            lda absANa,y    ;precharge accu
68d5 : 28              >            plp
                        
68d6 : 3180                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
68d8 : 08              >            php         ;save flags
68d9 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
68dc : f003            >        beq skip3045
                       >        trap            ;failed not equal (non zero)
68de : 20df73          >        jsr report_error
                       >
68e1 :                 >skip3045
                       >
68e1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
68e2 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
68e4 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
68e7 : f003            >        beq skip3048
                       >        trap            ;failed not equal (non zero)
68e9 : 20df73          >        jsr report_error
                       >
68ec :                 >skip3048
                       >
                        
68ec : 88                       dey
68ed : 10e0                     bpl tand15
                                next_test
68ef : ad0032          >            lda test_case   ;previous test
68f2 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
68f4 : f003            >        beq skip3051
                       >        trap            ;failed not equal (non zero)
68f6 : 20df73          >        jsr report_error
                       >
68f9 :                 >skip3051
                       >
0027 =                 >test_num = test_num + 1
68f9 : a927            >            lda #test_num   ;*** next tests' number
68fb : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
68fe : a203                     ldx #3          ;immediate - self modifying code
6900 : b566             teor    lda zpEO,x
6902 : 8d0c32                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
6905 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6907 : 48              >            pha         ;use stack to load status
6908 : bd5e32          >            lda absEOa,x    ;precharge accu
690b : 28              >            plp
                        
690c : 200b32                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
690f : 08              >            php         ;save flags
6910 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6913 : f003            >        beq skip3056
                       >        trap            ;failed not equal (non zero)
6915 : 20df73          >        jsr report_error
                       >
6918 :                 >skip3056
                       >
6918 : 68              >            pla         ;load status
                       >            eor_flag 0
6919 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
691b : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
691e : f003            >        beq skip3059
                       >        trap            ;failed not equal (non zero)
6920 : 20df73          >        jsr report_error
                       >
6923 :                 >skip3059
                       >
                        
6923 : ca                       dex
6924 : 10da                     bpl teor
6926 : a203                     ldx #3
6928 : b566             teor1   lda zpEO,x
692a : 8d0c32                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
692d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
692f : 48              >            pha         ;use stack to load status
6930 : bd5e32          >            lda absEOa,x    ;precharge accu
6933 : 28              >            plp
                        
6934 : 200b32                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6937 : 08              >            php         ;save flags
6938 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
693b : f003            >        beq skip3064
                       >        trap            ;failed not equal (non zero)
693d : 20df73          >        jsr report_error
                       >
6940 :                 >skip3064
                       >
6940 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6941 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6943 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6946 : f003            >        beq skip3067
                       >        trap            ;failed not equal (non zero)
6948 : 20df73          >        jsr report_error
                       >
694b :                 >skip3067
                       >
                        
694b : ca                       dex
694c : 10da                     bpl teor1
                            
694e : a203                     ldx #3      ;zp
6950 : b566             teor2    lda zpEO,x
6952 : 8552                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
6954 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6956 : 48              >            pha         ;use stack to load status
6957 : bd5e32          >            lda absEOa,x    ;precharge accu
695a : 28              >            plp
                        
695b : 4552                     eor zpt
                                tst_ax  absrlo,absflo,0
695d : 08              >            php         ;save flags
695e : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6961 : f003            >        beq skip3072
                       >        trap            ;failed not equal (non zero)
6963 : 20df73          >        jsr report_error
                       >
6966 :                 >skip3072
                       >
6966 : 68              >            pla         ;load status
                       >            eor_flag 0
6967 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6969 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
696c : f003            >        beq skip3075
                       >        trap            ;failed not equal (non zero)
696e : 20df73          >        jsr report_error
                       >
6971 :                 >skip3075
                       >
                        
6971 : ca                       dex
6972 : 10dc                     bpl teor2
6974 : a203                     ldx #3
6976 : b566             teor3   lda zpEO,x
6978 : 8552                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
697a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
697c : 48              >            pha         ;use stack to load status
697d : bd5e32          >            lda absEOa,x    ;precharge accu
6980 : 28              >            plp
                        
6981 : 4552                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6983 : 08              >            php         ;save flags
6984 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6987 : f003            >        beq skip3080
                       >        trap            ;failed not equal (non zero)
6989 : 20df73          >        jsr report_error
                       >
698c :                 >skip3080
                       >
698c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
698d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
698f : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6992 : f003            >        beq skip3083
                       >        trap            ;failed not equal (non zero)
6994 : 20df73          >        jsr report_error
                       >
6997 :                 >skip3083
                       >
                        
6997 : ca                       dex
6998 : 10dc                     bpl teor3
                        
699a : a203                     ldx #3      ;abs
699c : b566             teor4   lda zpEO,x
699e : 8d0332                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
69a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
69a3 : 48              >            pha         ;use stack to load status
69a4 : bd5e32          >            lda absEOa,x    ;precharge accu
69a7 : 28              >            plp
                        
69a8 : 4d0332                   eor abst
                                tst_ax  absrlo,absflo,0
69ab : 08              >            php         ;save flags
69ac : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
69af : f003            >        beq skip3088
                       >        trap            ;failed not equal (non zero)
69b1 : 20df73          >        jsr report_error
                       >
69b4 :                 >skip3088
                       >
69b4 : 68              >            pla         ;load status
                       >            eor_flag 0
69b5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
69b7 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
69ba : f003            >        beq skip3091
                       >        trap            ;failed not equal (non zero)
69bc : 20df73          >        jsr report_error
                       >
69bf :                 >skip3091
                       >
                        
69bf : ca                       dex
69c0 : 10da                     bpl teor4
69c2 : a203                     ldx #3
69c4 : b566             teor5   lda zpEO,x
69c6 : 8d0332                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
69c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
69cb : 48              >            pha         ;use stack to load status
69cc : bd5e32          >            lda absEOa,x    ;precharge accu
69cf : 28              >            plp
                        
69d0 : 4d0332                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
69d3 : 08              >            php         ;save flags
69d4 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
69d7 : f003            >        beq skip3096
                       >        trap            ;failed not equal (non zero)
69d9 : 20df73          >        jsr report_error
                       >
69dc :                 >skip3096
                       >
69dc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
69dd : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
69df : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
69e2 : f003            >        beq skip3099
                       >        trap            ;failed not equal (non zero)
69e4 : 20df73          >        jsr report_error
                       >
69e7 :                 >skip3099
                       >
                        
69e7 : ca                       dex
69e8 : 1002                     bpl teor6
                        
69ea : a203                     ldx #3      ;zp,x
69ec :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
69ec : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
69ee : 48              >            pha         ;use stack to load status
69ef : bd5e32          >            lda absEOa,x    ;precharge accu
69f2 : 28              >            plp
                        
69f3 : 5566                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
69f5 : 08              >            php         ;save flags
69f6 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
69f9 : f003            >        beq skip3104
                       >        trap            ;failed not equal (non zero)
69fb : 20df73          >        jsr report_error
                       >
69fe :                 >skip3104
                       >
69fe : 68              >            pla         ;load status
                       >            eor_flag 0
69ff : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a01 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a04 : f003            >        beq skip3107
                       >        trap            ;failed not equal (non zero)
6a06 : 20df73          >        jsr report_error
                       >
6a09 :                 >skip3107
                       >
                        
6a09 : ca                       dex
6a0a : 10e0                     bpl teor6
6a0c : a203                     ldx #3
6a0e :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6a0e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a10 : 48              >            pha         ;use stack to load status
6a11 : bd5e32          >            lda absEOa,x    ;precharge accu
6a14 : 28              >            plp
                        
6a15 : 5566                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6a17 : 08              >            php         ;save flags
6a18 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6a1b : f003            >        beq skip3112
                       >        trap            ;failed not equal (non zero)
6a1d : 20df73          >        jsr report_error
                       >
6a20 :                 >skip3112
                       >
6a20 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a21 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6a23 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a26 : f003            >        beq skip3115
                       >        trap            ;failed not equal (non zero)
6a28 : 20df73          >        jsr report_error
                       >
6a2b :                 >skip3115
                       >
                        
6a2b : ca                       dex
6a2c : 10e0                     bpl teor7
                        
6a2e : a203                     ldx #3      ;abs,x
6a30 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
6a30 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6a32 : 48              >            pha         ;use stack to load status
6a33 : bd5e32          >            lda absEOa,x    ;precharge accu
6a36 : 28              >            plp
                        
6a37 : 5d5232                   eor absEO,x
                                tst_ax  absrlo,absflo,0
6a3a : 08              >            php         ;save flags
6a3b : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6a3e : f003            >        beq skip3120
                       >        trap            ;failed not equal (non zero)
6a40 : 20df73          >        jsr report_error
                       >
6a43 :                 >skip3120
                       >
6a43 : 68              >            pla         ;load status
                       >            eor_flag 0
6a44 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a46 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a49 : f003            >        beq skip3123
                       >        trap            ;failed not equal (non zero)
6a4b : 20df73          >        jsr report_error
                       >
6a4e :                 >skip3123
                       >
                        
6a4e : ca                       dex
6a4f : 10df                     bpl teor8
6a51 : a203                     ldx #3
6a53 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
6a53 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a55 : 48              >            pha         ;use stack to load status
6a56 : bd5e32          >            lda absEOa,x    ;precharge accu
6a59 : 28              >            plp
                        
6a5a : 5d5232                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
6a5d : 08              >            php         ;save flags
6a5e : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6a61 : f003            >        beq skip3128
                       >        trap            ;failed not equal (non zero)
6a63 : 20df73          >        jsr report_error
                       >
6a66 :                 >skip3128
                       >
6a66 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6a67 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6a69 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6a6c : f003            >        beq skip3131
                       >        trap            ;failed not equal (non zero)
6a6e : 20df73          >        jsr report_error
                       >
6a71 :                 >skip3131
                       >
                        
6a71 : ca                       dex
6a72 : 10df                     bpl teor9
                        
6a74 : a003                     ldy #3      ;abs,y
6a76 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
6a76 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6a78 : 48              >            pha         ;use stack to load status
6a79 : b95e32          >            lda absEOa,y    ;precharge accu
6a7c : 28              >            plp
                        
6a7d : 595232                   eor absEO,y
                                tst_ay  absrlo,absflo,0
6a80 : 08              >            php         ;save flags
6a81 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6a84 : f003            >        beq skip3136
                       >        trap            ;failed not equal (non zero)
6a86 : 20df73          >        jsr report_error
                       >
6a89 :                 >skip3136
                       >
6a89 : 68              >            pla         ;load status
                       >            eor_flag 0
6a8a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6a8c : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6a8f : f003            >        beq skip3139
                       >        trap            ;failed not equal (non zero)
6a91 : 20df73          >        jsr report_error
                       >
6a94 :                 >skip3139
                       >
                        
6a94 : 88                       dey
6a95 : 10df                     bpl teor10
6a97 : a003                     ldy #3
6a99 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6a99 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6a9b : 48              >            pha         ;use stack to load status
6a9c : b95e32          >            lda absEOa,y    ;precharge accu
6a9f : 28              >            plp
                        
6aa0 : 595232                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
6aa3 : 08              >            php         ;save flags
6aa4 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6aa7 : f003            >        beq skip3144
                       >        trap            ;failed not equal (non zero)
6aa9 : 20df73          >        jsr report_error
                       >
6aac :                 >skip3144
                       >
6aac : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6aad : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6aaf : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6ab2 : f003            >        beq skip3147
                       >        trap            ;failed not equal (non zero)
6ab4 : 20df73          >        jsr report_error
                       >
6ab7 :                 >skip3147
                       >
                        
6ab7 : 88                       dey
6ab8 : 10df                     bpl teor11
                        
6aba : a206                     ldx #6      ;(zp,x)
6abc : a003                     ldy #3
6abe :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
6abe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6ac0 : 48              >            pha         ;use stack to load status
6ac1 : b95e32          >            lda absEOa,y    ;precharge accu
6ac4 : 28              >            plp
                        
6ac5 : 4188                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
6ac7 : 08              >            php         ;save flags
6ac8 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6acb : f003            >        beq skip3152
                       >        trap            ;failed not equal (non zero)
6acd : 20df73          >        jsr report_error
                       >
6ad0 :                 >skip3152
                       >
6ad0 : 68              >            pla         ;load status
                       >            eor_flag 0
6ad1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6ad3 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6ad6 : f003            >        beq skip3155
                       >        trap            ;failed not equal (non zero)
6ad8 : 20df73          >        jsr report_error
                       >
6adb :                 >skip3155
                       >
                        
6adb : ca                       dex
6adc : ca                       dex
6add : 88                       dey
6ade : 10de                     bpl teor12
6ae0 : a206                     ldx #6
6ae2 : a003                     ldy #3
6ae4 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6ae4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6ae6 : 48              >            pha         ;use stack to load status
6ae7 : b95e32          >            lda absEOa,y    ;precharge accu
6aea : 28              >            plp
                        
6aeb : 4188                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6aed : 08              >            php         ;save flags
6aee : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6af1 : f003            >        beq skip3160
                       >        trap            ;failed not equal (non zero)
6af3 : 20df73          >        jsr report_error
                       >
6af6 :                 >skip3160
                       >
6af6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6af7 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6af9 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6afc : f003            >        beq skip3163
                       >        trap            ;failed not equal (non zero)
6afe : 20df73          >        jsr report_error
                       >
6b01 :                 >skip3163
                       >
                        
6b01 : ca                       dex
6b02 : ca                       dex
6b03 : 88                       dey
6b04 : 10de                     bpl teor13
                        
6b06 : a003                     ldy #3      ;(zp),y
6b08 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
6b08 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b0a : 48              >            pha         ;use stack to load status
6b0b : b95e32          >            lda absEOa,y    ;precharge accu
6b0e : 28              >            plp
                        
6b0f : 5188                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
6b11 : 08              >            php         ;save flags
6b12 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6b15 : f003            >        beq skip3168
                       >        trap            ;failed not equal (non zero)
6b17 : 20df73          >        jsr report_error
                       >
6b1a :                 >skip3168
                       >
6b1a : 68              >            pla         ;load status
                       >            eor_flag 0
6b1b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6b1d : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6b20 : f003            >        beq skip3171
                       >        trap            ;failed not equal (non zero)
6b22 : 20df73          >        jsr report_error
                       >
6b25 :                 >skip3171
                       >
                        
6b25 : 88                       dey
6b26 : 10e0                     bpl teor14
6b28 : a003                     ldy #3
6b2a :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
6b2a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b2c : 48              >            pha         ;use stack to load status
6b2d : b95e32          >            lda absEOa,y    ;precharge accu
6b30 : 28              >            plp
                        
6b31 : 5188                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
6b33 : 08              >            php         ;save flags
6b34 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6b37 : f003            >        beq skip3176
                       >        trap            ;failed not equal (non zero)
6b39 : 20df73          >        jsr report_error
                       >
6b3c :                 >skip3176
                       >
6b3c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b3d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6b3f : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6b42 : f003            >        beq skip3179
                       >        trap            ;failed not equal (non zero)
6b44 : 20df73          >        jsr report_error
                       >
6b47 :                 >skip3179
                       >
                        
6b47 : 88                       dey
6b48 : 10e0                     bpl teor15
                                next_test
6b4a : ad0032          >            lda test_case   ;previous test
6b4d : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6b4f : f003            >        beq skip3182
                       >        trap            ;failed not equal (non zero)
6b51 : 20df73          >        jsr report_error
                       >
6b54 :                 >skip3182
                       >
0028 =                 >test_num = test_num + 1
6b54 : a928            >            lda #test_num   ;*** next tests' number
6b56 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
6b59 : a203                     ldx #3          ;immediate - self modifying code
6b5b : b55e             tora    lda zpOR,x
6b5d : 8d0f32                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
6b60 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6b62 : 48              >            pha         ;use stack to load status
6b63 : bd5632          >            lda absORa,x    ;precharge accu
6b66 : 28              >            plp
                        
6b67 : 200e32                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
6b6a : 08              >            php         ;save flags
6b6b : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b6e : f003            >        beq skip3187
                       >        trap            ;failed not equal (non zero)
6b70 : 20df73          >        jsr report_error
                       >
6b73 :                 >skip3187
                       >
6b73 : 68              >            pla         ;load status
                       >            eor_flag 0
6b74 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6b76 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6b79 : f003            >        beq skip3190
                       >        trap            ;failed not equal (non zero)
6b7b : 20df73          >        jsr report_error
                       >
6b7e :                 >skip3190
                       >
                        
6b7e : ca                       dex
6b7f : 10da                     bpl tora
6b81 : a203                     ldx #3
6b83 : b55e             tora1   lda zpOR,x
6b85 : 8d0f32                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
6b88 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6b8a : 48              >            pha         ;use stack to load status
6b8b : bd5632          >            lda absORa,x    ;precharge accu
6b8e : 28              >            plp
                        
6b8f : 200e32                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
6b92 : 08              >            php         ;save flags
6b93 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6b96 : f003            >        beq skip3195
                       >        trap            ;failed not equal (non zero)
6b98 : 20df73          >        jsr report_error
                       >
6b9b :                 >skip3195
                       >
6b9b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6b9c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6b9e : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6ba1 : f003            >        beq skip3198
                       >        trap            ;failed not equal (non zero)
6ba3 : 20df73          >        jsr report_error
                       >
6ba6 :                 >skip3198
                       >
                        
6ba6 : ca                       dex
6ba7 : 10da                     bpl tora1
                            
6ba9 : a203                     ldx #3      ;zp
6bab : b55e             tora2   lda zpOR,x
6bad : 8552                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
6baf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6bb1 : 48              >            pha         ;use stack to load status
6bb2 : bd5632          >            lda absORa,x    ;precharge accu
6bb5 : 28              >            plp
                        
6bb6 : 0552                     ora zpt
                                tst_ax  absrlo,absflo,0
6bb8 : 08              >            php         ;save flags
6bb9 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6bbc : f003            >        beq skip3203
                       >        trap            ;failed not equal (non zero)
6bbe : 20df73          >        jsr report_error
                       >
6bc1 :                 >skip3203
                       >
6bc1 : 68              >            pla         ;load status
                       >            eor_flag 0
6bc2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6bc4 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6bc7 : f003            >        beq skip3206
                       >        trap            ;failed not equal (non zero)
6bc9 : 20df73          >        jsr report_error
                       >
6bcc :                 >skip3206
                       >
                        
6bcc : ca                       dex
6bcd : 10dc                     bpl tora2
6bcf : a203                     ldx #3
6bd1 : b55e             tora3   lda zpOR,x
6bd3 : 8552                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
6bd5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6bd7 : 48              >            pha         ;use stack to load status
6bd8 : bd5632          >            lda absORa,x    ;precharge accu
6bdb : 28              >            plp
                        
6bdc : 0552                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
6bde : 08              >            php         ;save flags
6bdf : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6be2 : f003            >        beq skip3211
                       >        trap            ;failed not equal (non zero)
6be4 : 20df73          >        jsr report_error
                       >
6be7 :                 >skip3211
                       >
6be7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6be8 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6bea : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6bed : f003            >        beq skip3214
                       >        trap            ;failed not equal (non zero)
6bef : 20df73          >        jsr report_error
                       >
6bf2 :                 >skip3214
                       >
                        
6bf2 : ca                       dex
6bf3 : 10dc                     bpl tora3
                        
6bf5 : a203                     ldx #3      ;abs
6bf7 : b55e             tora4   lda zpOR,x
6bf9 : 8d0332                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
6bfc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6bfe : 48              >            pha         ;use stack to load status
6bff : bd5632          >            lda absORa,x    ;precharge accu
6c02 : 28              >            plp
                        
6c03 : 0d0332                   ora abst
                                tst_ax  absrlo,absflo,0
6c06 : 08              >            php         ;save flags
6c07 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c0a : f003            >        beq skip3219
                       >        trap            ;failed not equal (non zero)
6c0c : 20df73          >        jsr report_error
                       >
6c0f :                 >skip3219
                       >
6c0f : 68              >            pla         ;load status
                       >            eor_flag 0
6c10 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6c12 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c15 : f003            >        beq skip3222
                       >        trap            ;failed not equal (non zero)
6c17 : 20df73          >        jsr report_error
                       >
6c1a :                 >skip3222
                       >
                        
6c1a : ca                       dex
6c1b : 10da                     bpl tora4
6c1d : a203                     ldx #3
6c1f : b55e             tora5   lda zpOR,x
6c21 : 8d0332                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
6c24 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c26 : 48              >            pha         ;use stack to load status
6c27 : bd5632          >            lda absORa,x    ;precharge accu
6c2a : 28              >            plp
                        
6c2b : 0d0332                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
6c2e : 08              >            php         ;save flags
6c2f : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c32 : f003            >        beq skip3227
                       >        trap            ;failed not equal (non zero)
6c34 : 20df73          >        jsr report_error
                       >
6c37 :                 >skip3227
                       >
6c37 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c38 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6c3a : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c3d : f003            >        beq skip3230
                       >        trap            ;failed not equal (non zero)
6c3f : 20df73          >        jsr report_error
                       >
6c42 :                 >skip3230
                       >
                        
6c42 : ca                       dex
6c43 : 1002                     bpl tora6
                        
6c45 : a203                     ldx #3      ;zp,x
6c47 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
6c47 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c49 : 48              >            pha         ;use stack to load status
6c4a : bd5632          >            lda absORa,x    ;precharge accu
6c4d : 28              >            plp
                        
6c4e : 155e                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
6c50 : 08              >            php         ;save flags
6c51 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c54 : f003            >        beq skip3235
                       >        trap            ;failed not equal (non zero)
6c56 : 20df73          >        jsr report_error
                       >
6c59 :                 >skip3235
                       >
6c59 : 68              >            pla         ;load status
                       >            eor_flag 0
6c5a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6c5c : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c5f : f003            >        beq skip3238
                       >        trap            ;failed not equal (non zero)
6c61 : 20df73          >        jsr report_error
                       >
6c64 :                 >skip3238
                       >
                        
6c64 : ca                       dex
6c65 : 10e0                     bpl tora6
6c67 : a203                     ldx #3
6c69 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
6c69 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6c6b : 48              >            pha         ;use stack to load status
6c6c : bd5632          >            lda absORa,x    ;precharge accu
6c6f : 28              >            plp
                        
6c70 : 155e                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
6c72 : 08              >            php         ;save flags
6c73 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c76 : f003            >        beq skip3243
                       >        trap            ;failed not equal (non zero)
6c78 : 20df73          >        jsr report_error
                       >
6c7b :                 >skip3243
                       >
6c7b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6c7c : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6c7e : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6c81 : f003            >        beq skip3246
                       >        trap            ;failed not equal (non zero)
6c83 : 20df73          >        jsr report_error
                       >
6c86 :                 >skip3246
                       >
                        
6c86 : ca                       dex
6c87 : 10e0                     bpl tora7
                        
6c89 : a203                     ldx #3      ;abs,x
6c8b :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
6c8b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6c8d : 48              >            pha         ;use stack to load status
6c8e : bd5632          >            lda absORa,x    ;precharge accu
6c91 : 28              >            plp
                        
6c92 : 1d4a32                   ora absOR,x
                                tst_ax  absrlo,absflo,0
6c95 : 08              >            php         ;save flags
6c96 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6c99 : f003            >        beq skip3251
                       >        trap            ;failed not equal (non zero)
6c9b : 20df73          >        jsr report_error
                       >
6c9e :                 >skip3251
                       >
6c9e : 68              >            pla         ;load status
                       >            eor_flag 0
6c9f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6ca1 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6ca4 : f003            >        beq skip3254
                       >        trap            ;failed not equal (non zero)
6ca6 : 20df73          >        jsr report_error
                       >
6ca9 :                 >skip3254
                       >
                        
6ca9 : ca                       dex
6caa : 10df                     bpl tora8
6cac : a203                     ldx #3
6cae :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
6cae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6cb0 : 48              >            pha         ;use stack to load status
6cb1 : bd5632          >            lda absORa,x    ;precharge accu
6cb4 : 28              >            plp
                        
6cb5 : 1d4a32                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
6cb8 : 08              >            php         ;save flags
6cb9 : dd6232          >            cmp absrlo,x    ;test result
                       >            trap_ne
6cbc : f003            >        beq skip3259
                       >        trap            ;failed not equal (non zero)
6cbe : 20df73          >        jsr report_error
                       >
6cc1 :                 >skip3259
                       >
6cc1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6cc2 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6cc4 : dd6632          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
6cc7 : f003            >        beq skip3262
                       >        trap            ;failed not equal (non zero)
6cc9 : 20df73          >        jsr report_error
                       >
6ccc :                 >skip3262
                       >
                        
6ccc : ca                       dex
6ccd : 10df                     bpl tora9
                        
6ccf : a003                     ldy #3      ;abs,y
6cd1 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
6cd1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6cd3 : 48              >            pha         ;use stack to load status
6cd4 : b95632          >            lda absORa,y    ;precharge accu
6cd7 : 28              >            plp
                        
6cd8 : 194a32                   ora absOR,y
                                tst_ay  absrlo,absflo,0
6cdb : 08              >            php         ;save flags
6cdc : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6cdf : f003            >        beq skip3267
                       >        trap            ;failed not equal (non zero)
6ce1 : 20df73          >        jsr report_error
                       >
6ce4 :                 >skip3267
                       >
6ce4 : 68              >            pla         ;load status
                       >            eor_flag 0
6ce5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6ce7 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6cea : f003            >        beq skip3270
                       >        trap            ;failed not equal (non zero)
6cec : 20df73          >        jsr report_error
                       >
6cef :                 >skip3270
                       >
                        
6cef : 88                       dey
6cf0 : 10df                     bpl tora10
6cf2 : a003                     ldy #3
6cf4 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
6cf4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6cf6 : 48              >            pha         ;use stack to load status
6cf7 : b95632          >            lda absORa,y    ;precharge accu
6cfa : 28              >            plp
                        
6cfb : 194a32                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
6cfe : 08              >            php         ;save flags
6cff : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d02 : f003            >        beq skip3275
                       >        trap            ;failed not equal (non zero)
6d04 : 20df73          >        jsr report_error
                       >
6d07 :                 >skip3275
                       >
6d07 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d08 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6d0a : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d0d : f003            >        beq skip3278
                       >        trap            ;failed not equal (non zero)
6d0f : 20df73          >        jsr report_error
                       >
6d12 :                 >skip3278
                       >
                        
6d12 : 88                       dey
6d13 : 10df                     bpl tora11
                        
6d15 : a206                     ldx #6      ;(zp,x)
6d17 : a003                     ldy #3
6d19 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
6d19 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d1b : 48              >            pha         ;use stack to load status
6d1c : b95632          >            lda absORa,y    ;precharge accu
6d1f : 28              >            plp
                        
6d20 : 0190                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
6d22 : 08              >            php         ;save flags
6d23 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d26 : f003            >        beq skip3283
                       >        trap            ;failed not equal (non zero)
6d28 : 20df73          >        jsr report_error
                       >
6d2b :                 >skip3283
                       >
6d2b : 68              >            pla         ;load status
                       >            eor_flag 0
6d2c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6d2e : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d31 : f003            >        beq skip3286
                       >        trap            ;failed not equal (non zero)
6d33 : 20df73          >        jsr report_error
                       >
6d36 :                 >skip3286
                       >
                        
6d36 : ca                       dex
6d37 : ca                       dex
6d38 : 88                       dey
6d39 : 10de                     bpl tora12
6d3b : a206                     ldx #6
6d3d : a003                     ldy #3
6d3f :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
6d3f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d41 : 48              >            pha         ;use stack to load status
6d42 : b95632          >            lda absORa,y    ;precharge accu
6d45 : 28              >            plp
                        
6d46 : 0190                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
6d48 : 08              >            php         ;save flags
6d49 : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d4c : f003            >        beq skip3291
                       >        trap            ;failed not equal (non zero)
6d4e : 20df73          >        jsr report_error
                       >
6d51 :                 >skip3291
                       >
6d51 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d52 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6d54 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d57 : f003            >        beq skip3294
                       >        trap            ;failed not equal (non zero)
6d59 : 20df73          >        jsr report_error
                       >
6d5c :                 >skip3294
                       >
                        
6d5c : ca                       dex
6d5d : ca                       dex
6d5e : 88                       dey
6d5f : 10de                     bpl tora13
                        
6d61 : a003                     ldy #3      ;(zp),y
6d63 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
6d63 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
6d65 : 48              >            pha         ;use stack to load status
6d66 : b95632          >            lda absORa,y    ;precharge accu
6d69 : 28              >            plp
                        
6d6a : 1190                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
6d6c : 08              >            php         ;save flags
6d6d : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d70 : f003            >        beq skip3299
                       >        trap            ;failed not equal (non zero)
6d72 : 20df73          >        jsr report_error
                       >
6d75 :                 >skip3299
                       >
6d75 : 68              >            pla         ;load status
                       >            eor_flag 0
6d76 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
6d78 : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d7b : f003            >        beq skip3302
                       >        trap            ;failed not equal (non zero)
6d7d : 20df73          >        jsr report_error
                       >
6d80 :                 >skip3302
                       >
                        
6d80 : 88                       dey
6d81 : 10e0                     bpl tora14
6d83 : a003                     ldy #3
6d85 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
6d85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6d87 : 48              >            pha         ;use stack to load status
6d88 : b95632          >            lda absORa,y    ;precharge accu
6d8b : 28              >            plp
                        
6d8c : 1190                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
6d8e : 08              >            php         ;save flags
6d8f : d96232          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
6d92 : f003            >        beq skip3307
                       >        trap            ;failed not equal (non zero)
6d94 : 20df73          >        jsr report_error
                       >
6d97 :                 >skip3307
                       >
6d97 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
6d98 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
6d9a : d96632          >            cmp absflo,y    ;test flags
                       >            trap_ne
6d9d : f003            >        beq skip3310
                       >        trap            ;failed not equal (non zero)
6d9f : 20df73          >        jsr report_error
                       >
6da2 :                 >skip3310
                       >
                        
6da2 : 88                       dey
6da3 : 10e0                     bpl tora15
                            if I_flag = 3
6da5 : 58                       cli
                            endif                
                                next_test
6da6 : ad0032          >            lda test_case   ;previous test
6da9 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6dab : f003            >        beq skip3313
                       >        trap            ;failed not equal (non zero)
6dad : 20df73          >        jsr report_error
                       >
6db0 :                 >skip3313
                       >
0029 =                 >test_num = test_num + 1
6db0 : a929            >            lda #test_num   ;*** next tests' number
6db2 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
6db5 : d8                       cld
6db6 : a254                     ldx #ad2        ;for indexed test
6db8 : a0ff                     ldy #$ff        ;max range
6dba : a900                     lda #0          ;start with adding zeroes & no carry
6dbc : 8552                     sta adfc        ;carry in - for diag
6dbe : 8553                     sta ad1         ;operand 1 - accumulator
6dc0 : 8554                     sta ad2         ;operand 2 - memory or immediate
6dc2 : 8d0332                   sta ada2        ;non zp
6dc5 : 8555                     sta adrl        ;expected result bits 0-7
6dc7 : 8556                     sta adrh        ;expected result bit 8 (carry out)
6dc9 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
6dcb : 8558                     sta sb2
6dcd : 8d0432                   sta sba2        ;non zp
6dd0 : a902                     lda #2          ;expected Z-flag
6dd2 : 8557                     sta adrf
6dd4 : 18               tadd    clc             ;test with carry clear
6dd5 : 20ca70                   jsr chkadd
6dd8 : e652                     inc adfc        ;now with carry
6dda : e655                     inc adrl        ;result +1
6ddc : 08                       php             ;save N & Z from low result
6ddd : 08                       php
6dde : 68                       pla             ;accu holds expected flags
6ddf : 2982                     and #$82        ;mask N & Z
6de1 : 28                       plp
6de2 : d002                     bne tadd1
6de4 : e656                     inc adrh        ;result bit 8 - carry
6de6 : 0556             tadd1   ora adrh        ;merge C to expected flags
6de8 : 8557                     sta adrf        ;save expected flags except overflow
6dea : 38                       sec             ;test with carry set
6deb : 20ca70                   jsr chkadd
6dee : c652                     dec adfc        ;same for operand +1 but no carry
6df0 : e653                     inc ad1
6df2 : d0e0                     bne tadd        ;iterate op1
6df4 : a900                     lda #0          ;preset result to op2 when op1 = 0
6df6 : 8556                     sta adrh
6df8 : ee0332                   inc ada2
6dfb : e654                     inc ad2
6dfd : 08                       php             ;save NZ as operand 2 becomes the new result
6dfe : 68                       pla
6dff : 2982                     and #$82        ;mask N00000Z0
6e01 : 8557                     sta adrf        ;no need to check carry as we are adding to 0
6e03 : c658                     dec sb2         ;complement subtract operand 2
6e05 : ce0432                   dec sba2
6e08 : a554                     lda ad2         
6e0a : 8555                     sta adrl
6e0c : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
6e0e : ad0032          >            lda test_case   ;previous test
6e11 : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6e13 : f003            >        beq skip3316
                       >        trap            ;failed not equal (non zero)
6e15 : 20df73          >        jsr report_error
                       >
6e18 :                 >skip3316
                       >
002a =                 >test_num = test_num + 1
6e18 : a92a            >            lda #test_num   ;*** next tests' number
6e1a : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
6e1d : f8                       sed 
6e1e : a254                     ldx #ad2        ;for indexed test
6e20 : a0ff                     ldy #$ff        ;max range
6e22 : a999                     lda #$99        ;start with adding 99 to 99 with carry
6e24 : 8553                     sta ad1         ;operand 1 - accumulator
6e26 : 8554                     sta ad2         ;operand 2 - memory or immediate
6e28 : 8d0332                   sta ada2        ;non zp
6e2b : 8555                     sta adrl        ;expected result bits 0-7
6e2d : a901                     lda #1          ;set carry in & out
6e2f : 8552                     sta adfc        ;carry in - for diag
6e31 : 8556                     sta adrh        ;expected result bit 8 (carry out)
6e33 : a900                     lda #0          ;complemented operand 2 for subtract
6e35 : 8558                     sta sb2
6e37 : 8d0432                   sta sba2        ;non zp
6e3a : 38               tdad    sec             ;test with carry set
6e3b : 20376f                   jsr chkdad
6e3e : c652                     dec adfc        ;now with carry clear
6e40 : a555                     lda adrl        ;decimal adjust result
6e42 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
6e44 : c656                     dec adrh
6e46 : a999                     lda #$99
6e48 : 8555                     sta adrl
6e4a : d012                     bne tdad3
6e4c : 290f             tdad1   and #$f         ;lower nibble mask
6e4e : d00c                     bne tdad2       ;no decimal adjust needed
6e50 : c655                     dec adrl        ;decimal adjust (?0-6)
6e52 : c655                     dec adrl
6e54 : c655                     dec adrl
6e56 : c655                     dec adrl
6e58 : c655                     dec adrl
6e5a : c655                     dec adrl
6e5c : c655             tdad2   dec adrl        ;result -1
6e5e : 18               tdad3   clc             ;test with carry clear
6e5f : 20376f                   jsr chkdad
6e62 : e652                     inc adfc        ;same for operand -1 but with carry
6e64 : a553                     lda ad1         ;decimal adjust operand 1
6e66 : f015                     beq tdad5       ;iterate operand 2
6e68 : 290f                     and #$f         ;lower nibble mask
6e6a : d00c                     bne tdad4       ;skip decimal adjust
6e6c : c653                     dec ad1         ;decimal adjust (?0-6)
6e6e : c653                     dec ad1
6e70 : c653                     dec ad1
6e72 : c653                     dec ad1
6e74 : c653                     dec ad1
6e76 : c653                     dec ad1
6e78 : c653             tdad4   dec ad1         ;operand 1 -1
6e7a : 4c3a6e                   jmp tdad        ;iterate op1
                        
6e7d : a999             tdad5   lda #$99        ;precharge op1 max
6e7f : 8553                     sta ad1
6e81 : a554                     lda ad2         ;decimal adjust operand 2
6e83 : f030                     beq tdad7       ;end of iteration
6e85 : 290f                     and #$f         ;lower nibble mask
6e87 : d018                     bne tdad6       ;skip decimal adjust
6e89 : c654                     dec ad2         ;decimal adjust (?0-6)
6e8b : c654                     dec ad2
6e8d : c654                     dec ad2
6e8f : c654                     dec ad2
6e91 : c654                     dec ad2
6e93 : c654                     dec ad2
6e95 : e658                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
6e97 : e658                     inc sb2
6e99 : e658                     inc sb2
6e9b : e658                     inc sb2
6e9d : e658                     inc sb2
6e9f : e658                     inc sb2
6ea1 : c654             tdad6   dec ad2         ;operand 2 -1
6ea3 : e658                     inc sb2         ;complemented operand for subtract
6ea5 : a558                     lda sb2
6ea7 : 8d0432                   sta sba2        ;copy as non zp operand
6eaa : a554                     lda ad2
6eac : 8d0332                   sta ada2        ;copy as non zp operand
6eaf : 8555                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
6eb1 : e656                     inc adrh        ;result carry
6eb3 : d085                     bne tdad        ;iterate op2
6eb5 :                  tdad7
                                next_test
6eb5 : ad0032          >            lda test_case   ;previous test
6eb8 : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
6eba : f003            >        beq skip3319
                       >        trap            ;failed not equal (non zero)
6ebc : 20df73          >        jsr report_error
                       >
6ebf :                 >skip3319
                       >
002b =                 >test_num = test_num + 1
6ebf : a92b            >            lda #test_num   ;*** next tests' number
6ec1 : 8d0032          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
6ec4 : 18                       clc
6ec5 : d8                       cld
6ec6 : 08                       php
6ec7 : a955                     lda #$55
6ec9 : 6955                     adc #$55
6ecb : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
6ecd : f003            >        beq skip3321
                       >        trap            ;failed not equal (non zero)
6ecf : 20df73          >        jsr report_error
                       >
6ed2 :                 >skip3321
                        
6ed2 : 18                       clc
6ed3 : f8                       sed
6ed4 : 08                       php
6ed5 : a955                     lda #$55
6ed7 : 6955                     adc #$55
6ed9 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
6edb : f003            >        beq skip3323
                       >        trap            ;failed not equal (non zero)
6edd : 20df73          >        jsr report_error
                       >
6ee0 :                 >skip3323
                        
6ee0 : d8                       cld
6ee1 : 28                       plp
6ee2 : a955                     lda #$55
6ee4 : 6955                     adc #$55
6ee6 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
6ee8 : f003            >        beq skip3325
                       >        trap            ;failed not equal (non zero)
6eea : 20df73          >        jsr report_error
                       >
6eed :                 >skip3325
                        
6eed : 28                       plp
6eee : a955                     lda #$55
6ef0 : 6955                     adc #$55
6ef2 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
6ef4 : f003            >        beq skip3327
                       >        trap            ;failed not equal (non zero)
6ef6 : 20df73          >        jsr report_error
                       >
6ef9 :                 >skip3327
                        
6ef9 : 18                       clc
6efa : a96f                     lda #hi bin_rti_ret ;emulated interrupt for rti
6efc : 48                       pha
6efd : a917                     lda #lo bin_rti_ret
6eff : 48                       pha
6f00 : 08                       php
6f01 : f8                       sed
6f02 : a96f                     lda #hi dec_rti_ret ;emulated interrupt for rti
6f04 : 48                       pha
6f05 : a90b                     lda #lo dec_rti_ret
6f07 : 48                       pha
6f08 : 08                       php
6f09 : d8                       cld
6f0a : 40                       rti
6f0b :                  dec_rti_ret
6f0b : a955                     lda #$55
6f0d : 6955                     adc #$55
6f0f : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
6f11 : f003            >        beq skip3329
                       >        trap            ;failed not equal (non zero)
6f13 : 20df73          >        jsr report_error
                       >
6f16 :                 >skip3329
                        
6f16 : 40                       rti
6f17 :                  bin_rti_ret        
6f17 : a955                     lda #$55
6f19 : 6955                     adc #$55
6f1b : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
6f1d : f003            >        beq skip3331
                       >        trap            ;failed not equal (non zero)
6f1f : 20df73          >        jsr report_error
                       >
6f22 :                 >skip3331
                        
                            endif
                            
6f22 : ad0032                   lda test_case
6f25 : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
6f27 : f003            >        beq skip3333
                       >        trap            ;failed not equal (non zero)
6f29 : 20df73          >        jsr report_error
                       >
6f2c :                 >skip3333
                        
6f2c : a9f0                     lda #$f0        ;mark opcode testing complete
6f2e : 8d0032                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
6f31 : 205f74          >        jsr report_success
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
6f34 : 4c0034                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
6f37 :                  chkdad
                        ; decimal ADC / SBC zp
6f37 : 08                       php             ;save carry for subtract
6f38 : a553                     lda ad1
6f3a : 6554                     adc ad2         ;perform add
6f3c : 08                       php          
6f3d : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6f3f : f003            >        beq skip3337
                       >        trap            ;failed not equal (non zero)
6f41 : 20df73          >        jsr report_error
                       >
6f44 :                 >skip3337
                        
6f44 : 68                       pla             ;check flags
6f45 : 2901                     and #1          ;mask carry
6f47 : c556                     cmp adrh
                                trap_ne         ;bad carry
6f49 : f003            >        beq skip3339
                       >        trap            ;failed not equal (non zero)
6f4b : 20df73          >        jsr report_error
                       >
6f4e :                 >skip3339
                        
6f4e : 28                       plp
6f4f : 08                       php             ;save carry for next add
6f50 : a553                     lda ad1
6f52 : e558                     sbc sb2         ;perform subtract
6f54 : 08                       php          
6f55 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6f57 : f003            >        beq skip3341
                       >        trap            ;failed not equal (non zero)
6f59 : 20df73          >        jsr report_error
                       >
6f5c :                 >skip3341
                        
6f5c : 68                       pla             ;check flags
6f5d : 2901                     and #1          ;mask carry
6f5f : c556                     cmp adrh
                                trap_ne         ;bad flags
6f61 : f003            >        beq skip3343
                       >        trap            ;failed not equal (non zero)
6f63 : 20df73          >        jsr report_error
                       >
6f66 :                 >skip3343
                        
6f66 : 28                       plp
                        ; decimal ADC / SBC abs
6f67 : 08                       php             ;save carry for subtract
6f68 : a553                     lda ad1
6f6a : 6d0332                   adc ada2        ;perform add
6f6d : 08                       php          
6f6e : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6f70 : f003            >        beq skip3345
                       >        trap            ;failed not equal (non zero)
6f72 : 20df73          >        jsr report_error
                       >
6f75 :                 >skip3345
                        
6f75 : 68                       pla             ;check flags
6f76 : 2901                     and #1          ;mask carry
6f78 : c556                     cmp adrh
                                trap_ne         ;bad carry
6f7a : f003            >        beq skip3347
                       >        trap            ;failed not equal (non zero)
6f7c : 20df73          >        jsr report_error
                       >
6f7f :                 >skip3347
                        
6f7f : 28                       plp
6f80 : 08                       php             ;save carry for next add
6f81 : a553                     lda ad1
6f83 : ed0432                   sbc sba2        ;perform subtract
6f86 : 08                       php          
6f87 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6f89 : f003            >        beq skip3349
                       >        trap            ;failed not equal (non zero)
6f8b : 20df73          >        jsr report_error
                       >
6f8e :                 >skip3349
                        
6f8e : 68                       pla             ;check flags
6f8f : 2901                     and #1          ;mask carry
6f91 : c556                     cmp adrh
                                trap_ne         ;bad carry
6f93 : f003            >        beq skip3351
                       >        trap            ;failed not equal (non zero)
6f95 : 20df73          >        jsr report_error
                       >
6f98 :                 >skip3351
                        
6f98 : 28                       plp
                        ; decimal ADC / SBC #
6f99 : 08                       php             ;save carry for subtract
6f9a : a554                     lda ad2
6f9c : 8d1232                   sta ex_adci+1   ;set ADC # operand
6f9f : a553                     lda ad1
6fa1 : 201132                   jsr ex_adci     ;execute ADC # in RAM
6fa4 : 08                       php          
6fa5 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6fa7 : f003            >        beq skip3353
                       >        trap            ;failed not equal (non zero)
6fa9 : 20df73          >        jsr report_error
                       >
6fac :                 >skip3353
                        
6fac : 68                       pla             ;check flags
6fad : 2901                     and #1          ;mask carry
6faf : c556                     cmp adrh
                                trap_ne         ;bad carry
6fb1 : f003            >        beq skip3355
                       >        trap            ;failed not equal (non zero)
6fb3 : 20df73          >        jsr report_error
                       >
6fb6 :                 >skip3355
                        
6fb6 : 28                       plp
6fb7 : 08                       php             ;save carry for next add
6fb8 : a558                     lda sb2
6fba : 8d1532                   sta ex_sbci+1   ;set SBC # operand
6fbd : a553                     lda ad1
6fbf : 201432                   jsr ex_sbci     ;execute SBC # in RAM
6fc2 : 08                       php          
6fc3 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6fc5 : f003            >        beq skip3357
                       >        trap            ;failed not equal (non zero)
6fc7 : 20df73          >        jsr report_error
                       >
6fca :                 >skip3357
                        
6fca : 68                       pla             ;check flags
6fcb : 2901                     and #1          ;mask carry
6fcd : c556                     cmp adrh
                                trap_ne         ;bad carry
6fcf : f003            >        beq skip3359
                       >        trap            ;failed not equal (non zero)
6fd1 : 20df73          >        jsr report_error
                       >
6fd4 :                 >skip3359
                        
6fd4 : 28                       plp
                        ; decimal ADC / SBC zp,x
6fd5 : 08                       php             ;save carry for subtract
6fd6 : a553                     lda ad1
6fd8 : 7500                     adc 0,x         ;perform add
6fda : 08                       php          
6fdb : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6fdd : f003            >        beq skip3361
                       >        trap            ;failed not equal (non zero)
6fdf : 20df73          >        jsr report_error
                       >
6fe2 :                 >skip3361
                        
6fe2 : 68                       pla             ;check flags
6fe3 : 2901                     and #1          ;mask carry
6fe5 : c556                     cmp adrh
                                trap_ne         ;bad carry
6fe7 : f003            >        beq skip3363
                       >        trap            ;failed not equal (non zero)
6fe9 : 20df73          >        jsr report_error
                       >
6fec :                 >skip3363
                        
6fec : 28                       plp
6fed : 08                       php             ;save carry for next add
6fee : a553                     lda ad1
6ff0 : f504                     sbc sb2-ad2,x   ;perform subtract
6ff2 : 08                       php          
6ff3 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
6ff5 : f003            >        beq skip3365
                       >        trap            ;failed not equal (non zero)
6ff7 : 20df73          >        jsr report_error
                       >
6ffa :                 >skip3365
                        
6ffa : 68                       pla             ;check flags
6ffb : 2901                     and #1          ;mask carry
6ffd : c556                     cmp adrh
                                trap_ne         ;bad carry
6fff : f003            >        beq skip3367
                       >        trap            ;failed not equal (non zero)
7001 : 20df73          >        jsr report_error
                       >
7004 :                 >skip3367
                        
7004 : 28                       plp
                        ; decimal ADC / SBC abs,x
7005 : 08                       php             ;save carry for subtract
7006 : a553                     lda ad1
7008 : 7daf31                   adc ada2-ad2,x  ;perform add
700b : 08                       php          
700c : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
700e : f003            >        beq skip3369
                       >        trap            ;failed not equal (non zero)
7010 : 20df73          >        jsr report_error
                       >
7013 :                 >skip3369
                        
7013 : 68                       pla             ;check flags
7014 : 2901                     and #1          ;mask carry
7016 : c556                     cmp adrh
                                trap_ne         ;bad carry
7018 : f003            >        beq skip3371
                       >        trap            ;failed not equal (non zero)
701a : 20df73          >        jsr report_error
                       >
701d :                 >skip3371
                        
701d : 28                       plp
701e : 08                       php             ;save carry for next add
701f : a553                     lda ad1
7021 : fdb031                   sbc sba2-ad2,x  ;perform subtract
7024 : 08                       php          
7025 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7027 : f003            >        beq skip3373
                       >        trap            ;failed not equal (non zero)
7029 : 20df73          >        jsr report_error
                       >
702c :                 >skip3373
                        
702c : 68                       pla             ;check flags
702d : 2901                     and #1          ;mask carry
702f : c556                     cmp adrh
                                trap_ne         ;bad carry
7031 : f003            >        beq skip3375
                       >        trap            ;failed not equal (non zero)
7033 : 20df73          >        jsr report_error
                       >
7036 :                 >skip3375
                        
7036 : 28                       plp
                        ; decimal ADC / SBC abs,y
7037 : 08                       php             ;save carry for subtract
7038 : a553                     lda ad1
703a : 790431                   adc ada2-$ff,y  ;perform add
703d : 08                       php          
703e : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7040 : f003            >        beq skip3377
                       >        trap            ;failed not equal (non zero)
7042 : 20df73          >        jsr report_error
                       >
7045 :                 >skip3377
                        
7045 : 68                       pla             ;check flags
7046 : 2901                     and #1          ;mask carry
7048 : c556                     cmp adrh
                                trap_ne         ;bad carry
704a : f003            >        beq skip3379
                       >        trap            ;failed not equal (non zero)
704c : 20df73          >        jsr report_error
                       >
704f :                 >skip3379
                        
704f : 28                       plp
7050 : 08                       php             ;save carry for next add
7051 : a553                     lda ad1
7053 : f90531                   sbc sba2-$ff,y  ;perform subtract
7056 : 08                       php          
7057 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7059 : f003            >        beq skip3381
                       >        trap            ;failed not equal (non zero)
705b : 20df73          >        jsr report_error
                       >
705e :                 >skip3381
                        
705e : 68                       pla             ;check flags
705f : 2901                     and #1          ;mask carry
7061 : c556                     cmp adrh
                                trap_ne         ;bad carry
7063 : f003            >        beq skip3383
                       >        trap            ;failed not equal (non zero)
7065 : 20df73          >        jsr report_error
                       >
7068 :                 >skip3383
                        
7068 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
7069 : 08                       php             ;save carry for subtract
706a : a553                     lda ad1
706c : 6144                     adc (lo adi2-ad2,x) ;perform add
706e : 08                       php          
706f : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7071 : f003            >        beq skip3385
                       >        trap            ;failed not equal (non zero)
7073 : 20df73          >        jsr report_error
                       >
7076 :                 >skip3385
                        
7076 : 68                       pla             ;check flags
7077 : 2901                     and #1          ;mask carry
7079 : c556                     cmp adrh
                                trap_ne         ;bad carry
707b : f003            >        beq skip3387
                       >        trap            ;failed not equal (non zero)
707d : 20df73          >        jsr report_error
                       >
7080 :                 >skip3387
                        
7080 : 28                       plp
7081 : 08                       php             ;save carry for next add
7082 : a553                     lda ad1
7084 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
7086 : 08                       php          
7087 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7089 : f003            >        beq skip3389
                       >        trap            ;failed not equal (non zero)
708b : 20df73          >        jsr report_error
                       >
708e :                 >skip3389
                        
708e : 68                       pla             ;check flags
708f : 2901                     and #1          ;mask carry
7091 : c556                     cmp adrh
                                trap_ne         ;bad carry
7093 : f003            >        beq skip3391
                       >        trap            ;failed not equal (non zero)
7095 : 20df73          >        jsr report_error
                       >
7098 :                 >skip3391
                        
7098 : 28                       plp
                        ; decimal ADC / SBC (abs),y
7099 : 08                       php             ;save carry for subtract
709a : a553                     lda ad1
709c : 719c                     adc (adiy2),y   ;perform add
709e : 08                       php          
709f : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
70a1 : f003            >        beq skip3393
                       >        trap            ;failed not equal (non zero)
70a3 : 20df73          >        jsr report_error
                       >
70a6 :                 >skip3393
                        
70a6 : 68                       pla             ;check flags
70a7 : 2901                     and #1          ;mask carry
70a9 : c556                     cmp adrh
                                trap_ne         ;bad carry
70ab : f003            >        beq skip3395
                       >        trap            ;failed not equal (non zero)
70ad : 20df73          >        jsr report_error
                       >
70b0 :                 >skip3395
                        
70b0 : 28                       plp
70b1 : 08                       php             ;save carry for next add
70b2 : a553                     lda ad1
70b4 : f19e                     sbc (sbiy2),y   ;perform subtract
70b6 : 08                       php          
70b7 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
70b9 : f003            >        beq skip3397
                       >        trap            ;failed not equal (non zero)
70bb : 20df73          >        jsr report_error
                       >
70be :                 >skip3397
                        
70be : 68                       pla             ;check flags
70bf : 2901                     and #1          ;mask carry
70c1 : c556                     cmp adrh
                                trap_ne         ;bad carry
70c3 : f003            >        beq skip3399
                       >        trap            ;failed not equal (non zero)
70c5 : 20df73          >        jsr report_error
                       >
70c8 :                 >skip3399
                        
70c8 : 28                       plp
70c9 : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
70ca : a557             chkadd  lda adrf        ;add V-flag if overflow
70cc : 2983                     and #$83        ;keep N-----ZC / clear V
70ce : 48                       pha
70cf : a553                     lda ad1         ;test sign unequal between operands
70d1 : 4554                     eor ad2
70d3 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
70d5 : a553                     lda ad1         ;test sign equal between operands and result
70d7 : 4555                     eor adrl
70d9 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
70db : 68                       pla
70dc : 0940                     ora #$40        ;set V
70de : 48                       pha
70df : 68               ckad1   pla
70e0 : 8557                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
70e2 : 08                       php             ;save carry for subtract
70e3 : a553                     lda ad1
70e5 : 6554                     adc ad2         ;perform add
70e7 : 08                       php          
70e8 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
70ea : f003            >        beq skip3401
                       >        trap            ;failed not equal (non zero)
70ec : 20df73          >        jsr report_error
                       >
70ef :                 >skip3401
                        
70ef : 68                       pla             ;check flags
70f0 : 29c3                     and #$c3        ;mask NV----ZC
70f2 : c557                     cmp adrf
                                trap_ne         ;bad flags
70f4 : f003            >        beq skip3403
                       >        trap            ;failed not equal (non zero)
70f6 : 20df73          >        jsr report_error
                       >
70f9 :                 >skip3403
                        
70f9 : 28                       plp
70fa : 08                       php             ;save carry for next add
70fb : a553                     lda ad1
70fd : e558                     sbc sb2         ;perform subtract
70ff : 08                       php          
7100 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7102 : f003            >        beq skip3405
                       >        trap            ;failed not equal (non zero)
7104 : 20df73          >        jsr report_error
                       >
7107 :                 >skip3405
                        
7107 : 68                       pla             ;check flags
7108 : 29c3                     and #$c3        ;mask NV----ZC
710a : c557                     cmp adrf
                                trap_ne         ;bad flags
710c : f003            >        beq skip3407
                       >        trap            ;failed not equal (non zero)
710e : 20df73          >        jsr report_error
                       >
7111 :                 >skip3407
                        
7111 : 28                       plp
                        ; binary ADC / SBC abs
7112 : 08                       php             ;save carry for subtract
7113 : a553                     lda ad1
7115 : 6d0332                   adc ada2        ;perform add
7118 : 08                       php          
7119 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
711b : f003            >        beq skip3409
                       >        trap            ;failed not equal (non zero)
711d : 20df73          >        jsr report_error
                       >
7120 :                 >skip3409
                        
7120 : 68                       pla             ;check flags
7121 : 29c3                     and #$c3        ;mask NV----ZC
7123 : c557                     cmp adrf
                                trap_ne         ;bad flags
7125 : f003            >        beq skip3411
                       >        trap            ;failed not equal (non zero)
7127 : 20df73          >        jsr report_error
                       >
712a :                 >skip3411
                        
712a : 28                       plp
712b : 08                       php             ;save carry for next add
712c : a553                     lda ad1
712e : ed0432                   sbc sba2        ;perform subtract
7131 : 08                       php          
7132 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7134 : f003            >        beq skip3413
                       >        trap            ;failed not equal (non zero)
7136 : 20df73          >        jsr report_error
                       >
7139 :                 >skip3413
                        
7139 : 68                       pla             ;check flags
713a : 29c3                     and #$c3        ;mask NV----ZC
713c : c557                     cmp adrf
                                trap_ne         ;bad flags
713e : f003            >        beq skip3415
                       >        trap            ;failed not equal (non zero)
7140 : 20df73          >        jsr report_error
                       >
7143 :                 >skip3415
                        
7143 : 28                       plp
                        ; binary ADC / SBC #
7144 : 08                       php             ;save carry for subtract
7145 : a554                     lda ad2
7147 : 8d1232                   sta ex_adci+1   ;set ADC # operand
714a : a553                     lda ad1
714c : 201132                   jsr ex_adci     ;execute ADC # in RAM
714f : 08                       php          
7150 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7152 : f003            >        beq skip3417
                       >        trap            ;failed not equal (non zero)
7154 : 20df73          >        jsr report_error
                       >
7157 :                 >skip3417
                        
7157 : 68                       pla             ;check flags
7158 : 29c3                     and #$c3        ;mask NV----ZC
715a : c557                     cmp adrf
                                trap_ne         ;bad flags
715c : f003            >        beq skip3419
                       >        trap            ;failed not equal (non zero)
715e : 20df73          >        jsr report_error
                       >
7161 :                 >skip3419
                        
7161 : 28                       plp
7162 : 08                       php             ;save carry for next add
7163 : a558                     lda sb2
7165 : 8d1532                   sta ex_sbci+1   ;set SBC # operand
7168 : a553                     lda ad1
716a : 201432                   jsr ex_sbci     ;execute SBC # in RAM
716d : 08                       php          
716e : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7170 : f003            >        beq skip3421
                       >        trap            ;failed not equal (non zero)
7172 : 20df73          >        jsr report_error
                       >
7175 :                 >skip3421
                        
7175 : 68                       pla             ;check flags
7176 : 29c3                     and #$c3        ;mask NV----ZC
7178 : c557                     cmp adrf
                                trap_ne         ;bad flags
717a : f003            >        beq skip3423
                       >        trap            ;failed not equal (non zero)
717c : 20df73          >        jsr report_error
                       >
717f :                 >skip3423
                        
717f : 28                       plp
                        ; binary ADC / SBC zp,x
7180 : 08                       php             ;save carry for subtract
7181 : a553                     lda ad1
7183 : 7500                     adc 0,x         ;perform add
7185 : 08                       php          
7186 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7188 : f003            >        beq skip3425
                       >        trap            ;failed not equal (non zero)
718a : 20df73          >        jsr report_error
                       >
718d :                 >skip3425
                        
718d : 68                       pla             ;check flags
718e : 29c3                     and #$c3        ;mask NV----ZC
7190 : c557                     cmp adrf
                                trap_ne         ;bad flags
7192 : f003            >        beq skip3427
                       >        trap            ;failed not equal (non zero)
7194 : 20df73          >        jsr report_error
                       >
7197 :                 >skip3427
                        
7197 : 28                       plp
7198 : 08                       php             ;save carry for next add
7199 : a553                     lda ad1
719b : f504                     sbc sb2-ad2,x   ;perform subtract
719d : 08                       php          
719e : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
71a0 : f003            >        beq skip3429
                       >        trap            ;failed not equal (non zero)
71a2 : 20df73          >        jsr report_error
                       >
71a5 :                 >skip3429
                        
71a5 : 68                       pla             ;check flags
71a6 : 29c3                     and #$c3        ;mask NV----ZC
71a8 : c557                     cmp adrf
                                trap_ne         ;bad flags
71aa : f003            >        beq skip3431
                       >        trap            ;failed not equal (non zero)
71ac : 20df73          >        jsr report_error
                       >
71af :                 >skip3431
                        
71af : 28                       plp
                        ; binary ADC / SBC abs,x
71b0 : 08                       php             ;save carry for subtract
71b1 : a553                     lda ad1
71b3 : 7daf31                   adc ada2-ad2,x  ;perform add
71b6 : 08                       php          
71b7 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
71b9 : f003            >        beq skip3433
                       >        trap            ;failed not equal (non zero)
71bb : 20df73          >        jsr report_error
                       >
71be :                 >skip3433
                        
71be : 68                       pla             ;check flags
71bf : 29c3                     and #$c3        ;mask NV----ZC
71c1 : c557                     cmp adrf
                                trap_ne         ;bad flags
71c3 : f003            >        beq skip3435
                       >        trap            ;failed not equal (non zero)
71c5 : 20df73          >        jsr report_error
                       >
71c8 :                 >skip3435
                        
71c8 : 28                       plp
71c9 : 08                       php             ;save carry for next add
71ca : a553                     lda ad1
71cc : fdb031                   sbc sba2-ad2,x  ;perform subtract
71cf : 08                       php          
71d0 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
71d2 : f003            >        beq skip3437
                       >        trap            ;failed not equal (non zero)
71d4 : 20df73          >        jsr report_error
                       >
71d7 :                 >skip3437
                        
71d7 : 68                       pla             ;check flags
71d8 : 29c3                     and #$c3        ;mask NV----ZC
71da : c557                     cmp adrf
                                trap_ne         ;bad flags
71dc : f003            >        beq skip3439
                       >        trap            ;failed not equal (non zero)
71de : 20df73          >        jsr report_error
                       >
71e1 :                 >skip3439
                        
71e1 : 28                       plp
                        ; binary ADC / SBC abs,y
71e2 : 08                       php             ;save carry for subtract
71e3 : a553                     lda ad1
71e5 : 790431                   adc ada2-$ff,y  ;perform add
71e8 : 08                       php          
71e9 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
71eb : f003            >        beq skip3441
                       >        trap            ;failed not equal (non zero)
71ed : 20df73          >        jsr report_error
                       >
71f0 :                 >skip3441
                        
71f0 : 68                       pla             ;check flags
71f1 : 29c3                     and #$c3        ;mask NV----ZC
71f3 : c557                     cmp adrf
                                trap_ne         ;bad flags
71f5 : f003            >        beq skip3443
                       >        trap            ;failed not equal (non zero)
71f7 : 20df73          >        jsr report_error
                       >
71fa :                 >skip3443
                        
71fa : 28                       plp
71fb : 08                       php             ;save carry for next add
71fc : a553                     lda ad1
71fe : f90531                   sbc sba2-$ff,y  ;perform subtract
7201 : 08                       php          
7202 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7204 : f003            >        beq skip3445
                       >        trap            ;failed not equal (non zero)
7206 : 20df73          >        jsr report_error
                       >
7209 :                 >skip3445
                        
7209 : 68                       pla             ;check flags
720a : 29c3                     and #$c3        ;mask NV----ZC
720c : c557                     cmp adrf
                                trap_ne         ;bad flags
720e : f003            >        beq skip3447
                       >        trap            ;failed not equal (non zero)
7210 : 20df73          >        jsr report_error
                       >
7213 :                 >skip3447
                        
7213 : 28                       plp
                        ; binary ADC / SBC (zp,x)
7214 : 08                       php             ;save carry for subtract
7215 : a553                     lda ad1
7217 : 6144                     adc (lo adi2-ad2,x) ;perform add
7219 : 08                       php          
721a : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
721c : f003            >        beq skip3449
                       >        trap            ;failed not equal (non zero)
721e : 20df73          >        jsr report_error
                       >
7221 :                 >skip3449
                        
7221 : 68                       pla             ;check flags
7222 : 29c3                     and #$c3        ;mask NV----ZC
7224 : c557                     cmp adrf
                                trap_ne         ;bad flags
7226 : f003            >        beq skip3451
                       >        trap            ;failed not equal (non zero)
7228 : 20df73          >        jsr report_error
                       >
722b :                 >skip3451
                        
722b : 28                       plp
722c : 08                       php             ;save carry for next add
722d : a553                     lda ad1
722f : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
7231 : 08                       php          
7232 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7234 : f003            >        beq skip3453
                       >        trap            ;failed not equal (non zero)
7236 : 20df73          >        jsr report_error
                       >
7239 :                 >skip3453
                        
7239 : 68                       pla             ;check flags
723a : 29c3                     and #$c3        ;mask NV----ZC
723c : c557                     cmp adrf
                                trap_ne         ;bad flags
723e : f003            >        beq skip3455
                       >        trap            ;failed not equal (non zero)
7240 : 20df73          >        jsr report_error
                       >
7243 :                 >skip3455
                        
7243 : 28                       plp
                        ; binary ADC / SBC (abs),y
7244 : 08                       php             ;save carry for subtract
7245 : a553                     lda ad1
7247 : 719c                     adc (adiy2),y   ;perform add
7249 : 08                       php          
724a : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
724c : f003            >        beq skip3457
                       >        trap            ;failed not equal (non zero)
724e : 20df73          >        jsr report_error
                       >
7251 :                 >skip3457
                        
7251 : 68                       pla             ;check flags
7252 : 29c3                     and #$c3        ;mask NV----ZC
7254 : c557                     cmp adrf
                                trap_ne         ;bad flags
7256 : f003            >        beq skip3459
                       >        trap            ;failed not equal (non zero)
7258 : 20df73          >        jsr report_error
                       >
725b :                 >skip3459
                        
725b : 28                       plp
725c : 08                       php             ;save carry for next add
725d : a553                     lda ad1
725f : f19e                     sbc (sbiy2),y   ;perform subtract
7261 : 08                       php          
7262 : c555                     cmp adrl        ;check result
                                trap_ne         ;bad result
7264 : f003            >        beq skip3461
                       >        trap            ;failed not equal (non zero)
7266 : 20df73          >        jsr report_error
                       >
7269 :                 >skip3461
                        
7269 : 68                       pla             ;check flags
726a : 29c3                     and #$c3        ;mask NV----ZC
726c : c557                     cmp adrf
                                trap_ne         ;bad flags
726e : f003            >        beq skip3463
                       >        trap            ;failed not equal (non zero)
7270 : 20df73          >        jsr report_error
                       >
7273 :                 >skip3463
                        
7273 : 28                       plp
7274 : 60                       rts
                        
                        ; target for the jump absolute test
7275 : 88                       dey
7276 : 88                       dey
7277 :                  test_far
7277 : 08                       php             ;either SP or Y count will fail, if we do not hit
7278 : 88                       dey
7279 : 88                       dey
727a : 88                       dey
727b : 28                       plp
                                trap_cs         ;flags loaded?
727c : 9003            >        bcc skip3465
                       >        trap            ;failed carry set
727e : 20df73          >        jsr report_error
                       >
7281 :                 >skip3465
                        
                                trap_vs
7281 : 5003            >        bvc skip3467
                       >        trap            ;failed overflow set
7283 : 20df73          >        jsr report_error
                       >
7286 :                 >skip3467
                        
                                trap_mi
7286 : 1003            >        bpl skip3469
                       >        trap            ;failed minus (bit 7 set)
7288 : 20df73          >        jsr report_error
                       >
728b :                 >skip3469
                        
                                trap_eq 
728b : d003            >        bne skip3471
                       >        trap           ;failed equal (zero)
728d : 20df73          >        jsr report_error
                       >
7290 :                 >skip3471
                        
7290 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
7292 : f003            >        beq skip3473
                       >        trap            ;failed not equal (non zero)
7294 : 20df73          >        jsr report_error
                       >
7297 :                 >skip3473
                        
7297 : e041                     cpx #'A'
                                trap_ne        
7299 : f003            >        beq skip3475
                       >        trap            ;failed not equal (non zero)
729b : 20df73          >        jsr report_error
                       >
729e :                 >skip3475
                        
729e : c04f                     cpy #('R'-3)
                                trap_ne
72a0 : f003            >        beq skip3477
                       >        trap            ;failed not equal (non zero)
72a2 : 20df73          >        jsr report_error
                       >
72a5 :                 >skip3477
                        
72a5 : 48                       pha             ;save a,x
72a6 : 8a                       txa
72a7 : 48                       pha
72a8 : ba                       tsx
72a9 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
72ab : f003            >        beq skip3479
                       >        trap            ;failed not equal (non zero)
72ad : 20df73          >        jsr report_error
                       >
72b0 :                 >skip3479
                        
72b0 : 68                       pla             ;restore x
72b1 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
72b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
72b4 : 48              >            pha         ;use stack to load status
72b5 : 28              >            plp
                        
72b6 : 68                       pla             ;restore a
72b7 : e8                       inx             ;return registers with modifications
72b8 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
72ba : 4c083a                   jmp far_ret
                                
                        ; target for the jump indirect test
72bd : 00                       align
72be : c772             ptr_tst_ind dw test_ind
72c0 : 903a             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
72c2 : 20df73          >        jsr report_error
                        
72c5 : 88                       dey
72c6 : 88                       dey
72c7 :                  test_ind
72c7 : 08                       php             ;either SP or Y count will fail, if we do not hit
72c8 : 88                       dey
72c9 : 88                       dey
72ca : 88                       dey
72cb : 28                       plp
                                trap_cs         ;flags loaded?
72cc : 9003            >        bcc skip3484
                       >        trap            ;failed carry set
72ce : 20df73          >        jsr report_error
                       >
72d1 :                 >skip3484
                        
                                trap_vs
72d1 : 5003            >        bvc skip3486
                       >        trap            ;failed overflow set
72d3 : 20df73          >        jsr report_error
                       >
72d6 :                 >skip3486
                        
                                trap_mi
72d6 : 1003            >        bpl skip3488
                       >        trap            ;failed minus (bit 7 set)
72d8 : 20df73          >        jsr report_error
                       >
72db :                 >skip3488
                        
                                trap_eq 
72db : d003            >        bne skip3490
                       >        trap           ;failed equal (zero)
72dd : 20df73          >        jsr report_error
                       >
72e0 :                 >skip3490
                        
72e0 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
72e2 : f003            >        beq skip3492
                       >        trap            ;failed not equal (non zero)
72e4 : 20df73          >        jsr report_error
                       >
72e7 :                 >skip3492
                        
72e7 : e04e                     cpx #'N'
                                trap_ne        
72e9 : f003            >        beq skip3494
                       >        trap            ;failed not equal (non zero)
72eb : 20df73          >        jsr report_error
                       >
72ee :                 >skip3494
                        
72ee : c041                     cpy #('D'-3)
                                trap_ne
72f0 : f003            >        beq skip3496
                       >        trap            ;failed not equal (non zero)
72f2 : 20df73          >        jsr report_error
                       >
72f5 :                 >skip3496
                        
72f5 : 48                       pha             ;save a,x
72f6 : 8a                       txa
72f7 : 48                       pha
72f8 : ba                       tsx
72f9 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
72fb : f003            >        beq skip3498
                       >        trap            ;failed not equal (non zero)
72fd : 20df73          >        jsr report_error
                       >
7300 :                 >skip3498
                        
7300 : 68                       pla             ;restore x
7301 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
7302 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7304 : 48              >            pha         ;use stack to load status
7305 : 28              >            plp
                        
7306 : 68                       pla             ;restore a
7307 : e8                       inx             ;return registers with modifications
7308 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
730a : 6cc072                   jmp (ptr_ind_ret)
                                trap            ;runover protection
730d : 20df73          >        jsr report_error
                        
                        
                        ; target for the jump subroutine test
7310 : 88                       dey
7311 : 88                       dey
7312 :                  test_jsr
7312 : 08                       php             ;either SP or Y count will fail, if we do not hit
7313 : 88                       dey
7314 : 88                       dey
7315 : 88                       dey
7316 : 28                       plp
                                trap_cs         ;flags loaded?
7317 : 9003            >        bcc skip3503
                       >        trap            ;failed carry set
7319 : 20df73          >        jsr report_error
                       >
731c :                 >skip3503
                        
                                trap_vs
731c : 5003            >        bvc skip3505
                       >        trap            ;failed overflow set
731e : 20df73          >        jsr report_error
                       >
7321 :                 >skip3505
                        
                                trap_mi
7321 : 1003            >        bpl skip3507
                       >        trap            ;failed minus (bit 7 set)
7323 : 20df73          >        jsr report_error
                       >
7326 :                 >skip3507
                        
                                trap_eq 
7326 : d003            >        bne skip3509
                       >        trap           ;failed equal (zero)
7328 : 20df73          >        jsr report_error
                       >
732b :                 >skip3509
                        
732b : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
732d : f003            >        beq skip3511
                       >        trap            ;failed not equal (non zero)
732f : 20df73          >        jsr report_error
                       >
7332 :                 >skip3511
                        
7332 : e053                     cpx #'S'
                                trap_ne        
7334 : f003            >        beq skip3513
                       >        trap            ;failed not equal (non zero)
7336 : 20df73          >        jsr report_error
                       >
7339 :                 >skip3513
                        
7339 : c04f                     cpy #('R'-3)
                                trap_ne
733b : f003            >        beq skip3515
                       >        trap            ;failed not equal (non zero)
733d : 20df73          >        jsr report_error
                       >
7340 :                 >skip3515
                        
7340 : 48                       pha             ;save a,x
7341 : 8a                       txa
7342 : 48                       pha       
7343 : ba                       tsx             ;sp -4? (return addr,a,x)
7344 : e0fb                     cpx #$fb
                                trap_ne
7346 : f003            >        beq skip3517
                       >        trap            ;failed not equal (non zero)
7348 : 20df73          >        jsr report_error
                       >
734b :                 >skip3517
                        
734b : adff01                   lda $1ff        ;propper return on stack
734e : c93a                     cmp #hi(jsr_ret)
                                trap_ne
7350 : f003            >        beq skip3519
                       >        trap            ;failed not equal (non zero)
7352 : 20df73          >        jsr report_error
                       >
7355 :                 >skip3519
                        
7355 : adfe01                   lda $1fe
7358 : c9e1                     cmp #lo(jsr_ret)
                                trap_ne
735a : f003            >        beq skip3521
                       >        trap            ;failed not equal (non zero)
735c : 20df73          >        jsr report_error
                       >
735f :                 >skip3521
                        
                                set_stat $ff
                       >            load_flag $ff
735f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
7361 : 48              >            pha         ;use stack to load status
7362 : 28              >            plp
                        
7363 : 68                       pla             ;pull x,a
7364 : aa                       tax
7365 : 68                       pla
7366 : e8                       inx             ;return registers with modifications
7367 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
7369 : 60                       rts
                                trap            ;runover protection
736a : 20df73          >        jsr report_error
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
736d :                  nmi_trap
                                trap            ;check stack for conditions at NMI
736d : 20df73          >        jsr report_error
                        
7370 :                  res_trap
                                trap            ;unexpected RESET
7370 : 20df73          >        jsr report_error
                        
                                
7373 : 88                       dey
7374 : 88                       dey
7375 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
7375 : 08                       php             ;either SP or Y count will fail, if we do not hit
7376 : 88                       dey
7377 : 88                       dey
7378 : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
7379 : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
737b : f003            >        beq skip3528
                       >        trap            ;failed not equal (non zero)
737d : 20df73          >        jsr report_error
                       >
7380 :                 >skip3528
                        
7380 : e052                     cpx #'R'
                                trap_ne        
7382 : f003            >        beq skip3530
                       >        trap            ;failed not equal (non zero)
7384 : 20df73          >        jsr report_error
                       >
7387 :                 >skip3530
                        
7387 : c048                     cpy #('K'-3)
                                trap_ne
7389 : f003            >        beq skip3532
                       >        trap            ;failed not equal (non zero)
738b : 20df73          >        jsr report_error
                       >
738e :                 >skip3532
                        
738e : 8550                     sta irq_a       ;save registers during break test
7390 : 8651                     stx irq_x
7392 : ba                       tsx             ;test break on stack
7393 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
7396 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
7398 : f003            >        beq skip3535
                       >        trap            ;failed not equal (non zero)
739a : 20df73          >        jsr report_error
                       >
739d :                 >skip3535
                        
739d : 68                       pla
739e : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
73a0 : f003            >        beq skip3537
                       >        trap            ;failed not equal (non zero)
73a2 : 20df73          >        jsr report_error
                       >
73a5 :                 >skip3537
                        
73a5 : ba                       tsx
73a6 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
73a8 : f003            >        beq skip3539
                       >        trap            ;failed not equal (non zero)
73aa : 20df73          >        jsr report_error
                       >
73ad :                 >skip3539
                        
73ad : adff01                   lda $1ff        ;propper return on stack
73b0 : c93b                     cmp #hi(brk_ret)
                                trap_ne
73b2 : f003            >        beq skip3541
                       >        trap            ;failed not equal (non zero)
73b4 : 20df73          >        jsr report_error
                       >
73b7 :                 >skip3541
                        
73b7 : adfe01                   lda $1fe
73ba : c93e                     cmp #lo(brk_ret)
                                trap_ne
73bc : f003            >        beq skip3543
                       >        trap            ;failed not equal (non zero)
73be : 20df73          >        jsr report_error
                       >
73c1 :                 >skip3543
                        
                                set_stat $ff
                       >            load_flag $ff
73c1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
73c3 : 48              >            pha         ;use stack to load status
73c4 : 28              >            plp
                        
73c5 : a651                     ldx irq_x
73c7 : e8                       inx             ;return registers with modifications
73c8 : a550                     lda irq_a
73ca : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
73cc : 40                       rti
                                trap            ;runover protection
73cd : 20df73          >        jsr report_error
                        
                                
                            if report = 1
                                include "report.i65"
0001 =                  T_ATOM = 1
0002 =                  T_BEEB = 2
                        
                          if (TARGET = T_ATOM)
ffe3 =                  OSRDCH = $FFE3
fff4 =                  OSWRCH = $FFF4
                          else
                            if (TARGET = T_BEEB)
                        OSRDCH = $FFE0
                        OSWRCH = $FFEE
                            else
                        ERROR TARGET must be 1 or 2
                            endif
                          endif
                        
                        
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
73d0 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
73d0 : a200            >        ldx #0
73d2 : ada474          >        lda rmsg_start
73d5 :                 >loop3548
73d5 : 20a074          >        jsr rchar
73d8 : e8              >        inx
73d9 : bda474          >        lda rmsg_start,x
73dc : d0f7            >        bne loop3548
                        
73de : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
73df :                  report_error
                        ;save registers
73df : 08                       php
73e0 : 48                       pha
73e1 : 8a                       txa
73e2 : 48                       pha
73e3 : 98                       tya
73e4 : 48                       pha
73e5 : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
73e6 : a200            >        ldx #0
73e8 : adb874          >        lda rmsg_stack
73eb :                 >loop3549
73eb : 20a074          >        jsr rchar
73ee : e8              >        inx
73ef : bdb874          >        lda rmsg_stack,x
73f2 : d0f7            >        bne loop3549
                        
73f4 : ba                       tsx
73f5 : e8                       inx
73f6 : a901                     lda #1      ;address high
73f8 : 208c74                   jsr rhex
73fb : 8a                       txa         ;address low
73fc : 208c74                   jsr rhex
73ff : 208874           rstack  jsr rspace
7402 : bd0001                   lda $100,x  ;stack data
7405 : 208c74                   jsr rhex
7408 : e8                       inx
7409 : d0f4                     bne rstack
740b : 207f74                   jsr rcrlf   ;new line
                        ;show zero page workspace
740e : a900                     lda #0
7410 : 208c74                   jsr rhex
7413 : a952                     lda #zpt
7415 : aa                       tax
7416 : 208c74                   jsr rhex
7419 : 208874           rzp     jsr rspace
741c : b500                     lda 0,x
741e : 208c74                   jsr rhex
7421 : e8                       inx
7422 : e059                     cpx #zp_bss
7424 : d0f3                     bne rzp
7426 : 207f74                   jsr rcrlf
                        ;show absolute workspace
7429 : a932                     lda #hi(data_segment)
742b : 208c74                   jsr rhex
742e : a900                     lda #lo(data_segment)
7430 : 208c74                   jsr rhex
7433 : a200                     ldx #0
7435 : 208874           rabs    jsr rspace
7438 : bd0032                   lda data_segment,x
743b : 208c74                   jsr rhex
743e : e8                       inx
743f : e008                     cpx #(data_bss-data_segment)
7441 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
7443 : a200            >        ldx #0
7445 : add474          >        lda rmsg_cont
7448 :                 >loop3550
7448 : 20a074          >        jsr rchar
744b : e8              >        inx
744c : bdd474          >        lda rmsg_cont,x
744f : d0f7            >        bne loop3550
                        
7451 : 207574           rerr1   jsr rget
7454 : c943                     cmp #'C'
7456 : d0f9                     bne rerr1        
                        ;restore registers
7458 : 68                       pla
7459 : a8                       tay
745a : 68                       pla
745b : aa                       tax
745c : 68                       pla 
745d : 28                       plp
745e : 60                       rts   
                        
                        ;show test has ended, ask to repeat
745f :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
745f : a200            >        ldx #0
7461 : adec74          >        lda rmsg_success
7464 :                 >loop3551
7464 : 20a074          >        jsr rchar
7467 : e8              >        inx
7468 : bdec74          >        lda rmsg_success,x
746b : d0f7            >        bne loop3551
                        
746d : 207574           rsuc1   jsr rget
7470 : c952                     cmp #'R'
7472 : d0f9                     bne rsuc1        
7474 : 60                       rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
7475 :                  rget                ;get character in A
7475 : 20e3ff                   jsr OSRDCH  ;example: OSRDCH on a Beeb/Atom
7478 : c961                     cmp #'a'    ;lower case
747a : 9002                     bcc rget1
747c : 295f                     and #$5f    ;convert to upper case
747e : 60               rget1   rts
                        
                        ;output subroutines
747f : a90a             rcrlf   lda #10
7481 : 20a074                   jsr rchar
7484 : a90d                     lda #13
7486 : d018                     bne rchar
                        
7488 : a920             rspace  lda #' '
748a : d014                     bne rchar
                                
748c : 48               rhex    pha         ;report hex byte in A
748d : 4a                       lsr a       ;high nibble first
748e : 4a                       lsr a
748f : 4a                       lsr a
7490 : 4a                       lsr a
7491 : 209774                   jsr rnib
7494 : 68                       pla         ;now low nibble
7495 : 290f                     and #$f
                        
7497 : 18               rnib    clc         ;report nibble in A
7498 : 6930                     adc #'0'    ;make printable 0-9
749a : c93a                     cmp #'9'+1
749c : 9002                     bcc rchar
749e : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
74a0 :                  rchar               ;report character in A
74a0 : 20f4ff                   jsr OSWRCH  ;example: OSWRCH on a Beeb/Atom
74a3 : 60                       rts
                        
74a4 :                  rmsg_start
74a4 : 0a0d5374617274..         db  10,13,"Started testing",10,13,0
74b8 :                  rmsg_stack
74b8 : 0a0d7265677320..         db  10,13,"regs Y  X  A  PS PCLPCH",10,13,0
74d4 :                  rmsg_cont
74d4 : 0a0d7072657373..         db  10,13,"press C to continue",10,13,0
74ec :                  rmsg_success
74ec : 0a0d416c6c2074..         db  10,13,"All tests completed, press R to repeat",10,13,0
                            if rep_int = 1
                        rmsg_priority
                                db  10,13,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
7517 :                  zp_init
7517 : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
751b : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
751c : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
7520 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
7524 : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
7528 : 1732             ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
752a : 1832                     dw  abs1+1
752c : 1932                     dw  abs1+2
752e : 1a32                     dw  abs1+3
7530 : 1b32                     dw  abs7f
7532 : 1f31             inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
7534 : 0332             indt_   dw  abst            ;indirect pointer to store area in absolute memory
7536 : 0432                     dw  abst+1
7538 : 0532                     dw  abst+2
753a : 0632                     dw  abst+3
753c : 0b31             inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
753e : 4e32             indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
7540 : 4f32                     dw  absAN+1
7542 : 5032                     dw  absAN+2
7544 : 5132                     dw  absAN+3
7546 : 5232             indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
7548 : 5332                     dw  absEO+1
754a : 5432                     dw  absEO+2
754c : 5532                     dw  absEO+3
754e : 4a32             indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
7550 : 4b32                     dw  absOR+1
7552 : 4c32                     dw  absOR+2
7554 : 4d32                     dw  absOR+3
                        ;add/subtract indirect pointers
7556 : 0332             adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
7558 : 0432             sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
755a : 0431             adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
755c : 0531             sbiy2_  dw  sba2-$ff
755e :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
755e :                  data_init
755e : 2900             ex_and_ and #0              ;execute immediate opcodes
7560 : 60                       rts
7561 : 4900             ex_eor_ eor #0              ;execute immediate opcodes
7563 : 60                       rts
7564 : 0900             ex_ora_ ora #0              ;execute immediate opcodes
7566 : 60                       rts
7567 : 6900             ex_adc_ adc #0              ;execute immediate opcodes
7569 : 60                       rts
756a : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
756c : 60                       rts
756d : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
7571 : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
7572 : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
7576 :                  rASL_                       ;expected result ASL & ROL -carry
7576 : 86048200         rROL_   db  $86,$04,$82,0   ; "
757a : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
757e :                  rLSR_                       ;expected result LSR & ROR -carry
757e : 61412000         rROR_   db  $61,$41,$20,0   ; "
7582 : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
7586 :                  fASL_                       ;expected flags for shifts
7586 : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
758a : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
758e :                  fLSR_
758e : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
7592 : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
7596 : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
759b : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
75a0 : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
75a4 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
75a8 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
75ac : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
75b0 : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
75b4 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
75b8 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
75bc : 02800080         absflo_ db  fz,fn,0,fn
75c0 :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
75c0 :                  vec_init
75c0 : 6d73                     dw  nmi_trap
75c2 : 7073                     dw  res_trap
75c4 : 7573                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
No errors in pass 2.
Wrote binary from address $3400 through $75c5.
Total size 16838 bytes.
Program start address is at $3400 (13312).
